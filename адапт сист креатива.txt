# Прототип Технического Задания: Адаптивная Система Креативной Генерации v1

**Дата:** 11 мая 2025 г.

## 1. Введение

### 1.1. Цель
Создание самосовершенствующейся системы генерации видеоконтента, способной анализировать собственные креативные выборы и динамически корректировать свою работу для повышения разнообразия, оригинальности и соответствия "гениальной" задумке, избегая творческого застоя и однотипности.

### 1.2. Основная Идея
Система будет работать на основе цикла обратной связи:
1.  **Генерация:** Создание контента (темы, креативные брифы, промпты для MJ/Runway) с использованием текущего набора креативных опций.
2.  **Логирование:** Детальная запись всех ключевых креативных выборов и сгенерированных артефактов (темы, промпты и т.д.) в структурированный лог.
3.  **Анализ:** Периодический анализ накопленных логов для выявления паттернов, часто используемых/игнорируемых опций, признаков однообразия или "зацикливания".
4.  **Корректировка:** На основе результатов анализа, система динамически модифицирует свои внутренние параметры или промпты, чтобы стимулировать использование менее популярных, но потенциально интересных креативных путей, или принудительно активирует "экспериментальные" режимы.

## 2. Ключевые Компоненты Системы

### 2.1. Модуль Генерации Контента (МГК)
* **Текущая функциональность:** Существующие скрипты (`generate_content.py`, `generate_media.py` и др.), отвечающие за полный цикл генерации – от темы до финальных промптов.
* **Требуемые доработки:**
    * Интеграция расширенного логирования всех релевантных креативных выборов и артефактов (см. п. 2.2).
    * Способность принимать динамические инструкции/параметры от Модуля Динамической Корректировки Промптов (МДКП) для изменения логики выбора или модификации генерируемых промптов.
    * Способность работать с различными подгруппами креативных опций (для "бешеных сценариев").

### 2.2. Модуль Расширенного Логирования Креативности (МРЛК)
* **Назначение:** Сбор и структурированное сохранение данных о каждом цикле генерации.
* **Логируемые данные (минимальный набор, расширяемый):**
    * `TimestampUTC`, `GenerationID`
    * `InputTopic` (Исходная тема)
    * `CoreChoiceValue` (Выбранное ядро: настроение/дуга)
    * `CoreChoiceType` (Тип ядра: "mood" или "arc")
    * `DriverChoiceValue` (Выбранный драйвер)
    * `DriverChoiceType` (Тип драйвера: "prompt", "perspective", "metaphor")
    * `AestheticChoiceValue` (Выбранная эстетика: стиль режиссера/художника/движения и т.д., или "None")
    * `AestheticChoiceType` (Тип эстетики: "director", "artist", "art_movement", "visual_style", "atmospheric_style", или "None")
    * `StyleKeywords` (Сгенерированные ключевые слова для стиля, если применимо)
    * `FinalMJPrompt_EN` (Финальный промпт для Midjourney)
    * `FinalRunwayPrompt_EN` (Финальный промпт для Runway)
    * *(Опционально)*: Ссылки на сгенерированные медиафайлы (после их создания).
    * *(Опционально)*: Метрики оценки финального видео (если будет внедрена система оценки).
* **Формат лога:** CSV-файл (`creative_choices_extended.csv`), хранящийся в B2.
* **Реализация:** Модификация `generate_content.py` (блок `finally` в методе `run`) для сбора и записи этих данных.

### 2.3. Модуль Анализа Логов Креативности (МАЛК)
* **Назначение:** Автоматический или полуавтоматический анализ данных из МРЛК для выявления тенденций и проблем.
* **Функциональность:**
    * Агрегация статистики по частоте использования различных креативных опций (ядер, драйверов, эстетик, ключевых слов).
    * Выявление "застоев" – слишком частого выбора одних и тех же опций или их комбинаций.
    * Определение "игнорируемых" опций – тех, которые система редко или никогда не выбирает, несмотря на их наличие.
    * (Продвинутый уровень) Поиск корреляций между исходной темой и креативными выборами.
    * (Продвинутый уровень) Попытка оценить "разнообразие" генерируемых промптов (MJ/Runway) на основе лексического анализа или других метрик.
* **Выход:** Отчеты, дашборды или сигналы для МДКП.
* **Реализация:** Может быть отдельным скриптом, запускаемым по расписанию, или интегрирован в `b2_storage_manager.py`.

### 2.4. Модуль Динамической Корректировки Промптов (МДКП)
* **Назначение:** Внесение изменений в процесс генерации на основе выводов МАЛК.
* **Функциональность:**
    * **Мягкая коррекция:** Динамическое изменение весов или вероятностей выбора определенных опций в `creative_config.json` (потребует механизма обновления конфига в B2 и его перезагрузки МГК).
    * **Прямая модификация промптов:** Добавление в системные промпты OpenAI (в `prompts_config.json` для шагов 1, 2, 3, 5, 6a, 6b) дополнительных инструкций, например:
        * "Избегай выбора 'Загадочное' для следующих N генераций."
        * "При выборе драйвера, отдай предпочтение категории 'perspective_types'."
        * "Для Runway промпта, опиши трансформацию объекта, а не только движение камеры."
    * **Активация/деактивация "бешеных сценариев"** (см. п. 2.5).
* **Реализация:** Потребует модификации `generate_content.py` для чтения инструкций от МДКП и соответствующей адаптации передаваемых в OpenAI промптов. Состояние инструкций может храниться в отдельном конфигурационном файле в B2.

### 2.5. Модуль Управления "Бешеными Сценариями" / Ротацией Подгрупп (МУБС)
* **Назначение:** Гарантированное использование разнообразных, включая экспериментальные и нестандартные, креативных опций.
* **Функциональность:**
    * Использование различных подгрупп опций из `creative_config.json` (например, `perspective_types_standard`, `perspective_types_wild`, `emotional_arcs_common`, `emotional_arcs_rare`).
    * Управление состоянием, определяющим, какая подгруппа активна для каждого типа выбора (ядро, драйвер, эстетика).
    * Периодическая ротация активных подгрупп (например, после N генераций или по сигналу от МАЛК).
* **Реализация:**
    * Реструктуризация `creative_config.json` для поддержки подгрупп.
    * Модификация `generate_content.py` для выбора опций из текущей активной подгруппы.
    * Механизм обновления состояния активных подгрупп (в `config_public.json` или новом файле, управляемом `b2_storage_manager.py` или `generate_content.py`).

### 2.6. Хранилище Данных
* **B2 Bucket:** Для хранения логов (`creative_choices_extended.csv`), конфигурационных файлов (`config.json`, `creative_config.json`, `prompts_config.json`, `config_public.json`, `config_gen.json`, `config_midjourney.json`, файл состояния МУБС/МДКП).
* **Локальная файловая система (в среде выполнения):** Для временных файлов, шрифтов, базовых ассетов.

## 3. Процесс Работы Системы (Цикл Обратной Связи)

1.  **Инициация:** `b2_storage_manager.py` запускает цикл.
2.  **Генерация Контента (МГК):**
    * `generate_content.py` вызывается для создания темы, креативного брифа, сценария, промптов MJ/Runway.
    * При генерации МГК учитывает текущие инструкции от МДКП и активные подгруппы от МУБС.
3.  **Логирование (МРЛК):**
    * `generate_content.py` записывает расширенный набор данных о креативных выборах и артефактах в `creative_choices_extended.csv` в B2.
4.  **Генерация Медиа:** `generate_media.py` создает медиафайлы.
5.  **Анализ Логов (МАЛК):**
    * Периодически (например, отдельным cron-заданием или как часть `b2_storage_manager.py` раз в N запусков) МАЛК анализирует `creative_choices_extended.csv`.
    * Выявляет паттерны, частоты, "застои", неиспользуемые опции.
    * Формирует рекомендации или сигналы.
6.  **Принятие Решений о Корректировке (МДКП/МУБС):**
    * На основе выводов МАЛК, МДКП решает, какие корректировки внести:
        * Изменить системные промпты OpenAI.
        * Изменить веса опций (если реализовано).
        * Активировать/деактивировать ротацию подгрупп или конкретный "бешеный сценарий" через МУБС.
    * Обновляет соответствующие конфигурационные файлы/файлы состояния в B2.
7.  **Следующий Цикл:** МГК при следующем запуске использует обновленные инструкции/конфигурации.

## 4. Этапы Реализации (Предварительно)

### Этап 1: Расширенное Логирование (Основа для Анализа)
* **Задача:** Реализовать МРЛК.
* **Действия:** Модифицировать `generate_content.py` для сбора и записи всех согласованных дополнительных полей в `creative_choices_extended.csv`.
* **Результат:** Накопление детализированных данных для последующего анализа.

### Этап 2: Разработка Модуля Анализа Логов (МАЛК - Базовая Версия)
* **Задача:** Создать инструмент для анализа логов.
* **Действия:**
    * Разработать скрипт, который скачивает `creative_choices_extended.csv`.
    * Реализовать базовую статистику: подсчет частоты использования каждого `CoreChoiceValue`, `DriverChoiceValue`, `AestheticChoiceValue` и их типов.
    * Визуализация результатов (например, простые графики или текстовые отчеты).
* **Результат:** Возможность вручную или полуавтоматически отслеживать предпочтения системы.

### Этап 3: Реализация Простого Механизма Корректировки Промптов (МДКП - Ручное Управление)
* **Задача:** Создать возможность влиять на выборы AI через модификацию промптов.
* **Действия:**
    * Создать в B2 (или в `config_public.json`) небольшой JSON-файл с "директивами" (например, `{"avoid_mood": "Загадочное", "prefer_driver_type": "perspective"}`).
    * Модифицировать `generate_content.py` так, чтобы он читал эти директивы и добавлял соответствующие инструкции в системные промпты OpenAI (шаги 6.1, 6.2, 6.3).
* **Результат:** Возможность вручную "подталкивать" систему к большему разнообразию на основе анализа из Этапа 2.

### Этап 4: Автоматизация Корректировки (МДКП - Автоматическое Управление)
* **Задача:** Связать МАЛК и МДКП.
* **Действия:**
    * МАЛК генерирует файл с директивами на основе анализа (например, если "Загадочное" используется >50% времени, добавить директиву на его избегание).
    * МДКП использует эти автоматически сгенерированные директивы.
* **Результат:** Система начинает проявлять элементы саморегуляции.

### Этап 5: Реализация Ротации Подгрупп (МУБС - "Бешеные Сценарии")
* **Задача:** Гарантированное использование всего спектра креативных опций.
* **Действия:**
    * Реструктуризация `creative_config.json` (подгруппы для `creative_prompts`, `perspective_types` и т.д.).
    * Создание механизма управления состоянием активных подгрупп.
    * Модификация `generate_content.py` для работы с подгруппами.
    * Интеграция с МАЛК/МДКП для активации этого режима при необходимости.
* **Результат:** Значительное повышение непредсказуемости и разнообразия, принудительное использование экспериментальных опций.

### Этап 6 (Опционально): Интеграция Внешней Оценки
* **Задача:** Учет качества конечного результата (видео) в цикле обратной связи.
* **Действия:** Разработка механизма оценки видео (субъективная человеком или попытка автоматической оценки по косвенным признакам) и передача этой оценки в МАЛК.
* **Результат:** Система стремится не только к разнообразию, но и к повышению "качества" (в соответствии с критериями оценки).

## 5. Ожидаемые Результаты от Внедрения Системы
* Значительное повышение разнообразия и оригинальности генерируемых видеороликов.
* Снижение вероятности "творческого застоя" и повторения однотипных решений.
* Появление более сложных, "бешеных" и неожиданных креативных сценариев.
* Создание более адаптивной и интеллектуальной системы генерации контента.
* Накопление уникального датасета о работе креативного AI, который можно использовать для дальнейших исследований и улучшений.

## 6. Открытые Вопросы и Риски
* **Формализация "креативности" и "разнообразия":** Как точно измерять эти параметры для МАЛК?
* **Баланс между разнообразием и релевантностью:** Чрезмерное стремление к новизне может привести к генерации контента, не соответствующего исходной теме.
* **Сложность отладки:** Поведение саморегулирующейся системы может быть трудно предсказуемым и отлаживаемым.
* **Стоимость OpenAI API:** Более сложные промпты и потенциально большее количество итераций (если система будет "экспериментировать") могут увеличить расходы.
* **Качество "бешеных сценариев":** Не все экспериментальные опции могут давать хороший результат; потребуется тщательный отбор и, возможно, настройка.

---
Этот документ является отправной точкой. Каждый из компонентов и этапов потребует дальнейшей детализации и проработки.
