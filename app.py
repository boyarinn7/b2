import subprocess
import os
import json
import boto3
from botocore.exceptions import NoCredentialsError, ClientError
from flask import Flask, request, jsonify

app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
B2_ACCESS_KEY = os.getenv("B2_ACCESS_KEY")
B2_SECRET_KEY = os.getenv("B2_SECRET_KEY")
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")
MIDJOURNEY_API_KEY = os.getenv("MIDJOURNEY_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([B2_ACCESS_KEY, B2_SECRET_KEY, B2_BUCKET_NAME, MIDJOURNEY_API_KEY]):
    app.logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç B2
b2_client = boto3.client(
    "s3",
    endpoint_url="https://s3.us-east-005.backblazeb2.com",
    aws_access_key_id=B2_ACCESS_KEY,
    aws_secret_access_key=B2_SECRET_KEY
)

def load_config_public():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç config_public.json –∏–∑ B2."""
    try:
        config_obj = b2_client.get_object(Bucket=B2_BUCKET_NAME, Key="config/config_public.json")
        config_data = json.loads(config_obj['Body'].read().decode('utf-8'))
        app.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ B2")
        return config_data
    except ClientError as e:
        app.logger.warning(f"‚ö†Ô∏è Config file not found, creating new: {str(e)}")
        return {"publish": "", "empty": [], "processing_lock": False}
    except json.JSONDecodeError as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ config_public.json: {e}")
        return {"publish": "", "empty": [], "processing_lock": False}

def save_config_public(config_data):
    bucket_name = os.getenv("B2_BUCKET_NAME")
    if not bucket_name:
        app.logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è B2_BUCKET_NAME –Ω–µ –∑–∞–¥–∞–Ω–∞")
        raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è B2_BUCKET_NAME –Ω–µ –∑–∞–¥–∞–Ω–∞")
    try:
        json_str = json.dumps(config_data, ensure_ascii=False, indent=4)
        json.loads(json_str)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        b2_client.put_object(
            Bucket=bucket_name,
            Key="config/config_public.json",
            Body=json_str.encode('utf-8')
        )
        app.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ B2")
    except json.JSONDecodeError as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: {e}")
        raise
    except NoCredentialsError:
        app.logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ B2: –Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        raise
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ B2: {e}")
        raise

@app.route('/hook', methods=['POST'])

def webhook_handler():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –æ—Ç Midjourney."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    api_key = request.headers.get("X-API-Key")
    app.logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å API-–∫–ª—é—á–æ–º: {api_key}")
    if api_key != MIDJOURNEY_API_KEY:
        app.logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á")
        return jsonify({"error": "Unauthorized"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type
    if request.content_type != "application/json":
        app.logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type: {request.content_type}, –æ–∂–∏–¥–∞–µ—Ç—Å—è application/json")
        return jsonify({"error": "Unsupported Media Type: Content-Type must be application/json"}), 415

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        data = request.json
        app.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)}")
        task_id = data.get("data", {}).get("task_id")
        image_urls = data.get("data", {}).get("output", {}).get("image_urls", [])

        if not task_id or not image_urls:
            app.logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç task_id –∏–ª–∏ image_urls")
            return jsonify({"error": "Invalid data format"}), 400

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_public = load_config_public()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ config_public ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if not isinstance(config_public, dict):
            app.logger.warning("‚ö†Ô∏è config_public –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π")
            config_public = {"publish": "", "empty": [], "processing_lock": False}

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ Midjourney
        config_public["midjourney_results"] = {
            "task_id": task_id,
            "image_urls": image_urls
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        save_config_public(config_public)

        # –ù–æ–≤–æ–µ: —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
        updated_config = load_config_public()
        app.logger.info("–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, config_public: " + json.dumps(updated_config, ensure_ascii=False))

        # –ó–∞–ø—É—Å–∫ b2_storage_manager.py
        script_path = "scripts/b2_storage_manager.py"
        app.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {script_path}")
        try:
            subprocess.run(["python", script_path], check=True)
            app.logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç {script_path} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except subprocess.CalledProcessError as e:
            app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {script_path}: {e}")
            return jsonify({"error": f"Failed to run {script_path}: {str(e)}"}), 500
        except FileNotFoundError:
            app.logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({"error": f"Script {script_path} not found"}), 500

        return jsonify({"message": "Webhook processed"}), 200

    except json.JSONDecodeError:
        app.logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞")
        return jsonify({"error": "Invalid JSON"}), 400
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)