import json
import os
import sys
import requests
import openai
import textstat
import spacy
import re
import subprocess
import boto3
import io
import random
import argparse

from modules.config_manager import ConfigManager
from modules.logger import get_logger
from modules.error_handler import handle_error
from datetime import datetime
from modules.utils import ensure_directory_exists

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'modules')))
logger = get_logger("generate_content")
config = ConfigManager()

B2_BUCKET_NAME = "boyarinnbotbucket"  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥–∞
FAILSAFE_PATH = "config/FailSafeVault.json"
TRACKER_PATH = "data/topics_tracker.json"
CONFIG_PUBLIC_LOCAL_PATH = "config/config_public.json"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID ---
def generate_file_id():
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì–ú–ú–î–î-–ß–ß–ú–ú."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    now = datetime.utcnow()
    # –§–æ—Ä–º–∞—Ç –ì–ì–ì–ì–ú–ú–î–î-–ß–ß–ú–ú
    date_part = now.strftime("%Y%m%d")
    time_part = now.strftime("%H%M")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .json
    return f"{date_part}-{time_part}"

def run_generate_media(generation_id):
    try:
        scripts_folder = config.get("FILE_PATHS.scripts_folder", "scripts")
        script_path = os.path.join(scripts_folder, "generate_media.py")
        if not os.path.isfile(script_path):
            raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç generate_media.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        logger.info(f"–ó–∞–ø—É—Å–∫: {script_path} —Å generation_id: {generation_id}")
        subprocess.run(["python", script_path, generation_id], check=True)
        logger.info(f"–°–∫—Ä–∏–ø—Ç {script_path} –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    except subprocess.CalledProcessError as e:
        handle_error("Script Error", "–û—à–∏–±–∫–∞ generate_media.py", e)
        logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
    except FileNotFoundError as e:
        handle_error("File Error", f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}", e)
        logger.warning("generate_media.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
    except Exception as e:
        handle_error("Unknown Error", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ generate_media.py", e)
        logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")

def get_b2_client():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Backblaze B2."""
    try:
        return boto3.client(
            's3',
            endpoint_url=os.getenv("B2_ENDPOINT"),
            aws_access_key_id=os.getenv("B2_ACCESS_KEY"),
            aws_secret_access_key=os.getenv("B2_SECRET_KEY")
        )
    except Exception as e:
        handle_error("B2 Client Initialization Error", str(e), e)
        return None

def download_config_public():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª config_public.json –∏–∑ B2 –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    try:
        s3 = get_b2_client()
        if not s3:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç B2")
        bucket_name = config.get("API_KEYS.b2.bucket_name", B2_BUCKET_NAME)
        remote_path = "config/config_public.json"
        os.makedirs(os.path.dirname(CONFIG_PUBLIC_LOCAL_PATH), exist_ok=True)
        s3.download_file(bucket_name, remote_path, CONFIG_PUBLIC_LOCAL_PATH)
        logger.info(f"‚úÖ –§–∞–π–ª config_public.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ B2 –≤ {CONFIG_PUBLIC_LOCAL_PATH}")
    except Exception as e:
        handle_error("Download Config Public Error", str(e), e)

def generate_file_id():
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD-HHmm."""
    now = datetime.utcnow()
    date_part = now.strftime("%Y%m%d")
    time_part = now.strftime("%H%M")
    return f"{date_part}-{time_part}.json"

def save_generation_id_to_config(file_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª config_gen.json."""
    config_gen_path = os.path.join("config", "config_gen.json")
    os.makedirs(os.path.dirname(config_gen_path), exist_ok=True)
    try:
        with open(config_gen_path, "w", encoding="utf-8") as file:
            json.dump({"generation_id": file_id}, file, ensure_ascii=False, indent=4)
        logger.info(f"‚úÖ ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '{file_id}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ config_gen.json")
    except Exception as e:
        handle_error("Save Generation ID Error", str(e), e)


def save_to_b2(folder, content):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ B2 –±–µ–∑ –¥–≤–æ–π–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON."""
    try:
        file_id = generate_file_id()
        save_generation_id_to_config(file_id)
        logger.info(f"üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É B2: {folder} —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ {file_id}")
        s3 = get_b2_client()
        if not s3:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç B2")
            return False

        bucket_name = config.get("API_KEYS.b2.bucket_name", B2_BUCKET_NAME)
        s3_key = f"{folder.rstrip('/')}/{file_id}"

        if not isinstance(content, dict):
            logger.error("‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º!")
            return False

        sarcasm_data = content.get("sarcasm", {})
        if isinstance(sarcasm_data, str):
            try:
                sarcasm_data = json.loads(sarcasm_data)
                logger.warning("‚ö†Ô∏è –ü–æ–ª–µ 'sarcasm' –±—ã–ª–æ —Å—Ç—Ä–æ–∫–æ–π, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            except json.JSONDecodeError:
                logger.error("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª–µ 'sarcasm' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
                return False

        if "poll" in sarcasm_data and isinstance(sarcasm_data["poll"], str):
            try:
                sarcasm_data["poll"] = json.loads(sarcasm_data["poll"])
                logger.warning("‚ö†Ô∏è –ü–æ–ª–µ 'poll' –±—ã–ª–æ —Å—Ç—Ä–æ–∫–æ–π, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            except json.JSONDecodeError:
                logger.error("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª–µ 'poll' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
                sarcasm_data["poll"] = {}

        content["sarcasm"] = sarcasm_data
        json_bytes = io.BytesIO(json.dumps(content, ensure_ascii=False, indent=4).encode("utf-8"))
        s3.upload_fileobj(json_bytes, bucket_name, s3_key)
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ B2: {s3_key}")
        return True

    except Exception as e:
        handle_error("B2 Upload Error", str(e), e)
        return False

def generate_script_and_frame(topic):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è –≤–∏–¥–µ–æ."""
    try:
        USER_PROMPT_COMBINED = config.get("PROMPTS.user_prompt_combined")
        OPENAI_MODEL = config.get("OPENAI_SETTINGS.model", "gpt-4o")
        OPENAI_MAX_TOKENS = config.get("OPENAI_SETTINGS.max_tokens", 1000)
        OPENAI_TEMPERATURE = config.get("OPENAI_SETTINGS.temperature", 0.7)
        MIN_SCRIPT_LENGTH = config.get("VISUAL_ANALYSIS.min_script_length", 200)

        if not USER_PROMPT_COMBINED:
            logger.error("–ü—Ä–æ–º–ø—Ç USER_PROMPT_COMBINED –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json")
            return None, None

        for attempt in range(3):
            try:
                combined_prompt = (
                    USER_PROMPT_COMBINED.replace("{topic}", topic) +
                    "\n\n**Strict Format**:\n- Script (500 chars max).\n- 'First Frame Description:'\n- Description (500 chars max).\n- 'End of Description'."
                )
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è '{topic[:100]}'...")

                response = openai.ChatCompletion.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": combined_prompt}],
                    max_tokens=OPENAI_MAX_TOKENS,
                    temperature=OPENAI_TEMPERATURE + 0.1 * attempt
                )

                if not response or not response.get("choices") or not response["choices"][0].get("message"):
                    logger.warning("‚ö†Ô∏è OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    continue

                combined_response = response["choices"][0]["message"]["content"]
                if not combined_response:
                    logger.warning("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                    continue

                combined_response = combined_response.strip()
                logger.debug(f"OpenAI response: {combined_response}")

                with open(f"logs/openai_response_{topic[:50].replace(' ', '_')}_{attempt+1}.txt", "w", encoding="utf-8") as f:
                    f.write(combined_response)

                if len(combined_response) < MIN_SCRIPT_LENGTH:
                    logger.error(f"–û—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π: {len(combined_response)}")
                    continue

                if "First Frame Description:" not in combined_response or "End of Description" not in combined_response:
                    logger.error("–ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                    continue

                script_text = combined_response.split("First Frame Description:")[0].strip()
                first_frame_description = (
                    combined_response.split("First Frame Description:")[1].split("End of Description")[0].strip()
                )

                if not script_text or not first_frame_description:
                    logger.error("–°—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç—ã")
                    continue

                logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {script_text[:100]}...")
                logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {first_frame_description[:100]}...")
                return script_text, first_frame_description

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): {str(e)}")
                continue

        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫.")
        return None, None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        return None, None

class ContentGenerator:
    def __init__(self):
        self.topic_threshold = config.get('GENERATE.topic_threshold', 7)
        self.text_threshold = config.get('GENERATE.text_threshold', 8)
        self.max_attempts = config.get('GENERATE.max_attempts', 3)
        self.adaptation_enabled = config.get('GENERATE.adaptation_enabled', False)
        self.adaptation_params = config.get('GENERATE.adaptation_parameters', {})
        self.content_output_path = config.get('FILE_PATHS.content_output_path', 'generated_content.json')
        self.before_critique_path = config.get('FILE_PATHS.before_critique_path', 'before_critique.json')
        self.after_critique_path = config.get('FILE_PATHS.after_critique_path', 'after_critique.json')
        self.logger = logger
        self.config = config
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.openai_model = os.getenv("OPENAI_MODEL", "gpt-4")
        self.temperature = float(os.getenv("OPENAI_TEMPERATURE", 0.7))
        if not self.openai_api_key:
            logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞!")
            raise EnvironmentError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    def adapt_prompts(self):
        if not self.adaptation_enabled:
            logger.info("üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
        logger.info("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        for key, value in self.adaptation_params.items():
            logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä '{key}' –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {value}")

    def clear_generated_content(self):
        try:
            logger.info("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–æ–≤–æ–π —Ç–µ–º—ã.")
            if not self.content_output_path:
                raise ValueError("‚ùå –û—à–∏–±–∫–∞: content_output_path –ø—É—Å—Ç–æ–π!")
            folder = os.path.dirname(self.content_output_path)
            if folder and not os.path.exists(folder):
                os.makedirs(folder)
                logger.info(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {folder}")
            logger.info(f"üîé Debug: –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ {self.content_output_path}")
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump({}, file, ensure_ascii=False, indent=4)
            logger.info("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
        except PermissionError:
            handle_error("Clear Content Error", f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {self.content_output_path}", PermissionError())
        except Exception as e:
            handle_error("Clear Content Error", str(e), e)

    def generate_topic(self, tracker):
        valid_focuses = self.get_valid_focus_areas(tracker)
        if not valid_focuses:
            self.logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤")
            raise ValueError("–í—Å–µ —Ñ–æ–∫—É—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã")
        selected_focus = random.choice(valid_focuses)
        used_labels = tracker["focus_data"].get(selected_focus, [])
        prompt = self.config.get("CONTENT.topic.prompt_template").format(
            focus_areas=selected_focus, exclusions=", ".join(used_labels)
        )
        topic_response = self.request_openai(prompt)
        try:
            topic_data = json.loads(topic_response)
            full_topic = topic_data["full_topic"]
            short_topic = topic_data["short_topic"]
        except json.JSONDecodeError:
            self.logger.error("‚ùå OpenAI –≤–µ—Ä–Ω—É–ª –Ω–µ JSON")
            raise ValueError("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ OpenAI")
        self.update_tracker(selected_focus, short_topic)
        self.save_to_generated_content("topic", {"full_topic": full_topic, "short_topic": short_topic})
        return full_topic, {"theme": "tragic" if "(—Ç)" in selected_focus else "normal"}

    def update_tracker(self, focus, short_topic):
        with open(TRACKER_PATH, 'r', encoding='utf-8') as f:
            tracker = json.load(f)
        used_focuses = tracker["used_focuses"]
        focus_data = tracker["focus_data"]
        if focus in used_focuses:
            used_focuses.remove(focus)
        used_focuses.insert(0, focus)
        if len(used_focuses) > 15:
            used_focuses.pop()
        focus_data.setdefault(focus, []).insert(0, short_topic)
        if len(focus_data[focus]) > 5:
            focus_data[focus].pop()
        tracker["used_focuses"] = used_focuses
        tracker["focus_data"] = focus_data
        with open(TRACKER_PATH, 'w', encoding='utf-8') as f:
            json.dump(tracker, f, ensure_ascii=False, indent=4)
        self.sync_tracker_to_b2()

    def sync_tracker_to_b2(self):
        s3 = get_b2_client()
        if not s3:
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç B2 –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞")
            return
        try:
            s3.upload_file(TRACKER_PATH, B2_BUCKET_NAME, "data/topics_tracker.json")
            self.logger.info("‚úÖ topics_tracker.json —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å B2")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ B2: {e}")

    def request_openai(self, prompt):
        try:
            openai.api_key = self.openai_api_key
            max_tokens = self.config.get("API_KEYS.openai.max_tokens_text", 750)
            self.logger.info(f"üîé –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI —Å max_tokens={max_tokens}")
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=self.temperature,
            )
            return response['choices'][0]['message']['content'].strip()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI API: {e}")
            raise

    def generate_sarcasm(self, text, content_data={}):
        if not self.config.get('SARCASM.enabled', True) or not self.config.get('SARCASM.comment_enabled', True):
            self.logger.info("üîï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return ""
        self.logger.info(f"üîé Debug: –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {self.config.get('SARCASM.comment_prompt')}")
        if "theme" in content_data and content_data["theme"] == "tragic":
            prompt = self.config.get('SARCASM.tragic_comment_prompt').format(text=text)
            temperature = self.config.get('SARCASM.tragic_comment_temperature', 0.6)
        else:
            prompt = self.config.get('SARCASM.comment_prompt').format(text=text)
            temperature = self.config.get('SARCASM.comment_temperature', 0.8)
        max_tokens = self.config.get("SARCASM.max_tokens_comment", 150)
        self.logger.info(f"üîé Debug: –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π max_tokens_comment = {max_tokens}")
        try:
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=temperature
            )
            comment = response['choices'][0]['message']['content'].strip()
            self.logger.info(f"‚úÖ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {comment}")
            return comment
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return ""

    def generate_sarcasm_poll(self, text, content_data={}):
        if not self.config.get('SARCASM.enabled', True) or not self.config.get('SARCASM.poll_enabled', True):
            self.logger.info("üîï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return {}
        if "theme" in content_data and content_data["theme"] == "tragic":
            prompt = self.config.get('SARCASM.tragic_question_prompt').format(text=text)
            temperature = self.config.get('SARCASM.tragic_poll_temperature', 0.6)
        else:
            prompt = self.config.get('SARCASM.question_prompt').format(text=text)
            temperature = self.config.get('SARCASM.poll_temperature', 0.9)
        try:
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=self.config.get('SARCASM.max_tokens_poll', 250),
                temperature=temperature
            )
            poll_text = response['choices'][0]['message']['content'].strip()
            self.logger.info(f"üõë –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç OpenAI –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–æ—Ä–æ–º: {poll_text}")
            try:
                poll_data = json.loads(poll_text)
                if "question" in poll_data and "options" in poll_data:
                    return poll_data
            except json.JSONDecodeError:
                self.logger.warning("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç, –∞ –Ω–µ JSON. –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ä—É—á–Ω—É—é...")
            match = re.findall(r"\d\.-\s*(.+)", poll_text)
            if len(match) >= 4:
                question = match[0].strip()
                options = [opt.strip() for opt in match[1:4]]
                return {"question": question, "options": options}
            self.logger.error("‚ùå OpenAI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç.")
            return {}
        except Exception as e:
            handle_error("Sarcasm Poll Generation Error", str(e), e)
            return {}

    def save_to_generated_content(self, stage, data):
        try:
            if not self.content_output_path:
                raise ValueError("‚ùå –û—à–∏–±–∫–∞: self.content_output_path –ø—É—Å—Ç–æ–π!")
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª: {self.content_output_path}")
            folder = os.path.dirname(self.content_output_path) or "."
            if not os.path.exists(folder):
                os.makedirs(folder)
                logger.info(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {folder}")
            if os.path.exists(self.content_output_path):
                logger.info(f"üìÑ –§–∞–π–ª {self.content_output_path} –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
                with open(self.content_output_path, 'r', encoding='utf-8') as file:
                    try:
                        result_data = json.load(file)
                    except json.JSONDecodeError:
                        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.content_output_path} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
                        result_data = {}
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.content_output_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
                result_data = {}
            result_data["timestamp"] = datetime.utcnow().isoformat()
            result_data[stage] = data
            logger.info(f"üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ {self.content_output_path}...")
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump(result_data, file, ensure_ascii=False, indent=4)
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ: {stage}")
        except FileNotFoundError:
            handle_error("Save to Generated Content Error", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.content_output_path}", FileNotFoundError())
        except PermissionError:
            handle_error("Save to Generated Content Error", f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {self.content_output_path}", PermissionError())
        except Exception as e:
            handle_error("Save to Generated Content Error", str(e), e)

    def critique_content(self, content, topic):
        if not self.config.get('CONTENT.critique.enabled', True):
            self.logger.info("üîï –ö—Ä–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return "–ö—Ä–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
        try:
            self.logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI...")
            prompt_template = self.config.get('CONTENT.critique.prompt_template')
            prompt = prompt_template.format(content=content, topic=topic)
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=self.config.get('CONTENT.critique.max_tokens', 300),
                temperature=self.config.get('CONTENT.critique.temperature', 0.3)
            )
            critique = response['choices'][0]['message']['content'].strip()
            self.logger.info("‚úÖ –ö—Ä–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return critique
        except Exception as e:
            handle_error("Critique Error", str(e), e)
            return "–ö—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π."

    def analyze_topic_generation(self):
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
            feedback_path = self.config.get('FILE_PATHS.feedback_file', 'data/feedback.json')
            positive_feedback_topics = []
            if os.path.exists(feedback_path):
                with open(feedback_path, 'r', encoding='utf-8') as file:
                    feedback_data = json.load(file)
                    positive_feedback_topics = [
                        entry['topic'] for entry in feedback_data if
                        entry.get('rating', 0) >= self.config.get('METRICS.success_threshold', 8)
                    ]
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(positive_feedback_topics)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ–º –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
            else:
                self.logger.warning("‚ö†Ô∏è –§–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            archive_folder = self.config.get('FILE_PATHS.archive_folder', 'data/archive/')
            successful_topics = []
            if os.path.exists(archive_folder):
                for filename in os.listdir(archive_folder):
                    if filename.endswith('.json'):
                        with open(os.path.join(archive_folder, filename), 'r', encoding='utf-8') as file:
                            archive_data = json.load(file)
                            if archive_data.get('success', False):
                                successful_topics.append(archive_data.get('topic', ''))
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(successful_topics)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–∞.")
            else:
                self.logger.warning("‚ö†Ô∏è –ü–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            tracker = self.load_tracker()
            valid_focus_areas = self.get_valid_focus_areas(tracker)
            combined_topics = list(set(positive_feedback_topics + successful_topics + valid_focus_areas))
            self.logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º: {combined_topics}")
            return combined_topics
        except Exception as e:
            handle_error("Topic Analysis Error", str(e), e)
            return []

    def get_valid_focus_areas(self, tracker):
        all_focuses = tracker["all_focuses"]
        used_focuses = tracker["used_focuses"]
        valid_focuses = [f for f in all_focuses if f not in used_focuses]
        self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–∫—É—Å—ã: {valid_focuses}")
        return valid_focuses

    def prioritize_focus_from_feedback_and_archive(self, valid_focus_areas):
        try:
            feedback_path = self.config.get('FILE_PATHS.feedback_file', 'data/feedback.json')
            feedback_foci = []
            if os.path.exists(feedback_path):
                with open(feedback_path, 'r', encoding='utf-8') as file:
                    feedback_data = json.load(file)
                    feedback_foci = [
                        entry['topic'] for entry in feedback_data if
                        entry.get('rating', 0) >= self.config.get('METRICS.success_threshold', 8)
                    ]
            archive_folder = self.config.get('FILE_PATHS.archive_folder', 'data/archive/')
            archive_foci = []
            if os.path.exists(archive_folder):
                for filename in os.listdir(archive_folder):
                    if filename.endswith('.json'):
                        with open(os.path.join(archive_folder, filename), 'r', encoding='utf-8') as file:
                            archive_data = json.load(file)
                            if archive_data.get('success', False):
                                archive_foci.append(archive_data.get('topic', ''))
            for focus in feedback_foci + archive_foci:
                if focus in valid_focus_areas:
                    self.logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ñ–æ–∫—É—Å: {focus}")
                    return focus
            if valid_focus_areas:
                self.logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ–∫—É—Å: {valid_focus_areas[0]}")
                return valid_focus_areas[0]
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return None
        except Exception as e:
            handle_error("Focus Prioritization Error", str(e), e)
            return None

    def load_tracker(self):
        os.makedirs(os.path.dirname(TRACKER_PATH), exist_ok=True)
        s3 = get_b2_client()
        tracker_updated = False
        if not s3:
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç B2 –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞")
        else:
            try:
                s3.download_file(B2_BUCKET_NAME, "data/topics_tracker.json", TRACKER_PATH)
                self.logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω topics_tracker.json –∏–∑ B2")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ B2: {e}")
                if not os.path.exists(TRACKER_PATH):
                    self.logger.info("–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π topics_tracker.json –∏–∑ FailSafeVault")
                    with open(FAILSAFE_PATH, 'r', encoding='utf-8') as f:
                        failsafe = json.load(f)
                    tracker = {
                        "all_focuses": failsafe["focuses"],
                        "used_focuses": [],
                        "focus_data": {}
                    }
                    with open(TRACKER_PATH, 'w', encoding='utf-8') as f:
                        json.dump(tracker, f, ensure_ascii=False, indent=4)
                    tracker_updated = True
        with open(TRACKER_PATH, 'r', encoding='utf-8') as f:
            tracker = json.load(f)
        if "all_focuses" not in tracker:
            self.logger.info("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç—Ä–µ–∫–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º all_focuses")
            with open(FAILSAFE_PATH, 'r', encoding='utf-8') as f:
                failsafe = json.load(f)
            tracker["all_focuses"] = failsafe["focuses"]
            tracker.setdefault("used_focuses", [])
            tracker.setdefault("focus_data", {})
            with open(TRACKER_PATH, 'w', encoding='utf-8') as f:
                json.dump(tracker, f, ensure_ascii=False, indent=4)
            tracker_updated = True
        if tracker_updated and s3:
            self.sync_tracker_to_b2()
        return tracker

    def run(self):

        # --- –ù–∞—á–∞–ª–æ –®–∞–≥–∞ 1.1.3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ generation_id ---

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ logger —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å
        # logger = get_logger("generate_content") # –ü—Ä–∏–º–µ—Ä

        # –ò–º–ø–æ—Ä—Ç—ã os, json, argparse, datetime –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
        # –§—É–Ω–∫—Ü–∏—è generate_file_id() –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ
        # –§—É–Ω–∫—Ü–∏—è ensure_directory_exists (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞/–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
        # from modules.utils import ensure_directory_exists # –ü—Ä–∏–º–µ—Ä

        parser = argparse.ArgumentParser(description='Generate content for a specific ID.')
        parser.add_argument('--generation_id', type=str, help='The generation ID for the content file.')
        args = parser.parse_args()
        generation_id_arg = args.generation_id
        logger.info(f"–ê—Ä–≥—É–º–µ–Ω—Ç --generation_id: {generation_id_arg}")

        generation_id = None
        config_gen_path = os.path.join("config", "config_gen.json")

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            ensure_directory_exists(os.path.dirname(config_gen_path))
        except NameError:
            logger.warning("–§—É–Ω–∫—Ü–∏—è ensure_directory_exists –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.")
            os.makedirs(os.path.dirname(config_gen_path), exist_ok=True)
        except Exception as dir_err:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è {config_gen_path}: {dir_err}")
            # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            # import sys
            # sys.exit(1)

        if generation_id_arg:
            generation_id = generation_id_arg
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º generation_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {generation_id}")
        else:
            logger.info(f"generation_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º {config_gen_path}...")
            try:
                if os.path.exists(config_gen_path):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª, –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º JSON
                    if os.path.getsize(config_gen_path) > 0:
                        with open(config_gen_path, 'r', encoding='utf-8') as f:
                            config_gen_data = json.load(f)
                            generation_id = config_gen_data.get("generation_id")
                            if generation_id:
                                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º generation_id –∏–∑ {config_gen_path}: {generation_id}")
                            else:
                                logger.info(f"–ö–ª—é—á 'generation_id' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {config_gen_path}.")
                    else:
                        logger.info(f"{config_gen_path} –ø—É—Å—Ç–æ–π.")
                else:
                    logger.info(f"{config_gen_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            except (json.JSONDecodeError, FileNotFoundError, Exception) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {config_gen_path}: {e}. –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ID.")
                generation_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è

            if not generation_id:
                generation_id = generate_file_id()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –®–∞–≥–∞ 1.1.2
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π generation_id: {generation_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π generation_id –≤ config_gen.json
        try:
            with open(config_gen_path, 'w', encoding='utf-8') as f:
                json.dump({"generation_id": generation_id}, f, ensure_ascii=False, indent=4)
            logger.info(f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π generation_id '{generation_id}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {config_gen_path}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å generation_id –≤ {config_gen_path}: {e}")
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            # import sys
            # sys.exit(1)

        logger.info(f"--- ID –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {generation_id} ---")

        # --- –ö–æ–Ω–µ—Ü –®–∞–≥–∞ 1.1.3 ---

        # --- –î–∞–ª–µ–µ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –í–ê–® –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î –∏–∑ –±–ª–æ–∫–∞ if __name__ == "__main__": ---
        # --- –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ generator = ContentGenerator() –∏ –≤—ã–∑–æ–≤ –µ–≥–æ –º–µ—Ç–æ–¥–æ–≤ ---
        # --- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'generation_id' ---

        # try:
        #     # –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥...
        # except Exception as main_err:
        #     # –í–∞—à–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫...

        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        lock_file = "config/processing.lock"

        if os.path.exists(lock_file):
            logger.info("üîí –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
            return

        try:
            os.makedirs(os.path.dirname(lock_file), exist_ok=True)
            with open(lock_file, "w") as f:
                f.write("")

            download_config_public()
            if not os.path.exists(CONFIG_PUBLIC_LOCAL_PATH):
                logger.error(f"‚ùå –§–∞–π–ª {CONFIG_PUBLIC_LOCAL_PATH} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ B2, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π config_public")
                config_public = {"empty": ["666/"]}
                os.makedirs(os.path.dirname(CONFIG_PUBLIC_LOCAL_PATH), exist_ok=True)
                with open(CONFIG_PUBLIC_LOCAL_PATH, "w", encoding="utf-8") as file:
                    json.dump(config_public, file, ensure_ascii=False, indent=4)
            else:
                with open(CONFIG_PUBLIC_LOCAL_PATH, "r", encoding="utf-8") as file:
                    config_public = json.load(file)

            empty_folders = config_public.get("empty", [])
            if len(empty_folders) > 1:
                config_public["empty"] = [empty_folders[0]]
                with open(CONFIG_PUBLIC_LOCAL_PATH, "w", encoding="utf-8") as file:
                    json.dump(config_public, file, ensure_ascii=False, indent=4)
                logger.info("–õ–∏–º–∏—Ç: –æ–¥–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –≤–∑—è—Ç–∞ –ø–∞–ø–∫–∞ %s", empty_folders[0])

            if not self.config.get('CONTENT.topic.enabled', True):
                logger.error("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã –æ—Ç–∫–ª—é—á–µ–Ω–∞, –¥–∞–ª—å–Ω–µ–π—à–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
                return

            if not empty_folders:
                logger.info("‚úÖ –ù–µ—Ç –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")
                return

            self.adapt_prompts()
            self.clear_generated_content()
            tracker = self.load_tracker()
            topic, content_data = self.generate_topic(tracker)
            if not topic:
                logger.error("‚ùå –¢–µ–º–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
                return

            if self.config.get('CONTENT.text.enabled', True) or self.config.get('CONTENT.tragic_text.enabled', True):
                if "theme" in content_data and content_data["theme"] == "tragic" and self.config.get(
                        'CONTENT.tragic_text.enabled', True):
                    text_initial = self.request_openai(
                        self.config.get('CONTENT.tragic_text.prompt_template').format(topic=topic))
                else:
                    text_initial = self.request_openai(
                        self.config.get('CONTENT.text.prompt_template').format(topic=topic))
                critique = self.critique_content(text_initial, topic)
                self.save_to_generated_content("critique", {"critique": critique})
            else:
                text_initial = ""
                logger.info("üîï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

            sarcastic_comment = None
            sarcastic_poll = None
            if text_initial:
                sarcastic_comment = self.generate_sarcasm(text_initial, content_data)
                sarcastic_poll = self.generate_sarcasm_poll(text_initial, content_data)
                self.save_to_generated_content("sarcasm", {"comment": sarcastic_comment, "poll": sarcastic_poll})

            # --- –ù–∞—á–∞–ª–æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –®–∞–≥–∞ 1.2 (JSON Mode + Restriction) ---
            script_text = None
            first_frame_description = None
            try:
                logger.info("–ó–∞–ø—Ä–æ—Å –∫ OpenAI (JSON Mode) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–¥—Ä–∞...")
                # --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º—ã (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'topic' –¥–æ—Å—Ç—É–ø–Ω–∞) ---
                if not topic:
                    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'topic' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å—Ü–µ–Ω–∞—Ä–∏—è.")

                # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ---
                restrictions_list = self.config.get("restrictions", [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                if not restrictions_list:
                    logger.warning("–°–ø–∏—Å–æ–∫ 'restrictions' –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                    chosen_restriction = "No specific restrictions."  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                else:
                    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'random' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (import random)
                    chosen_restriction = random.choice(restrictions_list)
                logger.info(f"–í—ã–±—Ä–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {chosen_restriction}")

                # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ ---
                prompt_combined_config_key = 'PROMPTS.user_prompt_combined'
                prompt_template = self.config.get(prompt_combined_config_key)
                if not prompt_template:
                    raise ValueError(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {prompt_combined_config_key}")
                # –¢–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –î–í–£–ú–Ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                prompt_combined = prompt_template.format(topic=topic, restriction=chosen_restriction)

                # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
                openai_model = self.config.get("OPENAI_SETTINGS.model", "gpt-4o")
                openai_max_tokens = self.config.get("OPENAI_SETTINGS.max_tokens_script", 1000)
                openai_temperature = self.config.get("OPENAI_SETTINGS.temperature_script", 0.7)
                logger.info(
                    f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è OpenAI (script/frame): model={openai_model}, max_tokens={openai_max_tokens}, temp={openai_temperature}, response_format=json_object")

                # --- –í—ã–∑–æ–≤ OpenAI API —Å JSON Mode (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
                response = openai.ChatCompletion.create(
                    model=openai_model,
                    messages=[{"role": "user", "content": prompt_combined}],
                    max_tokens=openai_max_tokens,
                    temperature=openai_temperature,
                    response_format={"type": "json_object"}
                )
                response_content = response["choices"][0]["message"]["content"]
                logger.debug(f"Raw OpenAI JSON response for script/frame: {response_content[:500]}")

                # --- –ü–∞—Ä—Å–∏–Ω–≥ JSON (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
                try:
                    script_data = json.loads(response_content)
                except json.JSONDecodeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ OpenAI (–¥–∞–∂–µ –≤ JSON Mode!): {e}")
                    raise ValueError("API OpenAI –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ JSON Mode.") from e

                # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
                if script_data:
                    script_text = script_data.get("script")
                    first_frame_description = script_data.get("first_frame_description")
                    if not script_text or not first_frame_description:
                        logger.error(
                            f"–ö–ª—é—á–∏ 'script' –∏–ª–∏ 'first_frame_description' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç/–ø—É—Å—Ç—ã –≤ JSON. –ü–æ–ª—É—á–µ–Ω–æ: {script_data}")
                        raise ValueError("–ö–ª—é—á–∏ 'script' –∏–ª–∏ 'first_frame_description' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã –≤ JSON.")
                    else:
                        logger.info("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–¥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã (JSON Mode).")
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ script_data –ø–æ—Å–ª–µ json.loads().")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            except (json.JSONDecodeError, ValueError) as parse_err:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON —Å—Ü–µ–Ω–∞—Ä–∏—è/–æ–ø–∏—Å–∞–Ω–∏—è: {parse_err}.")
                raise Exception(
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π/–æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç OpenAI.") from parse_err
            except openai.error.OpenAIError as api_err:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è/–æ–ø–∏—Å–∞–Ω–∏—è: {api_err}")
                raise Exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—à–∏–±–∫–∞ API OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.") from api_err
            except Exception as general_err:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è/–æ–ø–∏—Å–∞–Ω–∏—è: {general_err}")
                raise Exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.") from general_err

            # --- –ö–æ–Ω–µ—Ü –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –®–∞–≥–∞ 1.2 ---
            # --- –ù–∞—á–∞–ª–æ –®–∞–≥–∞ 1.3.3: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è ---
            logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è complete_content_dict...")

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É:
            # topic, final_text, sarcastic_comment, sarcastic_poll, script_text, first_frame_description
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è final_text –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∏–∂–µ, –ø–µ—Ä–µ–Ω–µ—Å–µ–º –µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—é–¥–∞:
            final_text = text_initial.strip() if text_initial else ""

            complete_content_dict = {
                "topic": topic if 'topic' in locals() else "–¢–µ–º–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞",
                "content": final_text,
                "sarcasm": {
                    "comment": sarcastic_comment if 'sarcastic_comment' in locals() else None,
                    "poll": sarcastic_poll if 'sarcastic_poll' in locals() and isinstance(sarcastic_poll, dict) else {}
                },
                "script": script_text if 'script_text' in locals() else None,
                "first_frame_description": first_frame_description if 'first_frame_description' in locals() else None
            }
            logger.debug(
                f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω complete_content_dict: {json.dumps(complete_content_dict, ensure_ascii=False, indent=2)}")
            # --- –ö–æ–Ω–µ—Ü –®–∞–≥–∞ 1.3.3 ---
            # --- –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ final_text ---
            # –°—Ç—Ä–æ–∫—É 'final_text = text_initial.strip()' –Ω–∏–∂–µ –ø–æ –∫–æ–¥—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
            #final_text = text_initial.strip()

            # --- –ù–∞—á–∞–ª–æ –®–∞–≥–∞ 1.3.5: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ save_to_b2 ---
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {generation_id}.json –≤ –ø–∞–ø–∫—É 666/...")
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è save_to_b2 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞/–¥–æ—Å—Ç—É–ø–Ω–∞
            # –∏ —á—Ç–æ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'generation_id' –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞–ø–∫—É "666/" –∏ –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.
            try:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ save_to_b2 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False –∏–ª–∏ –∫–∏–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                # –ï—Å–ª–∏ –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è save_to_b2 —Ç—Ä–µ–±—É–µ—Ç ID —è–≤–Ω–æ, –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ:
                # success = save_to_b2("666/", complete_content_dict, generation_id)
                success = save_to_b2("666/", complete_content_dict)  # –ï—Å–ª–∏ ID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—è–≤–Ω–æ

                if not success:
                    # –ï—Å–ª–∏ save_to_b2 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    logger.error(f"‚ùå –§—É–Ω–∫—Ü–∏—è save_to_b2 –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ 666/{generation_id}.json")
                    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ B2: 666/{generation_id}.json")
                else:
                    logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ B2: 666/{generation_id}.json")

            except Exception as save_err:
                # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å save_to_b2
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ save_to_b2: {save_err}")
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ B2: {save_err}") from save_err

                # –î–∞–ª–µ–µ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –®–∞–≥ 1.4 - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ generation:true
                # --- –ö–æ–Ω–µ—Ü –®–∞–≥–∞ 1.3.5 ---
                
            try:
                run_generate_media(generation_id)
                logger.info("‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except subprocess.CalledProcessError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ generate_media.py: {str(e)}")
                logger.warning("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–µ–¥–∏–∞")

            logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        finally:
            if os.path.exists(lock_file):
                os.remove(lock_file)
                logger.info("üîì –õ–æ–∫-—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.")

if __name__ == "__main__":
    generator = ContentGenerator()
    generator.run()