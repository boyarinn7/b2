# -*- coding: utf-8 -*-
# –í —Ñ–∞–π–ª–µ scripts/generate_content.py

import json
import os
import sys
import requests
import openai
import re
import subprocess
import boto3
import io
import random
import argparse
from datetime import datetime # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º datetime
import shutil # <--- –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ClientError –∏–∑ botocore (—á–∞—Å—Ç—å boto3)
try:
    from botocore.exceptions import ClientError
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ boto3/botocore –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é,
    # —Ö–æ—Ç—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç boto3 –≤—ã—à–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã —É–ø–∞—Å—Ç—å —Ä–∞–Ω—å—à–µ.
    ClientError = Exception # –õ–æ–≤–∏–º –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ ClientError –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    print("Warning: Could not import ClientError from botocore. B2 error handling might be less specific.")


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if BASE_DIR not in sys.path:
    sys.path.append(BASE_DIR)

# --- –ò–º–ø–æ—Ä—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π ---
try:
    from modules.config_manager import ConfigManager
    from modules.logger import get_logger
    from modules.error_handler import handle_error
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ utils.py
    from modules.utils import ensure_directory_exists, load_b2_json, save_b2_json, get_b2_client
except ModuleNotFoundError as e:
     print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ generate_content: {e}", file=sys.stderr)
     sys.exit(1)
except ImportError as e:
     print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è/–∫–ª–∞—Å—Å –≤ –º–æ–¥—É–ª—è—Ö: {e}", file=sys.stderr)
     sys.exit(1)


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∏ –∫–æ–Ω—Ñ–∏–≥–∞ ---
logger = get_logger("generate_content")
config = ConfigManager()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ ConfigManager —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
B2_BUCKET_NAME = config.get("API_KEYS.b2.bucket_name", "boyarinnbotbucket") # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è –±–∞–∫–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
FAILSAFE_PATH_REL = config.get("FILE_PATHS.failsafe_path", "config/FailSafeVault.json")
TRACKER_PATH_REL = config.get("FILE_PATHS.tracker_path", "data/topics_tracker.json")
# –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
FAILSAFE_PATH_ABS = os.path.join(BASE_DIR, FAILSAFE_PATH_REL)
TRACKER_PATH_ABS = os.path.join(BASE_DIR, TRACKER_PATH_REL)
# –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
CONTENT_OUTPUT_PATH = config.get('FILE_PATHS.content_output_path', 'generated_content.json')

# --- –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê –í B2 (–í–ù–£–¢–†–ò –≠–¢–û–ì–û –§–ê–ô–õ–ê) ---
# –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π generation_id –∏ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π
def save_content_to_b2(folder, content_dict, generation_id):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å content_dict –∫–∞–∫ JSON –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É B2,
    –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π generation_id –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π ID –∏ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç config_gen.json.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    logger.info(f"–í—ã–∑–æ–≤ save_content_to_b2 –¥–ª—è ID: {generation_id}")

    # –ü–æ–ª—É—á–∞–µ–º B2 –∫–ª–∏–µ–Ω—Ç (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–¥–µ—Å—å)
    s3 = get_b2_client()
    if not s3:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç B2 –≤–Ω—É—Ç—Ä–∏ save_content_to_b2")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–∞–∫–µ—Ç–∞
    bucket_name = config.get("API_KEYS.b2.bucket_name", B2_BUCKET_NAME)
    if not bucket_name:
         logger.error("‚ùå –ò–º—è –±–∞–∫–µ—Ç–∞ B2 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ save_content_to_b2")
         return False

    if not generation_id:
        logger.error("‚ùå Generation ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è save_content_to_b2.")
        return False
    if not isinstance(content_dict, dict):
         logger.error("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ save_content_to_b2 –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º.")
         return False

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID, –æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ .json
    clean_base_id = generation_id.replace(".json", "")
    file_extension = ".json" # –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    s3_key = f"{folder.rstrip('/')}/{clean_base_id}{file_extension}"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    timestamp_suffix = datetime.utcnow().strftime("%Y%m%d%H%M%S%f")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É temp)
    local_temp_path = f"{clean_base_id}_content_temp_{timestamp_suffix}.json"

    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID {clean_base_id} –≤ B2 –∫–∞–∫ {s3_key} —á–µ—Ä–µ–∑ {local_temp_path}...")

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ (–∑–¥–µ—Å—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞)
        # ensure_directory_exists(local_temp_path) # –ù–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
        required_keys = ["topic", "content", "sarcasm", "script", "first_frame_description"]
        missing_keys = [key for key in required_keys if key not in content_dict]
        if missing_keys:
             logger.warning(f"‚ö†Ô∏è –í —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID {clean_base_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {missing_keys}. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {list(content_dict.keys())}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª
        with open(local_temp_path, 'w', encoding='utf-8') as f:
            json.dump(content_dict, f, ensure_ascii=False, indent=4)
        logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_temp_path} —Å–æ–∑–¥–∞–Ω.")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ B2
        s3.upload_file(local_temp_path, bucket_name, s3_key)
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è ID {clean_base_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ B2: {s3_key}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ID {clean_base_id} –≤ B2 –∫–∞–∫ {s3_key}: {e}", exc_info=True)
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        if os.path.exists(local_temp_path):
            try:
                os.remove(local_temp_path)
                logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_temp_path} —É–¥–∞–ª–µ–Ω.")
            except OSError as remove_err:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_temp_path}: {remove_err}")
# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò save_content_to_b2 ---


# --- –ö–õ–ê–°–° –ì–ï–ù–ï–†–ê–¢–û–†–ê –ö–û–ù–¢–ï–ù–¢–ê ---
class ContentGenerator:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        self.logger = logger
        self.config = config
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.topic_threshold = self.config.get('GENERATE.topic_threshold', 7)
        self.text_threshold = self.config.get('GENERATE.text_threshold', 8)
        self.max_attempts = self.config.get('GENERATE.max_attempts', 1) # –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è?
        self.adaptation_enabled = self.config.get('GENERATE.adaptation_enabled', False)
        self.adaptation_params = self.config.get('GENERATE.adaptation_parameters', {})
        # –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.content_output_path = CONTENT_OUTPUT_PATH
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.openai_model = self.config.get("OPENAI_SETTINGS.model", "gpt-4o")
        self.temperature = float(self.config.get("OPENAI_SETTINGS.temperature", 0.7))
        if not self.openai_api_key:
            self.logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞!")
            raise EnvironmentError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        openai.api_key = self.openai_api_key # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è B2 –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
        self.b2_client = get_b2_client()
        if not self.b2_client:
             self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å B2 –∫–ª–∏–µ–Ω—Ç –≤ ContentGenerator.")

    def adapt_prompts(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)."""
        if not self.adaptation_enabled:
            self.logger.info("üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
        self.logger.info("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        # –õ–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å
        # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for key, value in self.adaptation_params.items():
            self.logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä '{key}' –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {value}")

    def clear_generated_content(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
        try:
            self.logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {self.content_output_path}")
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            ensure_directory_exists(self.content_output_path)
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –∑–∞–ø–∏—Å—å, —á—Ç–æ –æ—á–∏—Å—Ç–∏—Ç –µ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump({}, file, ensure_ascii=False, indent=4)
            self.logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω/—Å–æ–∑–¥–∞–Ω.")
        except PermissionError:
            handle_error("Clear Content Error", f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {self.content_output_path}", PermissionError())
        except Exception as e:
            handle_error("Clear Content Error", str(e), e)

    def load_tracker(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–µ—Ä —Ç–µ–º –∏–∑ B2 –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        os.makedirs(os.path.dirname(TRACKER_PATH_ABS), exist_ok=True) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        tracker_updated_locally = False
        if self.b2_client:
            try:
                self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {TRACKER_PATH_REL} –∏–∑ B2...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                timestamp_suffix = datetime.utcnow().strftime("%Y%m%d%H%M%S%f")
                local_temp_tracker = f"tracker_temp_{timestamp_suffix}.json"
                self.b2_client.download_file(B2_BUCKET_NAME, TRACKER_PATH_REL, local_temp_tracker)
                # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º shutil, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
                shutil.copyfile(local_temp_tracker, TRACKER_PATH_ABS)
                os.remove(local_temp_tracker) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {TRACKER_PATH_REL} –∏–∑ B2 –≤ {TRACKER_PATH_ABS}")
            except ClientError as e: # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ClientError
                 error_code = e.response.get('Error', {}).get('Code')
                 if error_code == 'NoSuchKey' or '404' in str(e):
                      self.logger.warning(f"‚ö†Ô∏è {TRACKER_PATH_REL} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ B2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é.")
                 else:
                      self.logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ B2 –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–µ—Ä–∞: {e}")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä –∏–∑ B2: {e}")
        else:
             self.logger.warning("‚ö†Ô∏è B2 –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä.")

        # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ B2
        if not os.path.exists(TRACKER_PATH_ABS):
            self.logger.warning(f"{TRACKER_PATH_ABS} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ {FAILSAFE_PATH_ABS}.")
            try:
                with open(FAILSAFE_PATH_ABS, 'r', encoding='utf-8') as f_failsafe:
                    failsafe_data = json.load(f_failsafe)
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–µ–∫–µ—Ä–∞
                tracker = {
                    "all_focuses": failsafe_data.get("focuses", []),
                    "used_focuses": [],
                    "focus_data": {}
                }
                with open(TRACKER_PATH_ABS, 'w', encoding='utf-8') as f_tracker:
                    json.dump(tracker, f_tracker, ensure_ascii=False, indent=4)
                self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π {TRACKER_PATH_ABS} –∏–∑ FailSafeVault.")
                tracker_updated_locally = True # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ª–æ–∫–∞–ª—å–Ω–æ
            except FileNotFoundError:
                 self.logger.error(f"‚ùå –§–∞–π–ª {FAILSAFE_PATH_ABS} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä.")
                 return {"all_focuses": [], "used_focuses": [], "focus_data": {}} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            except Exception as e:
                 self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞ –∏–∑ FailSafe: {e}")
                 return {"all_focuses": [], "used_focuses": [], "focus_data": {}}

        # –ß–∏—Ç–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            with open(TRACKER_PATH_ABS, 'r', encoding='utf-8') as f:
                tracker = json.load(f)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏)
            if "all_focuses" not in tracker:
                self.logger.info("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ä–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞: –¥–æ–±–∞–≤–ª—è–µ–º all_focuses.")
                if os.path.exists(FAILSAFE_PATH_ABS):
                     with open(FAILSAFE_PATH_ABS, 'r', encoding='utf-8') as f_failsafe:
                         failsafe_data = json.load(f_failsafe)
                     tracker["all_focuses"] = failsafe_data.get("focuses", [])
                else:
                     tracker["all_focuses"] = [] # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ FailSafe –Ω–µ—Ç
                tracker.setdefault("used_focuses", [])
                tracker.setdefault("focus_data", {})
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                with open(TRACKER_PATH_ABS, 'w', encoding='utf-8') as f_tracker:
                    json.dump(tracker, f_tracker, ensure_ascii=False, indent=4)
                tracker_updated_locally = True
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å B2, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω
            if tracker_updated_locally:
                self.sync_tracker_to_b2(tracker_path_abs=TRACKER_PATH_ABS, tracker_path_rel=TRACKER_PATH_REL)

            return tracker
        except json.JSONDecodeError:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON –≤ —Ñ–∞–π–ª–µ —Ç—Ä–µ–∫–µ—Ä–∞: {TRACKER_PATH_ABS}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π.")
            return {"all_focuses": [], "used_focuses": [], "focus_data": {}}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ {TRACKER_PATH_ABS}: {e}")
            return {"all_focuses": [], "used_focuses": [], "focus_data": {}}

    def get_valid_focus_areas(self, tracker):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤."""
        all_focuses = tracker.get("all_focuses", [])
        used_focuses = tracker.get("used_focuses", [])
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        used_set = set(used_focuses)
        valid_focuses = [f for f in all_focuses if f not in used_set]
        self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–∫—É—Å—ã: {valid_focuses}")
        return valid_focuses

    def generate_topic(self, tracker):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–∫—É—Å—ã."""
        valid_focuses = self.get_valid_focus_areas(tracker)
        if not valid_focuses:
            self.logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã.")
            # –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å None
            raise ValueError("–í—Å–µ —Ñ–æ–∫—É—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É.")
            # return None, {} # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

        selected_focus = random.choice(valid_focuses)
        self.logger.info(f"–í—ã–±—Ä–∞–Ω —Ñ–æ–∫—É—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã: {selected_focus}")
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —è—Ä–ª—ã–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–æ–∫—É—Å–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤
        used_labels_for_focus = tracker.get("focus_data", {}).get(selected_focus, [])
        exclusions_str = ", ".join(used_labels_for_focus) if used_labels_for_focus else "–Ω–µ—Ç"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt_template = self.config.get("CONTENT.topic.prompt_template")
        if not prompt_template:
             self.logger.error("–ü—Ä–æ–º–ø—Ç CONTENT.topic.prompt_template –Ω–µ –Ω–∞–π–¥–µ–Ω!")
             raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã.")
        prompt = prompt_template.format(focus_areas=selected_focus, exclusions=exclusions_str)

        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º JSON –æ—Ç–≤–µ—Ç
            topic_response_str = self.request_openai(prompt, use_json_mode=True)
            topic_data = json.loads(topic_response_str)

            full_topic = topic_data.get("full_topic")
            short_topic = topic_data.get("short_topic")

            if not full_topic or not short_topic:
                self.logger.error(f"‚ùå OpenAI –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–º—ã: {topic_data}")
                raise ValueError("–û—Ç–≤–µ—Ç OpenAI –¥–ª—è —Ç–µ–º—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç full_topic –∏–ª–∏ short_topic.")

            self.logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç–µ–º–∞: '{full_topic}' (–Ø—Ä–ª—ã–∫: '{short_topic}')")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä —Å –Ω–æ–≤—ã–º —è—Ä–ª—ã–∫–æ–º
            self.update_tracker(selected_focus, short_topic, tracker) # –ü–µ—Ä–µ–¥–∞–µ–º tracker –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            self.save_to_generated_content("topic", {"full_topic": full_topic, "short_topic": short_topic})

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É (tragic/normal) –ø–æ —Ñ–æ–∫—É—Å—É
            content_metadata = {"theme": "tragic" if "(—Ç)" in selected_focus else "normal"}
            return full_topic, content_metadata

        except json.JSONDecodeError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ OpenAI –¥–ª—è —Ç–µ–º—ã: {e}. –û—Ç–≤–µ—Ç: {topic_response_str[:500]}")
            raise ValueError("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã.") from e
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã: {e}", exc_info=True)
            raise # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ

    def update_tracker(self, focus, short_topic, tracker):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–∞ –≤ –ø–∞–º—è—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ."""
        used_focuses = tracker.get("used_focuses", [])
        focus_data = tracker.get("focus_data", {})

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15)
        if focus in used_focuses:
            used_focuses.remove(focus)
        used_focuses.insert(0, focus)
        if len(used_focuses) > 15:
            used_focuses.pop()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —è—Ä–ª—ã–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        focus_labels = focus_data.setdefault(focus, [])
        if short_topic in focus_labels:
             focus_labels.remove(short_topic) # –£–±–∏—Ä–∞–µ–º, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ
        focus_labels.insert(0, short_topic)
        if len(focus_labels) > 5:
            focus_labels.pop()

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å tracker (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–æ —Å—Å—ã–ª–∫–µ)
        tracker["used_focuses"] = used_focuses
        tracker["focus_data"] = focus_data

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ B2
        self.save_topics_tracker(tracker) # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
        self.sync_tracker_to_b2(tracker_path_abs=TRACKER_PATH_ABS, tracker_path_rel=TRACKER_PATH_REL) # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å B2

    def save_topics_tracker(self, tracker):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–µ–∫–µ—Ä –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª."""
        try:
            ensure_directory_exists(TRACKER_PATH_ABS) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –µ—Å—Ç—å
            with open(TRACKER_PATH_ABS, "w", encoding="utf-8") as file:
                json.dump(tracker, file, ensure_ascii=False, indent=4)
            self.logger.info(f"–¢—Ä–µ–∫–µ—Ä —Ç–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {TRACKER_PATH_ABS}")
        except Exception as e:
             self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ: {e}")

    def sync_tracker_to_b2(self, tracker_path_abs, tracker_path_rel):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä —Å B2."""
        if not self.b2_client:
            self.logger.warning("‚ö†Ô∏è B2 –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return
        if not os.path.exists(tracker_path_abs):
             self.logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Ç—Ä–µ–∫–µ—Ä–∞ {tracker_path_abs} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")
             return
        try:
            self.logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {tracker_path_abs} —Å B2 –∫–∞–∫ {tracker_path_rel}...")
            self.b2_client.upload_file(tracker_path_abs, B2_BUCKET_NAME, tracker_path_rel)
            self.logger.info(f"‚úÖ {tracker_path_rel} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å B2.")
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä {tracker_path_rel} –≤ B2: {e}")

    def request_openai(self, prompt, use_json_mode=False, temperature_override=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—è JSON –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            max_tokens = 750 # –î–µ—Ñ–æ–ª—Ç –¥–ª—è —Ç–µ–º—ã/—Ç–µ–∫—Å—Ç–∞
            temp = temperature_override if temperature_override is not None else self.temperature # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º –≤ –ø—Ä–æ–º–ø—Ç–µ)
            prompt_lower = prompt.lower()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            if use_json_mode: # –ï—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω JSON (–¥–ª—è —Ç–µ–º—ã, –æ–ø—Ä–æ—Å–∞, —Å–∫—Ä–∏–ø—Ç–∞)
                 if "script" in prompt_lower or "frame_description" in prompt_lower:
                      max_tokens = self.config.get("OPENAI_SETTINGS.max_tokens_script", 1000)
                      if temperature_override is None: temp = self.config.get("OPENAI_SETTINGS.temperature_script", 0.7)
                 elif "poll" in prompt_lower or "–æ–ø—Ä–æ—Å" in prompt_lower:
                      max_tokens = self.config.get("SARCASM.max_tokens_poll", 250)
                      # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ temperature_override
                 else: # –í–µ—Ä–æ—è—Ç–Ω–æ, —Ç–µ–º–∞
                      max_tokens = self.config.get("OPENAI_SETTINGS.max_tokens_text", 750) # –ò—Å–ø–æ–ª—å–∑—É–µ–º max_tokens –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–º—ã
                      # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ temperature_override –∏–ª–∏ self.temperature
            elif "comment" in prompt_lower or "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" in prompt_lower: # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –Ω–µ JSON
                 max_tokens = self.config.get("SARCASM.max_tokens_comment", 150)
                 # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ temperature_override
            else: # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                 max_tokens = self.config.get("OPENAI_SETTINGS.max_tokens_text", 750)
                 # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ temperature_override –∏–ª–∏ self.temperature

            self.logger.info(f"üîé –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI (JSON={use_json_mode}): max_tokens={max_tokens}, temp={temp:.1f}")

            request_args = {
                "model": self.openai_model,
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": max_tokens,
                "temperature": temp,
            }
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç JSON, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if use_json_mode:
                request_args["response_format"] = {"type": "json_object"}

            response = openai.ChatCompletion.create(**request_args)
            return response['choices'][0]['message']['content'].strip()

        except openai.error.OpenAIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI API: {e}")
            raise # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ
        except Exception as e:
             logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ request_openai: {e}", exc_info=True)
             raise # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

    def generate_sarcasm(self, text, content_data={}):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
        if not self.config.get('SARCASM.enabled', True) or not self.config.get('SARCASM.comment_enabled', True):
            self.logger.info("üîï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ

        # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if "theme" in content_data and content_data["theme"] == "tragic":
            prompt_template = self.config.get('SARCASM.tragic_comment_prompt')
            temperature = self.config.get('SARCASM.tragic_comment_temperature', 0.6)
            prompt_type = "tragic"
        else:
            prompt_template = self.config.get('SARCASM.comment_prompt')
            temperature = self.config.get('SARCASM.comment_temperature', 0.8)
            prompt_type = "normal"

        if not prompt_template:
            self.logger.error(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ({prompt_type}) –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return None

        prompt = prompt_template.format(text=text)
        self.logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—Ç–∏–ø: {prompt_type}, temp: {temperature:.1f})...")

        try:
            # –í—ã–∑—ã–≤–∞–µ–º request_openai —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            comment = self.request_openai(prompt, temperature_override=temperature)
            self.logger.info(f"‚úÖ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {comment}")
            return comment
        except Exception as e:
            # request_openai —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
            return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def generate_sarcasm_poll(self, text, content_data={}):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å, –æ–∂–∏–¥–∞—è JSON."""
        if not self.config.get('SARCASM.enabled', True) or not self.config.get('SARCASM.poll_enabled', True):
            self.logger.info("üîï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

        # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if "theme" in content_data and content_data["theme"] == "tragic":
            prompt_template = self.config.get('SARCASM.tragic_question_prompt')
            temperature = self.config.get('SARCASM.tragic_poll_temperature', 0.6)
            prompt_type = "tragic"
        else:
            prompt_template = self.config.get('SARCASM.question_prompt')
            temperature = self.config.get('SARCASM.poll_temperature', 0.9)
            prompt_type = "normal"

        if not prompt_template:
             self.logger.error(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ä–æ—Å–∞ ({prompt_type}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
             return {}

        prompt = prompt_template.format(text=text)
        self.logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞ (—Ç–∏–ø: {prompt_type}, temp: {temperature:.1f})... –û–∂–∏–¥–∞–µ–º JSON.")
        response_content = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –¥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º JSON –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
            response_content = self.request_openai(prompt, use_json_mode=True, temperature_override=temperature)
            self.logger.debug(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç OpenAI –¥–ª—è –æ–ø—Ä–æ—Å–∞: {response_content[:500]}")

            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            poll_data = json.loads(response_content)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ JSON
            if isinstance(poll_data, dict) and "question" in poll_data and "options" in poll_data and isinstance(poll_data["options"], list) and len(poll_data["options"]) == 3:
                self.logger.info("‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω (JSON).")
                # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                poll_data["question"] = str(poll_data["question"]).strip()
                poll_data["options"] = [str(opt).strip() for opt in poll_data["options"]]
                return poll_data
            else:
                self.logger.error(f"‚ùå OpenAI –≤–µ—Ä–Ω—É–ª JSON, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞: {poll_data}")
                return {}

        except json.JSONDecodeError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ OpenAI –¥–ª—è –æ–ø—Ä–æ—Å–∞: {e}. –û—Ç–≤–µ—Ç: {response_content[:500]}")
            return {}
        except Exception as e:
            # request_openai —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
            return {}

    def save_to_generated_content(self, stage, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π JSON —Ñ–∞–π–ª."""
        try:
            if not self.content_output_path:
                raise ValueError("‚ùå –û—à–∏–±–∫–∞: self.content_output_path –Ω–µ –∑–∞–¥–∞–Ω!")
            self.logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {self.content_output_path}, —ç—Ç–∞–ø: {stage}")
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            ensure_directory_exists(self.content_output_path)
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            result_data = {}
            if os.path.exists(self.content_output_path):
                try:
                    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
                    if os.path.getsize(self.content_output_path) > 0:
                        with open(self.content_output_path, 'r', encoding='utf-8') as file:
                            result_data = json.load(file)
                    else:
                         self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.content_output_path} –ø—É—Å—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å {{}}")
                         result_data = {}
                except json.JSONDecodeError:
                    self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.content_output_path} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
                    result_data = {}
                except Exception as read_err:
                     self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {self.content_output_path}: {read_err}")
                     result_data = {} # –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
            result_data["timestamp"] = datetime.utcnow().isoformat()
            result_data[stage] = data
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump(result_data, file, ensure_ascii=False, indent=4)
            self.logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —ç—Ç–∞–ø–∞: {stage}")
        except Exception as e:
            handle_error("Save to Generated Content Error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ {self.content_output_path}: {str(e)}", e)

    def critique_content(self, content, topic):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫—Ä–∏—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)."""
        if not self.config.get('CONTENT.critique.enabled', False): # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
            self.logger.info("üîï –ö—Ä–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return "–ö—Ä–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
        if not content:
             self.logger.warning("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏.")
             return "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏."
        try:
            self.logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI...")
            prompt_template = self.config.get('CONTENT.critique.prompt_template')
            if not prompt_template:
                 self.logger.error("–ü—Ä–æ–º–ø—Ç –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                 return "–ü—Ä–æ–º–ø—Ç –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."

            prompt = prompt_template.format(content=content, topic=topic)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º request_openai —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏
            temperature = self.config.get('CONTENT.critique.temperature', 0.3)
            critique = self.request_openai(prompt, temperature_override=temperature)
            self.logger.info("‚úÖ –ö—Ä–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return critique
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏–∫–∏.")
            # –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ request_openai
            return "–ö—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π."

    def run(self, generation_id):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ ID."""
        self.logger.info(f"--- –ó–∞–ø—É—Å–∫ ContentGenerator.run –¥–ª—è ID: {generation_id} ---")
        if not generation_id:
             self.logger.error("‚ùå –í ContentGenerator.run –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω generation_id!")
             raise ValueError("generation_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

        try:
            # --- –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
            self.adapt_prompts()
            self.clear_generated_content() # –û—á–∏—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª generated_content.json

            # --- –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–µ–º—ã ---
            tracker = self.load_tracker()
            topic, content_data = self.generate_topic(tracker)
            # generate_topic –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–∂–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É

            # --- –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–µ–∫—Å—Ç–∞ ---
            text_initial = ""
            if self.config.get('CONTENT.text.enabled', True) or self.config.get('CONTENT.tragic_text.enabled', True):
                prompt_key = 'CONTENT.tragic_text.prompt_template' if content_data.get("theme") == "tragic" else 'CONTENT.text.prompt_template'
                prompt_template = self.config.get(prompt_key)
                if prompt_template:
                     text_initial = self.request_openai(prompt_template.format(topic=topic))
                     self.logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç (–¥–ª–∏–Ω–∞: {len(text_initial)}): {text_initial[:100]}...")
                     self.save_to_generated_content("text", {"text": text_initial})
                else:
                     self.logger.warning(f"–ü—Ä–æ–º–ø—Ç {prompt_key} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            else:
                self.logger.info("üîï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

            # --- –®–∞–≥ 4: –ö—Ä–∏—Ç–∏–∫–∞ ---
            critique_result = self.critique_content(text_initial, topic)
            self.save_to_generated_content("critique", {"critique": critique_result})

            # --- –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°–∞—Ä–∫–∞–∑–º–∞ ---
            sarcastic_comment = None
            sarcastic_poll = {}
            if text_initial: # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞—Ä–∫–∞–∑–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                sarcastic_comment = self.generate_sarcasm(text_initial, content_data)
                sarcastic_poll = self.generate_sarcasm_poll(text_initial, content_data) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            self.save_to_generated_content("sarcasm", {"comment": sarcastic_comment, "poll": sarcastic_poll})

            # --- –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ü–µ–Ω–∞—Ä–∏—è –∏ –ö–∞–¥—Ä–∞ ---
            script_text = None
            first_frame_description = None
            try:
                self.logger.info("–ó–∞–ø—Ä–æ—Å –∫ OpenAI (JSON Mode) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–¥—Ä–∞...")
                restrictions_list = self.config.get("restrictions", [])
                chosen_restriction = random.choice(restrictions_list) if restrictions_list else "No specific restrictions."
                self.logger.info(f"–í—ã–±—Ä–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {chosen_restriction}")

                prompt_template = self.config.get('PROMPTS.user_prompt_combined')
                if not prompt_template:
                    raise ValueError("–ü—Ä–æ–º–ø—Ç PROMPTS.user_prompt_combined –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                prompt_combined = prompt_template.format(topic=topic, restriction=chosen_restriction)

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º request_openai —Å —Ñ–ª–∞–≥–æ–º JSON
                response_content = self.request_openai(prompt_combined, use_json_mode=True)
                self.logger.debug(f"Raw OpenAI JSON response for script/frame: {response_content[:500]}")
                script_data = json.loads(response_content)

                script_text = script_data.get("script")
                first_frame_description = script_data.get("first_frame_description")

                if not script_text or not first_frame_description:
                    raise ValueError(f"–ö–ª—é—á–∏ 'script' –∏–ª–∏ 'first_frame_description' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç/–ø—É—Å—Ç—ã –≤ JSON –æ—Ç OpenAI: {script_data}")

                self.logger.info("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–¥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã (JSON Mode).")
                self.save_to_generated_content("script", {"script": script_text, "first_frame_description": first_frame_description})

            except (json.JSONDecodeError, ValueError) as parse_err:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞/–≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON —Å—Ü–µ–Ω–∞—Ä–∏—è/–æ–ø–∏—Å–∞–Ω–∏—è: {parse_err}.")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º script/description –ø—É—Å—Ç—ã–º–∏
                script_text = None
                first_frame_description = None
            except Exception as script_err:
                self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è/–æ–ø–∏—Å–∞–Ω–∏—è: {script_err}", exc_info=True)
                script_text = None
                first_frame_description = None

            # --- –®–∞–≥ 7: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ò—Ç–æ–≥–æ–≤–æ–≥–æ –ö–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ B2 ---
            self.logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è B2...")
            complete_content_dict = {
                "topic": topic,
                "content": text_initial.strip() if text_initial else "",
                "sarcasm": {
                    "comment": sarcastic_comment,
                    "poll": sarcastic_poll # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º)
                },
                "script": script_text, # –ë—É–¥–µ—Ç None, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                "first_frame_description": first_frame_description # –ë—É–¥–µ—Ç None, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            }
            self.logger.debug(f"–ò—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å: {json.dumps(complete_content_dict, ensure_ascii=False, indent=2)}")

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é save_content_to_b2 (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤—ã—à–µ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ), –ø–µ—Ä–µ–¥–∞–≤–∞—è ID
            self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ B2 –¥–ª—è ID {generation_id}...")
            success = save_content_to_b2(
                 "666/", # –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞
                 complete_content_dict, # –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
                 generation_id # <--- –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID!
            )
            if not success:
                # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ B2 –¥–ª—è ID {generation_id}")

            # --- –®–∞–≥ 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config_midjourney.json ---
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config_midjourney.json –¥–ª—è ID: {generation_id} (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ generation: true)")
            try:
                s3_client_mj = self.b2_client
                if not s3_client_mj:
                     raise ConnectionError("B2 –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è config_midjourney")

                config_mj_remote_path = "config/config_midjourney.json"
                timestamp_suffix = datetime.utcnow().strftime("%Y%m%d%H%M%S%f")
                config_mj_local_path = f"config_midjourney_{generation_id}_temp_{timestamp_suffix}.json"
                bucket_name = B2_BUCKET_NAME

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ config_midjourney.json –∏–∑ B2
                config_mj = load_b2_json(s3_client_mj, bucket_name, config_mj_remote_path, config_mj_local_path, default_value={})
                if config_mj is None: config_mj = {}

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                config_mj['generation'] = True
                config_mj['midjourney_task'] = None
                config_mj['midjourney_results'] = {}
                config_mj['status'] = None
                self.logger.info("–î–∞–Ω–Ω—ã–µ –¥–ª—è config_midjourney.json –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: generation=True, task/results –æ—á–∏—â–µ–Ω—ã.")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ B2 (–∏—Å–ø–æ–ª—å–∑—É–µ–º save_b2_json –∏–∑ utils)
                if not save_b2_json(s3_client_mj, bucket_name, config_mj_remote_path, config_mj_local_path, config_mj):
                     raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å config_mj –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ generation=True!")
                else:
                     self.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π {config_mj_remote_path} (generation=True) –∑–∞–≥—Ä—É–∂–µ–Ω –≤ B2.")

            except Exception as e:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å config_midjourney.json: {str(e)}", exc_info=True)
                # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞
                raise Exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ generation: true") from e

            self.logger.info(f"‚úÖ ContentGenerator.run —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ID {generation_id}.")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ContentGenerator.run –¥–ª—è ID {generation_id}: {str(e)}", exc_info=True)
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –º–æ–≥–ª–∞ –µ–≥–æ –ø–æ–π–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥
            raise

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate content for a specific ID.')
    # –ê—Ä–≥—É–º–µ–Ω—Ç generation_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    parser.add_argument('--generation_id', type=str, required=True,
                        help='The generation ID for the content file (Mandatory).')
    args = parser.parse_args()
    generation_id_main = args.generation_id

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π ID –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if not generation_id_main:
         logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: generation_id –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç!")
         sys.exit(1) # –í—ã—Ö–æ–¥ —Å –æ—à–∏–±–∫–æ–π

    logger.info(f"--- –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ generate_content.py –¥–ª—è ID: {generation_id_main} ---")
    exit_code = 1 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ - –æ—à–∏–±–∫–∞
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        generator = ContentGenerator()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ run, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID
        generator.run(generation_id_main)
        logger.info(f"--- –°–∫—Ä–∏–ø—Ç generate_content.py —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ID: {generation_id_main} ---")
        exit_code = 0 # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    except Exception as main_err:
         # –õ–æ–≥–≥–µ—Ä –≤–Ω—É—Ç—Ä–∏ generator.run —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏
         logger.error(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø generate_content.py –¥–ª—è ID {generation_id_main} !!!")
         # exit_code –æ—Å—Ç–∞–µ—Ç—Å—è 1
    finally:
         logger.info(f"--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ generate_content.py —Å –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞: {exit_code} ---")
         sys.exit(exit_code) # –í—ã—Ö–æ–¥ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º

