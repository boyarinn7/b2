import os
import json
import sys
import requests
import openai
import textstat
import spacy
import re
import subprocess
import random
from datetime import datetime
from modules.config_manager import ConfigManager
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.utils import ensure_directory_exists
from modules.api_clients import get_b2_client

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
logger = get_logger("generate_content")
config = ConfigManager()

FAILSAFE_PATH = "config/FailSafeVault.json"
TRACKER_PATH = "config/topics_tracker.json"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
TRACKER_B2_PATH = "config/topics_tracker.json"  # –ü—É—Ç—å –≤ B2
CONFIG_GEN_PATH = "config/config_gen.json"  # –ü—É—Ç—å –≤ B2
CONFIG_GEN_LOCAL_PATH = "config/config_gen.json"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
CONTENT_OUTPUT_PATH = "generated_content.json"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
TOPICS_TRACKER_PATH = "config/topics_tracker.json"  # –ü—É—Ç—å –≤ B2
TOPICS_TRACKER_LOCAL_PATH = "config/topics_tracker.json"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
SCRIPTS_FOLDER = "scripts/"
GENERATE_MEDIA_SCRIPT = os.path.join(SCRIPTS_FOLDER, "generate_media.py")
B2_STORAGE_MANAGER_SCRIPT = os.path.join(SCRIPTS_FOLDER, "b2_storage_manager.py")
TARGET_FOLDER = "666/"

ensure_directory_exists("config")

def download_config_public():
    bucket_name = os.getenv("B2_BUCKET_NAME")
    if not bucket_name:
        raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è B2_BUCKET_NAME –Ω–µ –∑–∞–¥–∞–Ω–∞")
    local_path = config.get("FILE_PATHS.config_public", "config_public.json")
    try:
        b2_client = get_b2_client()
        bucket = b2_client.get_bucket_by_name(bucket_name)
        os.makedirs(os.path.dirname(local_path), exist_ok=True)
        bucket.download_file_by_name("config/config_public.json", local_path)
        logger.info(f"‚úÖ –§–∞–π–ª config_public.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ B2 –≤ {local_path}")
    except Exception as e:
        handle_error(logger, "Download Config Public Error", e)

def generate_file_id():
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD-HHmm."""
    now = datetime.utcnow()
    date_part = now.strftime("%Y%m%d")
    time_part = now.strftime("%H%M")
    return f"{date_part}-{time_part}.json"

def save_generation_id_to_config(file_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª config_gen.json."""
    config_gen_path = os.path.join("config", "config_gen.json")
    os.makedirs(os.path.dirname(config_gen_path), exist_ok=True)
    try:
        with open(config_gen_path, "w", encoding="utf-8") as file:
            json.dump({"generation_id": file_id}, file, ensure_ascii=False, indent=4)
        logger.info(f"‚úÖ ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '{file_id}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ config_gen.json")
    except Exception as e:
        handle_error("Save Generation ID Error", str(e), e)

def save_to_b2(folder, content):
    try:
        file_id = generate_file_id()
        save_generation_id_to_config(file_id)
        logger.info(f"üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É B2: {folder} —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ {file_id}")
        b2_client = get_b2_client()
        bucket_name = os.getenv("B2_BUCKET_NAME")
        if not bucket_name:
            raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è B2_BUCKET_NAME –Ω–µ –∑–∞–¥–∞–Ω–∞")
        s3_key = f"{folder.rstrip('/')}/{file_id}"
        if not isinstance(content, dict):
            logger.error("‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º!")
            return
        sarcasm_data = content.get("sarcasm", {})
        if isinstance(sarcasm_data, str):
            try:
                sarcasm_data = json.loads(sarcasm_data)
                logger.warning("‚ö†Ô∏è –ü–æ–ª–µ 'sarcasm' –±—ã–ª–æ —Å—Ç—Ä–æ–∫–æ–π, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            except json.JSONDecodeError:
                logger.error("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª–µ 'sarcasm' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
                return
        if "poll" in sarcasm_data and isinstance(sarcasm_data["poll"], str):
            try:
                sarcasm_data["poll"] = json.loads(sarcasm_data["poll"])
                logger.warning("‚ö†Ô∏è –ü–æ–ª–µ 'poll' –±—ã–ª–æ —Å—Ç—Ä–æ–∫–æ–π, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            except json.JSONDecodeError:
                logger.error("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª–µ 'poll' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
                sarcasm_data["poll"] = {}
        content["sarcasm"] = sarcasm_data
        temp_path = f"temp_{file_id}"
        with open(temp_path, "w", encoding="utf-8") as f:
            json.dump(content, f, ensure_ascii=False, indent=4)
        bucket = b2_client.get_bucket_by_name(bucket_name)
        bucket.upload_local_file(local_file=temp_path, file_name=s3_key)
        os.remove(temp_path)
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ B2: {s3_key}")
    except Exception as e:
        handle_error(logger, "B2 Upload Error", e)
        failed_path = f"failed_{file_id}"
        with open(failed_path, "w", encoding="utf-8") as f:
            json.dump(content, f, ensure_ascii=False, indent=4)
        logger.warning(f"‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤ {failed_path}")

class ContentGenerator:
    def __init__(self):
        self.topic_threshold = config.get('GENERATE.topic_threshold', 7)
        self.text_threshold = config.get('GENERATE.text_threshold', 8)
        self.max_attempts = config.get('GENERATE.max_attempts', 3)
        self.adaptation_enabled = config.get('GENERATE.adaptation_enabled', False)
        self.adaptation_params = config.get('GENERATE.adaptation_parameters', {})
        self.content_output_path = config.get('FILE_PATHS.content_output_path', 'generated_content.json')
        self.before_critique_path = config.get('FILE_PATHS.before_critique_path', 'before_critique.json')
        self.after_critique_path = config.get('FILE_PATHS.after_critique_path', 'after_critique.json')
        self.logger = logger
        self.config = config
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.openai_model = os.getenv("OPENAI_MODEL", "gpt-4")
        self.temperature = float(os.getenv("OPENAI_TEMPERATURE", 0.7))
        if not self.openai_api_key:
            logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞!")
            raise EnvironmentError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    def adapt_prompts(self):
        if not self.adaptation_enabled:
            logger.info("üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
        logger.info("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        for key, value in self.adaptation_params.items():
            logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä '{key}' –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {value}")

    def clear_generated_content(self):
        try:
            logger.info("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–æ–≤–æ–π —Ç–µ–º—ã.")
            if not self.content_output_path:
                raise ValueError("‚ùå –û—à–∏–±–∫–∞: content_output_path –ø—É—Å—Ç–æ–π!")
            folder = os.path.dirname(self.content_output_path)
            if folder and not os.path.exists(folder):
                os.makedirs(folder)
                logger.info(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {folder}")
            logger.info(f"üîé Debug: –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ {self.content_output_path}")
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump({}, file, ensure_ascii=False, indent=4)
            logger.info("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
        except PermissionError:
            handle_error("Clear Content Error", f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {self.content_output_path}", PermissionError())
        except Exception as e:
            handle_error("Clear Content Error", str(e), e)

    def generate_topic(self, tracker):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤ –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞.

        Args:
            tracker (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ–º–∞—Ö –∏ —Ñ–æ–∫—É—Å–∞—Ö.

        Returns:
            tuple: (full_topic, content_data) - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

        Raises:
            ValueError: –ï—Å–ª–∏ —Ñ–æ–∫—É—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç OpenAI –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
        """
        valid_focuses = self.get_valid_focus_areas(tracker)
        if not valid_focuses:
            self.logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤")
            raise ValueError("–í—Å–µ —Ñ–æ–∫—É—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã")

        selected_focus = random.choice(valid_focuses)
        used_labels = tracker["focus_data"].get(selected_focus, [])

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get() –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        prompt_template = self.config.get("CONTENT", {}).get("topic", {}).get("prompt_template", "")
        if not prompt_template:
            self.logger.error("‚ùå –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            raise ValueError("–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")

        prompt = prompt_template.format(
            focus_areas=selected_focus,
            exclusions=", ".join(used_labels)
        )
        topic_response = self.request_openai(prompt)

        # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ OpenAI (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ JSON –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
        try:
            topic_data = json.loads(topic_response)
            full_topic = topic_data["full_topic"]
            short_topic = topic_data["short_topic"]
        except json.JSONDecodeError:
            self.logger.warning("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –Ω–µ JSON, –ø–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é")
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "Full topic: —Ç–µ–∫—Å—Ç\nShort topic: —Ç–µ–∫—Å—Ç" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
            lines = topic_response.strip().split("\n")
            full_topic = lines[0].replace("Full topic:", "").strip() if "Full topic:" in lines[0] else lines[0].strip()
            short_topic = lines[1].replace("Short topic:", "").strip() if len(lines) > 1 and "Short topic:" in lines[
                1] else full_topic[:50]

        self.update_tracker(selected_focus, short_topic)
        self.save_to_generated_content("topic", {"full_topic": full_topic, "short_topic": short_topic})
        return full_topic, {"theme": "tragic" if "(—Ç)" in selected_focus else "normal"}

    def update_tracker(self, focus, short_topic):
        with open(TRACKER_PATH, 'r', encoding='utf-8') as f:
            tracker = json.load(f)
        used_focuses = tracker["used_focuses"]
        focus_data = tracker["focus_data"]
        if focus in used_focuses:
            used_focuses.remove(focus)
        used_focuses.insert(0, focus)
        if len(used_focuses) > 15:
            used_focuses.pop()
        focus_data.setdefault(focus, []).insert(0, short_topic)
        if len(focus_data[focus]) > 5:
            focus_data[focus].pop()
        tracker["used_focuses"] = used_focuses
        tracker["focus_data"] = focus_data
        with open(TRACKER_PATH, 'w', encoding='utf-8') as f:
            json.dump(tracker, f, ensure_ascii=False, indent=4)
        self.sync_tracker_to_b2()

    def sync_tracker_to_b2(self):
        b2_client = get_b2_client()
        bucket_name = os.getenv("B2_BUCKET_NAME")
        local_path = TRACKER_PATH  # "config/topics_tracker.json"
        b2_path = TRACKER_B2_PATH  # "config/topics_tracker.json"
        if not bucket_name:
            raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è B2_BUCKET_NAME –Ω–µ –∑–∞–¥–∞–Ω–∞")
        try:
            bucket = b2_client.get_bucket_by_name(bucket_name)
            bucket.upload_local_file(local_file=local_path, file_name=b2_path)
            self.logger.info(f"‚úÖ {b2_path} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å B2")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {b2_path} –≤ B2: {e}")

    def request_openai(self, prompt):
        try:
            openai.api_key = self.openai_api_key
            max_tokens = self.config.get("API_KEYS.openai.max_tokens_text", 750)
            self.logger.info(f"üîé –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI —Å max_tokens={max_tokens}")
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=self.temperature,
            )
            return response['choices'][0]['message']['content'].strip()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI API: {e}")
            raise

    def generate_sarcasm(self, text, content_data={}):
        if not self.config.get('SARCASM.enabled', True) or not self.config.get('SARCASM.comment_enabled', True):
            self.logger.info("üîï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return ""
        self.logger.info(f"üîé Debug: –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {self.config.get('SARCASM.comment_prompt')}")
        if "theme" in content_data and content_data["theme"] == "tragic":
            prompt = self.config.get('SARCASM.tragic_comment_prompt').format(text=text)
            temperature = self.config.get('SARCASM.tragic_comment_temperature', 0.6)
        else:
            prompt = self.config.get('SARCASM.comment_prompt').format(text=text)
            temperature = self.config.get('SARCASM.comment_temperature', 0.8)
        max_tokens = self.config.get("SARCASM.max_tokens_comment", 150)
        self.logger.info(f"üîé Debug: –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π max_tokens_comment = {max_tokens}")
        try:
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=temperature
            )
            comment = response['choices'][0]['message']['content'].strip()
            self.logger.info(f"‚úÖ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {comment}")
            return comment
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return ""

    def generate_sarcasm_poll(self, text, content_data={}):
        if not self.config.get('SARCASM.enabled', True) or not self.config.get('SARCASM.poll_enabled', True):
            self.logger.info("üîï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return {}
        if "theme" in content_data and content_data["theme"] == "tragic":
            prompt = self.config.get('SARCASM.tragic_question_prompt').format(text=text)
            temperature = self.config.get('SARCASM.tragic_poll_temperature', 0.6)
        else:
            prompt = self.config.get('SARCASM.question_prompt').format(text=text)
            temperature = self.config.get('SARCASM.poll_temperature', 0.9)
        try:
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=self.config.get('SARCASM.max_tokens_poll', 250),
                temperature=temperature
            )
            poll_text = response['choices'][0]['message']['content'].strip()
            self.logger.info(f"üõë –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç OpenAI –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–æ—Ä–æ–º: {poll_text}")
            try:
                poll_data = json.loads(poll_text)
                if "question" in poll_data and "options" in poll_data:
                    return poll_data
            except json.JSONDecodeError:
                self.logger.warning("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç, –∞ –Ω–µ JSON. –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ä—É—á–Ω—É—é...")
            match = re.findall(r"\d\.-\s*(.+)", poll_text)
            if len(match) >= 4:
                question = match[0].strip()
                options = [opt.strip() for opt in match[1:4]]
                return {"question": question, "options": options}
            self.logger.error("‚ùå OpenAI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç.")
            return {}
        except Exception as e:
            handle_error("Sarcasm Poll Generation Error", str(e), e)
            return {}

    def generate_script_and_frame(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞."""
        creative_prompts = self.config.get("creative_prompts")
        if not creative_prompts or not isinstance(creative_prompts, list):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: 'creative_prompts' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
            raise ValueError("–°–ø–∏—Å–æ–∫ 'creative_prompts' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        selected_prompt = random.choice(creative_prompts)
        combined_prompt = self.config.get("PROMPTS.user_prompt_combined").replace("{topic}", topic).replace(
            "–ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∏–∑ 'creative_prompts' –≤ –∫–æ–Ω—Ñ–∏–≥–µ",
            f"–ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥: '{selected_prompt}'"
        )
        for attempt in range(self.max_attempts):
            try:
                logger.info(f"üîé –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è '{topic[:100]}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_attempts})")
                response = openai.ChatCompletion.create(
                    model=self.config.get("OPENAI_SETTINGS.model", "gpt-4o"),
                    messages=[{"role": "user", "content": combined_prompt}],
                    max_tokens=self.config.get("OPENAI_SETTINGS.max_tokens", 1000),
                    temperature=self.config.get("OPENAI_SETTINGS.temperature", 0.7),
                )
                combined_response = response['choices'][0]['message']['content'].strip()
                if len(combined_response) < self.config.get("VISUAL_ANALYSIS.min_script_length", 200):
                    logger.error(f"‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(combined_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                    continue
                if "First Frame Description:" not in combined_response or "End of Description" not in combined_response:
                    logger.error("‚ùå –ú–∞—Ä–∫–µ—Ä—ã –∫–∞–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ!")
                    continue
                script_text = combined_response.split("First Frame Description:")[0].strip()
                first_frame_description = \
                    combined_response.split("First Frame Description:")[1].split("End of Description")[0].strip()
                return script_text, first_frame_description
            except Exception as e:
                handle_error(logger, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_attempts})", e)
                if attempt == self.max_attempts - 1:
                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
                    return None, None
        return None, None

    def save_to_generated_content(self, stage, data):
        try:
            if not self.content_output_path:
                raise ValueError("‚ùå –û—à–∏–±–∫–∞: self.content_output_path –ø—É—Å—Ç–æ–π!")
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª: {self.content_output_path}")
            folder = os.path.dirname(self.content_output_path) or "."
            if not os.path.exists(folder):
                os.makedirs(folder)
                logger.info(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {folder}")
            if os.path.exists(self.content_output_path):
                logger.info(f"üìÑ –§–∞–π–ª {self.content_output_path} –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
                with open(self.content_output_path, 'r', encoding='utf-8') as file:
                    try:
                        result_data = json.load(file)
                    except json.JSONDecodeError:
                        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.content_output_path} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
                        result_data = {}
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.content_output_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
                result_data = {}
            result_data["timestamp"] = datetime.utcnow().isoformat()
            result_data[stage] = data
            logger.info(f"üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ {self.content_output_path}...")
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump(result_data, file, ensure_ascii=False, indent=4)
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ: {stage}")
        except FileNotFoundError:
            handle_error("Save to Generated Content Error", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.content_output_path}", FileNotFoundError())
        except PermissionError:
            handle_error("Save to Generated Content Error", f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {self.content_output_path}", PermissionError())
        except Exception as e:
            handle_error("Save to Generated Content Error", str(e), e)

    def critique_content(self, content, topic):
        if not self.config.get('CONTENT.critique.enabled', True):
            self.logger.info("üîï –ö—Ä–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return "–ö—Ä–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
        try:
            self.logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI...")
            prompt_template = self.config.get('CONTENT.critique.prompt_template')
            prompt = prompt_template.format(content=content, topic=topic)
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=self.config.get('CONTENT.critique.max_tokens', 300),
                temperature=self.config.get('CONTENT.critique.temperature', 0.3)
            )
            critique = response['choices'][0]['message']['content'].strip()
            self.logger.info("‚úÖ –ö—Ä–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return critique
        except Exception as e:
            handle_error("Critique Error", str(e), e)
            return "–ö—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π."

    def analyze_topic_generation(self):
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
            feedback_path = self.config.get('FILE_PATHS.feedback_file', 'data/feedback.json')
            positive_feedback_topics = []
            if os.path.exists(feedback_path):
                with open(feedback_path, 'r', encoding='utf-8') as file:
                    feedback_data = json.load(file)
                    positive_feedback_topics = [
                        entry['topic'] for entry in feedback_data if
                        entry.get('rating', 0) >= self.config.get('METRICS.success_threshold', 8)
                    ]
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(positive_feedback_topics)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ–º –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
            else:
                self.logger.warning("‚ö†Ô∏è –§–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            archive_folder = self.config.get('FILE_PATHS.archive_folder', 'data/archive/')
            successful_topics = []
            if os.path.exists(archive_folder):
                for filename in os.listdir(archive_folder):
                    if filename.endswith('.json'):
                        with open(os.path.join(archive_folder, filename), 'r', encoding='utf-8') as file:
                            archive_data = json.load(file)
                            if archive_data.get('success', False):
                                successful_topics.append(archive_data.get('topic', ''))
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(successful_topics)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–∞.")
            else:
                self.logger.warning("‚ö†Ô∏è –ü–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            tracker = self.load_tracker()
            valid_focus_areas = self.get_valid_focus_areas(tracker)
            combined_topics = list(set(positive_feedback_topics + successful_topics + valid_focus_areas))
            self.logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º: {combined_topics}")
            return combined_topics
        except Exception as e:
            handle_error("Topic Analysis Error", str(e), e)
            return []

    def get_valid_focus_areas(self, tracker):
        all_focuses = tracker["all_focuses"]
        used_focuses = tracker["used_focuses"]
        valid_focuses = [f for f in all_focuses if f not in used_focuses]
        self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–∫—É—Å—ã: {valid_focuses}")
        return valid_focuses

    def prioritize_focus_from_feedback_and_archive(self, valid_focus_areas):
        try:
            feedback_path = self.config.get('FILE_PATHS.feedback_file', 'data/feedback.json')
            feedback_foci = []
            if os.path.exists(feedback_path):
                with open(feedback_path, 'r', encoding='utf-8') as file:
                    feedback_data = json.load(file)
                    feedback_foci = [
                        entry['topic'] for entry in feedback_data if
                        entry.get('rating', 0) >= self.config.get('METRICS.success_threshold', 8)
                    ]
            archive_folder = self.config.get('FILE_PATHS.archive_folder', 'data/archive/')
            archive_foci = []
            if os.path.exists(archive_folder):
                for filename in os.listdir(archive_folder):
                    if filename.endswith('.json'):
                        with open(os.path.join(archive_folder, filename), 'r', encoding='utf-8') as file:
                            archive_data = json.load(file)
                            if archive_data.get('success', False):
                                archive_foci.append(archive_data.get('topic', ''))
            for focus in feedback_foci + archive_foci:
                if focus in valid_focus_areas:
                    self.logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ñ–æ–∫—É—Å: {focus}")
                    return focus
            if valid_focus_areas:
                self.logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ–∫—É—Å: {valid_focus_areas[0]}")
                return valid_focus_areas[0]
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return None
        except Exception as e:
            handle_error("Focus Prioritization Error", str(e), e)
            return None

    def load_tracker(self):
        bucket_name = os.getenv("B2_BUCKET_NAME")
        if not bucket_name:
            raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è B2_BUCKET_NAME –Ω–µ –∑–∞–¥–∞–Ω–∞")
        local_path = TRACKER_PATH  # "config/topics_tracker.json"
        b2_path = TRACKER_B2_PATH  # "config/topics_tracker.json"
        os.makedirs(os.path.dirname(local_path), exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É config/
        b2_client = get_b2_client()
        tracker_updated = False
        try:
            bucket = b2_client.get_bucket_by_name(bucket_name)
            bucket.download_file_by_name(b2_path, local_path)
            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {b2_path} –∏–∑ B2 –≤ {local_path}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {b2_path} –∏–∑ B2: {e}")
            if not os.path.exists(local_path):
                self.logger.info("–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π topics_tracker.json –∏–∑ FailSafeVault")
                os.makedirs(os.path.dirname(local_path), exist_ok=True)
                with open(FAILSAFE_PATH, 'r', encoding='utf-8') as f:
                    failsafe = json.load(f)
                tracker = {
                    "all_focuses": failsafe["focuses"],
                    "used_focuses": [],
                    "focus_data": {}
                }
                with open(local_path, 'w', encoding='utf-8') as f:
                    json.dump(tracker, f, ensure_ascii=False, indent=4)
                tracker_updated = True
        with open(local_path, 'r', encoding='utf-8') as f:
            tracker = json.load(f)
        if "all_focuses" not in tracker:
            self.logger.info("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç—Ä–µ–∫–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º all_focuses")
            with open(FAILSAFE_PATH, 'r', encoding='utf-8') as f:
                failsafe = json.load(f)
            tracker["all_focuses"] = failsafe["focuses"]
            tracker.setdefault("used_focuses", [])
            tracker.setdefault("focus_data", {})
            with open(local_path, 'w', encoding='utf-8') as f:
                json.dump(tracker, f, ensure_ascii=False, indent=4)
            tracker_updated = True
        if tracker_updated:
            self.sync_tracker_to_b2()
        return tracker

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        logger.info(">>> –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–º–µ—Ç–æ–¥ run)")
        import argparse
        parser = argparse.ArgumentParser(description="Generate Content")
        parser.add_argument("--generation_id", type=str, help="ID for content generation")
        args = parser.parse_args()

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ generation_id
            if args.generation_id:
                generation_id = args.generation_id
                logger.info(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π generation_id: {generation_id}")
            else:
                with open(os.path.join("config", "config_gen.json"), "r", encoding="utf-8") as gen_file:
                    config_gen_content = json.load(gen_file)
                    generation_id = config_gen_content.get("generation_id")
                if not generation_id:
                    generation_id = generate_file_id()
                    save_generation_id_to_config(generation_id)
                    logger.info(f"‚ÑπÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π generation_id: {generation_id}")
                else:
                    logger.info(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º generation_id –∏–∑ config_gen.json: {generation_id}")

            self.adapt_prompts()
            tracker = self.load_tracker()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
            topic, content_data = self.generate_topic(tracker)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã
            if not topic:
                logger.error("‚ùå –¢–µ–º–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
                return

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            if self.config.get('CONTENT.text.enabled', True) or self.config.get('CONTENT.tragic_text.enabled', True):
                if "theme" in content_data and content_data["theme"] == "tragic" and self.config.get(
                        'CONTENT.tragic_text.enabled', True):
                    text_initial = self.request_openai(
                        self.config.get('CONTENT.tragic_text.prompt_template', "").format(topic=topic))
                else:
                    text_initial = self.request_openai(
                        self.config.get('CONTENT.text.prompt_template', "").format(topic=topic))
                critique = self.critique_content(text_initial, topic)
                self.save_to_generated_content("critique", {"critique": critique})
            else:
                text_initial = ""
                logger.info("üîï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞—Ä–∫–∞–∑–º–∞
            sarcastic_comment = ""
            sarcastic_poll = {}
            if text_initial:
                sarcastic_comment = self.generate_sarcasm(text_initial, content_data)
                sarcastic_poll = self.generate_sarcasm_poll(text_initial, content_data)

            final_text = text_initial.strip()
            target_folder = "666/"

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
            script_text, first_frame_description = self.generate_script_and_frame(topic)
            if not script_text or not first_frame_description:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–¥—Ä–∞")
                sys.exit(1)
            logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {script_text[:100]}...")
            logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞: {first_frame_description[:100]}...")

            # –°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_dict = {
                "topic": topic,
                "content": final_text,
                "sarcasm": {
                    "comment": sarcastic_comment,
                    "poll": sarcastic_poll
                },
                "script": script_text,
                "first_frame_description": first_frame_description
            }
            save_to_b2(target_folder, content_dict)
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ B2: 666/{generation_id}.json")

            # –ó–∞–ø—É—Å–∫ generate_media.py
            scripts_folder = config.get("FILE_PATHS.scripts_folder", "scripts")
            generate_media_path = os.path.join(scripts_folder, "generate_media.py")
            if not os.path.isfile(generate_media_path):
                logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {generate_media_path}")
                sys.exit(1)
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ generate_media.py —Å generation_id: {generation_id}")
            try:
                result = subprocess.run([sys.executable, generate_media_path, "--generation_id", generation_id],
                                        check=True)
                if result.returncode == 0:
                    logger.info("‚úÖ generate_media.py –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    # –ó–∞–ø—É—Å–∫ b2_storage_manager.py
                    b2_manager_path = os.path.join(scripts_folder, "b2_storage_manager.py")
                    if not os.path.isfile(b2_manager_path):
                        logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {b2_manager_path}")
                        sys.exit(1)
                    logger.info("üîÑ –ó–∞–ø—É—Å–∫ b2_storage_manager.py –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞")
                    subprocess.run([sys.executable, b2_manager_path], check=True)
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ generate_media.py")
                    sys.exit(1)
            except subprocess.CalledProcessError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ generate_media.py: {e}")
                sys.exit(1)

            logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            handle_error(self.logger, "–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", e)
            logger.error("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.")
            sys.exit(1)

if __name__ == "__main__":
    generator = ContentGenerator()
    generator.run()