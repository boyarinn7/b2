import json
import os
import sys
import requests
import openai
import textstat
import spacy
import re
import subprocess
import boto3
import io
from datetime import datetime
from PIL import Image, ImageDraw
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ modules
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'modules')))

from modules.config_manager import ConfigManager
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.utils import ensure_directory_exists

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logger = get_logger("generate_content")
config = ConfigManager()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_and_upload_image(folder, generation_id):
    """–°–æ–∑–¥–∞—ë—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –≤ B2."""
    if not folder or not isinstance(folder, str):
        raise ValueError("folder –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
    if not generation_id or not isinstance(generation_id, str):
        raise ValueError("generation_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

    try:
        file_name = generation_id.replace(".json", ".png")
        local_file_path = file_name
        img = Image.new('RGB', (800, 600), color=(73, 109, 137))
        draw = ImageDraw.Draw(img)
        draw.text((10, 10), f"ID: {generation_id}", fill=(255, 255, 0))
        img.save(local_file_path)
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{local_file_path}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.")
        s3 = get_b2_client()
        bucket_name = config.get("API_KEYS.b2.bucket_name")
        if not bucket_name:
            raise ValueError("bucket_name –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        s3_key = f"{folder.rstrip('/')}/{file_name}"
        s3.upload_file(local_file_path, bucket_name, s3_key)
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ B2: {s3_key}")
        os.remove(local_file_path)
    except ValueError as ve:
        handle_error("Image Upload Error", str(ve))
    except Exception as e:
        handle_error("Image Upload Error", str(e))

def get_b2_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç B2 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    endpoint = config.get("API_KEYS.b2.endpoint")
    access_key = config.get("API_KEYS.b2.access_key")
    secret_key = config.get("API_KEYS.b2.secret_key")
    bucket_name = config.get("API_KEYS.b2.bucket_name")

    logger.debug(f"B2 Config: endpoint={endpoint}, access_key={access_key[:4]}..., secret_key={secret_key[:4]}..., bucket_name={bucket_name}")

    if not all([endpoint, access_key, secret_key, bucket_name]):
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è B2: endpoint, access_key, secret_key –∏–ª–∏ bucket_name")

    try:
        return boto3.client(
            's3',
            endpoint_url=endpoint,
            aws_access_key_id=access_key,
            aws_secret_access_key=secret_key
        )
    except Exception as e:
        handle_error("B2 Client Initialization Error", str(e))
        raise

def download_config_public():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏–∑ B2."""
    config_public_path = config.get("FILE_PATHS.config_public")
    if not config_public_path:
        raise ValueError("config_public_path –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    try:
        s3 = get_b2_client()
        bucket_name = config.get("API_KEYS.b2.bucket_name")
        if not bucket_name:
            raise ValueError("bucket_name –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        os.makedirs(os.path.dirname(config_public_path), exist_ok=True)
        s3.download_file(bucket_name, config_public_path, config_public_path)
        logger.info(f"‚úÖ –§–∞–π–ª config_public.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ B2 –≤ {config_public_path}")
    except ValueError as ve:
        handle_error("Download Config Public Error", str(ve))
    except Exception as e:
        handle_error("Download Config Public Error", str(e))

def generate_file_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        now = datetime.utcnow()
        date_part = now.strftime("%Y%m%d")
        time_part = now.strftime("%H%M")
        return f"{date_part}-{time_part}.json"
    except Exception as e:
        handle_error("Generate File ID Error", str(e))
        raise

def save_generation_id_to_config(file_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ config_gen.json."""
    if not file_id or not isinstance(file_id, str):
        raise ValueError("file_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
    config_gen_path = os.path.join("config", "config_gen.json")
    os.makedirs(os.path.dirname(config_gen_path), exist_ok=True)
    try:
        with open(config_gen_path, "w", encoding="utf-8") as file:
            json.dump({"generation_id": file_id}, file, ensure_ascii=False, indent=4)
        logger.info(f"‚úÖ ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '{file_id}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ config_gen.json")
    except Exception as e:
        handle_error("Save Generation ID Error", str(e))

def save_to_b2(folder, content):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ B2."""
    if not folder or not isinstance(folder, str):
        raise ValueError("folder –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
    if not isinstance(content, dict):
        raise ValueError("content –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

    try:
        file_id = generate_file_id()
        save_generation_id_to_config(file_id)
        logger.info(f"üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É B2: {folder} —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ {file_id}")
        s3 = get_b2_client()
        bucket_name = config.get("API_KEYS.b2.bucket_name")
        if not bucket_name:
            raise ValueError("bucket_name –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        s3_key = f"{folder.rstrip('/')}/{file_id}"
        json_bytes = io.BytesIO(json.dumps(content, ensure_ascii=False, indent=4).encode("utf-8"))
        s3.upload_fileobj(json_bytes, bucket_name, s3_key)
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ B2: {s3_key}")
    except ValueError as ve:
        handle_error("B2 Upload Error", str(ve))
    except Exception as e:
        handle_error("B2 Upload Error", str(e))

def run_generate_media():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç generate_media.py."""
    try:
        scripts_folder = config.get("FILE_PATHS.scripts_folder", "scripts")
        script_path = os.path.join(scripts_folder, "generate_media.py")
        if not os.path.isfile(script_path):
            raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç generate_media.py –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {script_path}")
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {script_path}")
        subprocess.run(["python", script_path], check=True)
        logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç {script_path} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    except FileNotFoundError as e:
        handle_error("Script Execution Error", str(e))
    except subprocess.CalledProcessError as e:
        handle_error("Script Execution Error", str(e))
    except Exception as e:
        handle_error("Script Execution Error", str(e))

class ContentGenerator:
    def __init__(self):
        self.topic_threshold = config.get('GENERATE.topic_threshold', 7)
        self.text_threshold = config.get('GENERATE.text_threshold', 8)
        self.max_attempts = config.get('GENERATE.max_attempts', 3)
        self.adaptation_enabled = config.get('GENERATE.adaptation_enabled', False)
        self.adaptation_params = config.get('GENERATE.adaptation_parameters', {})
        self.content_output_path = config.get('FILE_PATHS.content_output_path', 'generated_content.json')
        self.before_critique_path = config.get('FILE_PATHS.before_critique_path', 'before_critique.json')
        self.after_critique_path = config.get('FILE_PATHS.after_critique_path', 'after_critique.json')
        self.logger = logger
        self.config = config
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.openai_model = os.getenv("OPENAI_MODEL", "gpt-4")
        self.temperature = float(os.getenv("OPENAI_TEMPERATURE", 0.7))
        self.used_short_topics = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º
        if not self.openai_api_key:
            logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞!")
            raise EnvironmentError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    def adapt_prompts(self):
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è."""
        if not self.adaptation_enabled:
            self.logger.info("üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
        if not isinstance(self.adaptation_params, dict):
            raise ValueError("adaptation_params –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        self.logger.info("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        for key, value in self.adaptation_params.items():
            self.logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä '{key}' –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {value}")

    def clear_generated_content(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        if not self.content_output_path:
            raise ValueError("content_output_path –Ω–µ —É–∫–∞–∑–∞–Ω")
        try:
            folder = os.path.dirname(self.content_output_path)
            if folder and not os.path.exists(folder):
                os.makedirs(folder)
                self.logger.info(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {folder}")
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump({}, file, ensure_ascii=False, indent=4)
            self.logger.info("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
        except Exception as e:
            handle_error("Clear Content Error", str(e))

    def generate_topic(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤."""
        logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã...")
        try:
            focus_areas = ", ".join(self.config.get('CONTENT.topic.focus_areas'))
            exclusions = ", ".join(self.used_short_topics)
            prompt = self.config.get('CONTENT.topic.prompt_template').format(
                focus_areas=focus_areas,
                exclusions=exclusions
            )
            logger.info(f"üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã: {prompt[:100]}...")
            response = openai.ChatCompletion.create(
                model=self.config.get('API_KEYS.openai.model'),
                messages=[{"role": "user", "content": prompt}],
                max_tokens=self.config.get('API_KEYS.openai.max_tokens_topic'),
                temperature=self.config.get('CONTENT.text.temperature')
            )
            result = response['choices'][0]['message']['content'].strip()
            topic_data = json.loads(result)
            return topic_data
        except Exception as e:
            handle_error("Topic Generation Error", str(e))
            return None

    def request_openai(self, prompt, max_tokens, temperature):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API."""
        if not prompt or not isinstance(prompt, str):
            raise ValueError("prompt –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        if not isinstance(max_tokens, int) or max_tokens <= 0:
            raise ValueError("max_tokens –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
        if not isinstance(temperature, float) or temperature < 0 or temperature > 1:
            raise ValueError("temperature –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 1")
        try:
            openai.api_key = self.openai_api_key
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=temperature,
            )
            return response['choices'][0]['message']['content'].strip()
        except openai.error.OpenAIError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
            raise
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI: {e}")
            raise

    def generate_text(self, topic, content_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã."""
        if not topic or not isinstance(topic, str):
            raise ValueError("topic –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        if not isinstance(content_data, dict):
            raise ValueError("content_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

        if "theme" in content_data and content_data["theme"] == "tragic":
            prompt_template = self.config['CONTENT']['tragic_text']['prompt_template']
            temperature = self.config['CONTENT']['tragic_text']['temperature']
            max_tokens = self.config['CONTENT']['tragic_text']['max_length']
        else:
            prompt_template = self.config['CONTENT']['text']['prompt_template']
            temperature = self.config['CONTENT']['text']['temperature']
            max_tokens = self.config['CONTENT']['text']['max_length']

        prompt = prompt_template.format(topic=topic)
        text = self.request_openai(prompt, max_tokens, temperature)
        if text:
            self.logger.info(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {text[:50]}...")
            return text
        else:
            self.logger.warning("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞.")
            return ""

    def generate_sarcastic_comment(self, text, content_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
        if not self.config['SARCASM']['enabled']:
            self.logger.info("üîï –°–∞—Ä–∫–∞–∑–º –æ—Ç–∫–ª—é—á—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return ""
        if not text or not isinstance(text, str):
            raise ValueError("text –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        if not isinstance(content_data, dict):
            raise ValueError("content_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

        if "theme" in content_data and content_data["theme"] == "tragic":
            prompt_template = self.config['SARCASM'].get('tragic_comment_prompt',
                                                         self.config['SARCASM']['comment_prompt'])
            temperature = self.config['SARCASM'].get('tragic_comment_temperature', 0.8)
        else:
            prompt_template = self.config['SARCASM']['comment_prompt']
            temperature = self.config['SARCASM'].get('comment_temperature', 0.8)

        prompt = prompt_template.format(text=text)
        comment = self.request_openai(prompt, self.config['SARCASM']['max_tokens_comment'], temperature)
        if comment:
            self.logger.info(f"‚úÖ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
            return comment
        else:
            self.logger.warning("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
            return ""

    def generate_interactive_poll(self, text, content_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å."""
        if not self.config['SARCASM']['enabled']:
            self.logger.info("üîï –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å –æ—Ç–∫–ª—é—á—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return {}
        if not text or not isinstance(text, str):
            raise ValueError("text –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        if not isinstance(content_data, dict):
            raise ValueError("content_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

        if "theme" in content_data and content_data["theme"] == "tragic":
            prompt_template = self.config['SARCASM'].get('tragic_question_prompt',
                                                         self.config['SARCASM']['question_prompt'])
            temperature = self.config['SARCASM'].get('tragic_poll_temperature', 0.9)
        else:
            prompt_template = self.config['SARCASM']['question_prompt']
            temperature = self.config['SARCASM'].get('poll_temperature', 0.9)

        prompt = prompt_template.format(text=text)
        poll_text = self.request_openai(prompt, self.config['SARCASM']['max_tokens_poll'], temperature)
        self.logger.info(f"üõë –û—Ç–≤–µ—Ç OpenAI –¥–ª—è –æ–ø—Ä–æ—Å–∞: {poll_text}")
        try:
            question_match = re.search(r"\[QUESTION\]:\s*(.+)", poll_text)
            option1_match = re.search(r"\[OPTION1\]:\s*(.+)", poll_text)
            option2_match = re.search(r"\[OPTION2\]:\s*(.+)", poll_text)
            option3_match = re.search(r"\[OPTION3\]:\s*(.+)", poll_text)
            if all([question_match, option1_match, option2_match, option3_match]):
                poll_data = {
                    "question": question_match.group(1).strip(),
                    "options": [
                        option1_match.group(1).strip(),
                        option2_match.group(1).strip(),
                        option3_match.group(1).strip()
                    ]
                }
                self.logger.info(f"‚úÖ –û–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {poll_data}")
                return poll_data
            else:
                self.logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞ –æ—Ç OpenAI.")
                return {}
        except Exception as e:
            handle_error("Sarcasm Poll Generation Error", str(e))
            return {}

    def save_to_generated_content(self, stage, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        if not stage or not isinstance(stage, str):
            raise ValueError("stage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        if not isinstance(data, dict):
            raise ValueError("data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

        try:
            folder = os.path.dirname(self.content_output_path) or "."
            if not os.path.exists(folder):
                os.makedirs(folder)
                self.logger.info(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {folder}")
            if os.path.exists(self.content_output_path):
                with open(self.content_output_path, 'r', encoding='utf-8') as file:
                    result_data = json.load(file)
            else:
                result_data = {}
            result_data["timestamp"] = datetime.utcnow().isoformat()
            result_data[stage] = data
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump(result_data, file, ensure_ascii=False, indent=4)
            self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ {stage}")
        except Exception as e:
            handle_error("Save to Generated Content Error", str(e))

    def critique_content(self, content):
        """–ö—Ä–∏—Ç–∏–∫—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é OpenAI."""
        if not content or not isinstance(content, str):
            raise ValueError("content –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        try:
            prompt_template = self.config.get('CONTENT.critique.prompt_template')
            if not prompt_template:
                raise ValueError("prompt_template –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")
            prompt = prompt_template.format(content=content)
            critique = self.request_openai(prompt, self.config.get('CONTENT.critique.max_tokens', 200),
                                          self.temperature)
            self.logger.info("‚úÖ –ö—Ä–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return critique
        except ValueError as ve:
            handle_error("Critique Error", str(ve))
        except Exception as e:
            handle_error("Critique Error", str(e))
        return "–ö—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π."

    def analyze_topic_generation(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        try:
            feedback_path = self.config.get('FILE_PATHS.feedback_file', 'data/feedback.json')
            positive_feedback_topics = []
            if os.path.exists(feedback_path):
                with open(feedback_path, 'r', encoding='utf-8') as file:
                    feedback_data = json.load(file)
                    positive_feedback_topics = [
                        entry['topic'] for entry in feedback_data if
                        entry.get('rating', 0) >= self.config.get('METRICS.success_threshold', 8)
                    ]
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(positive_feedback_topics)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ–º –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
            archive_folder = self.config.get('FILE_PATHS.archive_folder', 'data/archive/')
            successful_topics = []
            if os.path.exists(archive_folder):
                for filename in os.listdir(archive_folder):
                    if filename.endswith('.json'):
                        with open(os.path.join(archive_folder, filename), 'r', encoding='utf-8') as file:
                            archive_data = json.load(file)
                            if archive_data.get('success', False):
                                successful_topics.append(archive_data.get('topic', ''))
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(successful_topics)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–∞.")
            valid_focus_areas = self.get_valid_focus_areas()
            combined_topics = list(set(positive_feedback_topics + successful_topics + valid_focus_areas))
            self.logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º: {combined_topics}")
            return combined_topics
        except Exception as e:
            handle_error("Topic Analysis Error", str(e))
            return []

    def get_valid_focus_areas(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–∫—É—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏."""
        try:
            tracker_file = self.config.get('FILE_PATHS.focus_tracker', 'data/focus_tracker.json')
            focus_areas = self.config.get('CONTENT.topic.focus_areas', [])
            if not isinstance(focus_areas, list):
                raise ValueError("focus_areas –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            if os.path.exists(tracker_file):
                with open(tracker_file, 'r', encoding='utf-8') as file:
                    focus_tracker = json.load(file)
                excluded_foci = focus_tracker[:10]
            else:
                excluded_foci = []
            valid_focus_areas = [focus for focus in focus_areas if focus not in excluded_foci]
            self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–∫—É—Å—ã: {valid_focus_areas}")
            return valid_focus_areas
        except ValueError as ve:
            handle_error("Focus Area Filtering Error", str(ve))
        except Exception as e:
            handle_error("Focus Area Filtering Error", str(e))
        return []

    def prioritize_focus_from_feedback_and_archive(self, valid_focus_areas):
        """–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ–∫—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –∞—Ä—Ö–∏–≤–∞."""
        if not isinstance(valid_focus_areas, list):
            raise ValueError("valid_focus_areas –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        try:
            feedback_path = self.config.get('FILE_PATHS.feedback_file', 'data/feedback.json')
            feedback_foci = []
            if os.path.exists(feedback_path):
                with open(feedback_path, 'r', encoding='utf-8') as file:
                    feedback_data = json.load(file)
                    feedback_foci = [
                        entry['topic'] for entry in feedback_data if
                        entry.get('rating', 0) >= self.config.get('METRICS.success_threshold', 8)
                    ]
            archive_folder = self.config.get('FILE_PATHS.archive_folder', 'data/archive/')
            archive_foci = []
            if os.path.exists(archive_folder):
                for filename in os.listdir(archive_folder):
                    if filename.endswith('.json'):
                        with open(os.path.join(archive_folder, filename), 'r', encoding='utf-8') as file:
                            archive_data = json.load(file)
                            if archive_data.get('success', False):
                                archive_foci.append(archive_data.get('topic', ''))
            for focus in feedback_foci + archive_foci:
                if focus in valid_focus_areas:
                    self.logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ñ–æ–∫—É—Å: {focus}")
                    return focus
            if valid_focus_areas:
                self.logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ–∫—É—Å: {valid_focus_areas[0]}")
                return valid_focus_areas[0]
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return None
        except ValueError as ve:
            handle_error("Focus Prioritization Error", str(ve))
        except Exception as e:
            handle_error("Focus Prioritization Error", str(e))
        return None

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        try:
            download_config_public()
            with open(config.get("FILE_PATHS.config_public"), "r", encoding="utf-8") as file:
                config_public = json.load(file)
            empty_folders = config_public.get("empty", [])
            if not empty_folders:
                self.logger.info("‚úÖ –ù–µ—Ç –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")
                return

            self.adapt_prompts()
            self.clear_generated_content()

            valid_topics = self.analyze_topic_generation()
            chosen_focus = self.prioritize_focus_from_feedback_and_archive(valid_topics)
            if chosen_focus:
                self.logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ–∫—É—Å: {chosen_focus}")
            topic = self.generate_topic()
            if not topic:
                self.logger.error("‚ùå –¢–µ–º–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                return
            content_data = {"topic": topic}
            text = self.generate_text(topic["full_topic"], content_data)
            critique = self.critique_content(text)
            self.save_to_generated_content("critique", {"critique": critique})

            sarcastic_comment = self.generate_sarcastic_comment(text, content_data)
            sarcastic_poll = self.generate_interactive_poll(text, content_data)
            content_dict = {
                "topic": topic,
                "content": text,
                "sarcasm": {
                    "comment": sarcastic_comment,
                    "poll": sarcastic_poll
                }
            }
            target_folder = empty_folders[0]
            save_to_b2(target_folder, content_dict)

            with open(os.path.join("config", "config_gen.json"), "r", encoding="utf-8") as gen_file:
                config_gen_content = json.load(gen_file)
                generation_id = config_gen_content["generation_id"]

            create_and_upload_image(target_folder, generation_id)
            run_generate_media()
            self.logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            handle_error("Run Error", str(e))

if __name__ == "__main__":
    generator = ContentGenerator()
    generator.run()