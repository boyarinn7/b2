import os
import json
import logging
import subprocess
import re
import sys
import time # –ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –°—Ü–µ–Ω–∞—Ä–∏–∏ 2
import argparse # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ --zero-delay
import io # –ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è save_to_b2 –≤ generate_content

from modules.utils import is_folder_empty, ensure_directory_exists, generate_file_id # –î–æ–±–∞–≤–ª—è–µ–º generate_file_id
from modules.api_clients import get_b2_client
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.config_manager import ConfigManager
# –ò–º–ø–æ—Ä—Ç boto3 –∏ –µ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å B2
try:
    import boto3
    from botocore.exceptions import ClientError, NoCredentialsError
except ImportError:
    print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ boto3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: pip install boto3")
    sys.exit(1)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
config = ConfigManager()
logger = get_logger("b2_storage_manager")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
B2_BUCKET_NAME = config.get('API_KEYS.b2.bucket_name', 'boyarinnbotbucket')
CONFIG_PUBLIC_LOCAL_PATH = "config/config_public.json"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
CONFIG_PUBLIC_REMOTE_PATH = "config/config_public.json"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ B2
FILE_EXTENSIONS = ['.json', '.png', '.mp4']
FOLDERS = [
    config.get('FILE_PATHS.folder_444', '444/'),
    config.get('FILE_PATHS.folder_555', '555/'),
    config.get('FILE_PATHS.folder_666', '666/')
]
ARCHIVE_FOLDER = config.get('FILE_PATHS.archive_folder', 'data/archive/')
FILE_NAME_PATTERN = re.compile(r"^\d{8}-\d{4}\.\w+$")

# –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
GENERATE_CONTENT_SCRIPT = os.path.join(config.get('FILE_PATHS.scripts_folder', 'scripts'), "generate_content.py")
SCRIPTS_FOLDER = config.get('FILE_PATHS.scripts_folder', 'scripts')

def download_file_from_b2(client, remote_path, local_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ B2 –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    try:
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ B2: {remote_path} -> {local_path}")
        ensure_directory_exists(os.path.dirname(local_path))
        client.download_file(B2_BUCKET_NAME, remote_path, local_path)
        logger.info(f"‚úÖ –§–∞–π–ª '{remote_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {local_path}")
    except Exception as e:
        handle_error("B2 Download Error", str(e), e)

def load_config_public(s3):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç config_public.json –∏–∑ B2."""
    try:
        local_path = CONFIG_PUBLIC_LOCAL_PATH
        download_file_from_b2(s3, CONFIG_PUBLIC_REMOTE_PATH, local_path)
        with open(local_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return data
    except Exception as e:
        logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {"processing_lock": False, "empty": [], "generation_id": []}

def save_config_public(s3, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç config_public.json –≤ B2."""
    try:
        os.makedirs(os.path.dirname(CONFIG_PUBLIC_LOCAL_PATH), exist_ok=True)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
        s3.upload_file(CONFIG_PUBLIC_LOCAL_PATH, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH)
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
        logger.info(f"üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {CONFIG_PUBLIC_LOCAL_PATH} —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        handle_error("Save Config Public Error", str(e), e)

def list_files_in_folder(s3, folder_prefix):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ (–∫—Ä–æ–º–µ placeholder)."""
    try:
        response = s3.list_objects_v2(Bucket=B2_BUCKET_NAME, Prefix=folder_prefix)
        return [
            obj['Key'] for obj in response.get('Contents', [])
            if obj['Key'] != folder_prefix and not obj['Key'].endswith('.bzEmpty')
               and FILE_NAME_PATTERN.match(os.path.basename(obj['Key']))
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return []

def get_ready_groups(files):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø —Å —Ñ–∞–π–ª–∞–º–∏ –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π."""
    groups = {}
    for file_key in files:
        base_name = os.path.basename(file_key)
        if FILE_NAME_PATTERN.match(base_name):
            group_id = base_name.rsplit('.', 1)[0]
            groups.setdefault(group_id, []).append(base_name)
    return [
        group_id for group_id, file_list in groups.items()
        if all(f"{group_id}{ext}" in file_list for ext in FILE_EXTENSIONS)
    ]

def move_group(s3, src_folder, dst_folder, group_id):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –≥—Ä—É–ø–ø—ã –∏–∑ src_folder –≤ dst_folder."""
    for ext in FILE_EXTENSIONS:
        src_key = f"{src_folder}{group_id}{ext}"
        dst_key = f"{dst_folder}{group_id}{ext}"
        try:
            s3.head_object(Bucket=B2_BUCKET_NAME, Key=src_key)
            s3.copy_object(
                Bucket=B2_BUCKET_NAME,
                CopySource={"Bucket": B2_BUCKET_NAME, "Key": src_key},
                Key=dst_key
            )
            s3.delete_object(Bucket=B2_BUCKET_NAME, Key=src_key)
            logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {src_key} -> {dst_key}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {src_key}: {e}")

def process_folders(s3, folders):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤ –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏."""
    empty_folders = set()
    changes_made = True

    while changes_made:
        changes_made = False
        for i in range(len(folders) - 1, 0, -1):
            src_folder = folders[i]
            dst_folder = folders[i - 1]

            if src_folder in empty_folders:
                continue

            src_files = list_files_in_folder(s3, src_folder)
            dst_files = list_files_in_folder(s3, dst_folder)

            src_ready = get_ready_groups(src_files)
            dst_ready = get_ready_groups(dst_files)

            for group_id in src_ready:
                if len(dst_ready) < 1:
                    move_group(s3, src_folder, dst_folder, group_id)
                    changes_made = True

            if not src_ready:
                empty_folders.add(src_folder)

    if is_folder_empty(s3, B2_BUCKET_NAME, folders[-1]):
        logger.info("‚ö†Ô∏è –ü–∞–ø–∫–∞ 666/ –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        subprocess.run([sys.executable, GENERATE_CONTENT_SCRIPT], check=True)

    config_data = load_config_public(s3)
    config_data["empty"] = list(empty_folders)
    save_config_public(s3, config_data)
    logger.info(f"üìÇ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏: {config_data.get('empty')}")

def handle_publish(s3, config_data):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤ –ø–æ generation_id."""
    generation_ids = config_data.get("generation_id", [])

    if not generation_ids:
        logger.info("üìÇ –ù–µ—Ç generation_id –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.")
        return

    if isinstance(generation_ids, str):
        generation_ids = [generation_ids]

    archived_ids = []

    for generation_id in generation_ids:
        logger.info(f"üîÑ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É: {generation_id}")

        files_exist = any(list_files_in_folder(s3, folder) for folder in FOLDERS)
        if not files_exist:
            logger.error(f"‚ùå –§–∞–π–ª—ã –≥—Ä—É–ø–ø—ã {generation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            continue

        success = True
        for folder in FOLDERS:
            for ext in FILE_EXTENSIONS:
                src_key = f"{folder}{generation_id}{ext}"
                dst_key = f"{ARCHIVE_FOLDER}{generation_id}{ext}"
                try:
                    s3.head_object(Bucket=B2_BUCKET_NAME, Key=src_key)
                    s3.copy_object(
                        Bucket=B2_BUCKET_NAME,
                        CopySource={"Bucket": B2_BUCKET_NAME, "Key": src_key},
                        Key=dst_key
                    )
                    s3.delete_object(Bucket=B2_BUCKET_NAME, Key=src_key)
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {src_key} -> {dst_key}")
                except Exception as e:
                    if '404' not in str(e):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ {src_key}: {e}")
                        success = False
        if success:
            archived_ids.append(generation_id)

    if archived_ids:
        config_data["generation_id"] = [gid for gid in generation_ids if gid not in archived_ids]
        if not config_data["generation_id"]:
            del config_data["generation_id"]
        save_config_public(s3, config_data)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã: {archived_ids}")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É.")

def check_midjourney_results(b2_client):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ midjourney_results –≤ config_public.json."""
    try:
        download_file_from_b2(b2_client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_data = json.load(file)
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
        return config_data.get("midjourney_results", None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ midjourney_results: {e}")
        return None


def main():
    # --- –ù–∞—á–∞–ª–æ –®–∞–≥–∞ 4.1.2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ---
    parser = argparse.ArgumentParser(description='Manage B2 storage and content generation workflow.')
    parser.add_argument('--zero-delay', action='store_true', default=False,
                        help='Skip the 10-minute delay when checking Midjourney task.')
    args = parser.parse_args()
    zero_delay_flag = args.zero_delay
    logger.info(f"–§–ª–∞–≥ --zero-delay —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {zero_delay_flag}")
    # --- –ö–æ–Ω–µ—Ü –®–∞–≥–∞ 4.1.2 ---
    # --- –ù–∞—á–∞–ª–æ –®–∞–≥–∞ 4.1.3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞/–ª–∏–º–∏—Ç–∞ ---
    tasks_processed = 0
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'config' (—ç–∫–∑–µ–º–ø–ª—è—Ä ConfigManager) –¥–æ—Å—Ç—É–ø–µ–Ω –∑–¥–µ—Å—å
    max_tasks_per_run = config.get('WORKFLOW.max_tasks_per_run', 1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥–∞ WORKFLOW
    logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –∑–∞ –∑–∞–ø—É—Å–∫: {max_tasks_per_run}")
    # --- –ö–æ–Ω–µ—Ü –®–∞–≥–∞ 4.1.3 ---
    # --- –ù–∞—á–∞–ª–æ –®–∞–≥–æ–≤ 4.1.4 –∏ 4.1.5: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ –ó–∞–≥—Ä—É–∑–∫–∞ –ö–æ–Ω—Ñ–∏–≥–æ–≤ ---
    b2_client = None
    config_public = {}
    config_gen = {}
    config_mj = {}
    lock_acquired = False  # –§–ª–∞–≥, —á—Ç–æ –º—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É

    # --- –û–ø—Ä–µ–¥–µ–ª–∏–º –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥–∞–º ---
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ B2_BUCKET_NAME –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–∏–∑ os.getenv –∏–ª–∏ config)
    bucket_name = config.get('API_KEYS.b2.bucket_name', 'boyarinnbotbucket')  # –ü—Ä–∏–º–µ—Ä
    config_public_remote_path = "config/config_public.json"
    config_gen_remote_path = "config/config_gen.json"
    config_mj_remote_path = "config/config_midjourney.json"

    # --- –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è ---
    config_public_local_path = "config_public_local.json"  # –í —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
    config_gen_local_path = "config_gen_local.json"
    config_mj_local_path = "config_mj_local.json"

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON –∏–∑ B2 (–ø–æ–º–µ—Å—Ç–∏—Ç–µ –µ–µ –≤—ã—à–µ main() –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ) ---
    def load_b2_json(client, bucket, remote_path, local_path, default_value={}):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –∏–∑ B2, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç default_value –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
        try:
            logger.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ {remote_path} –∏–∑ B2 –≤ {local_path}")
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å—Ç—å (–µ—Å–ª–∏ –ø—É—Ç—å —Å–ª–æ–∂–Ω—ã–π)
            # os.makedirs(os.path.dirname(local_path), exist_ok=True) # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
            client.download_file(bucket, remote_path, local_path)
            with open(local_path, 'r', encoding='utf-8') as f:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π JSON
                if os.path.getsize(local_path) > 0:
                    content = json.load(f)
                else:
                    logger.warning(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_path} –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                    content = default_value
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω {remote_path} –∏–∑ B2.")
            return content
        except client.exceptions.NoSuchKey:
            logger.warning(f"{remote_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ B2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return default_value
        except json.JSONDecodeError as json_err:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ {local_path} ({remote_path}): {json_err}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return default_value
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {remote_path}: {e}")
            # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –∫—Ä–∏—Ç–∏—á–µ–Ω
            # raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {remote_path}") from e
            return default_value  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å —Å—Ä–∞–∑—É
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(local_path):
                try:
                    os.remove(local_path)
                except OSError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_path}")

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –≤ B2 (–ø–æ–º–µ—Å—Ç–∏—Ç–µ –µ–µ –≤—ã—à–µ main() –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ) ---
    def save_b2_json(client, bucket, remote_path, local_path, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å data –∫–∞–∫ JSON –≤ B2."""
        try:
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ {remote_path} –≤ B2 —á–µ—Ä–µ–∑ {local_path}")
            # os.makedirs(os.path.dirname(local_path), exist_ok=True) # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ
            with open(local_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            client.upload_file(local_path, bucket, remote_path)
            logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {remote_path} –≤ B2.")
            return True
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {remote_path}: {e}")
            # raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {remote_path}") from e
            return False
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(local_path):
                try:
                    os.remove(local_path)
                except OSError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_path}")

    # --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ try...finally –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ---
    try:
        # –ü–æ–ª—É—á–∞–µ–º B2 –∫–ª–∏–µ–Ω—Ç
        b2_client = get_b2_client()
        if not b2_client:
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å B2 –∫–ª–∏–µ–Ω—Ç.")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ {config_public_remote_path}...")
        config_public = load_b2_json(b2_client, bucket_name, config_public_remote_path, config_public_local_path,
                                     {"processing_lock": False})

        if config_public.get("processing_lock", False):
            logger.warning("üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (processing_lock=True). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return  # –ò–ª–∏ sys.exit(0)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        config_public["processing_lock"] = True
        if save_b2_json(b2_client, bucket_name, config_public_remote_path, config_public_local_path, config_public):
            logger.info("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (processing_lock=True) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ B2.")
            lock_acquired = True  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ B2. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return  # –ò–ª–∏ sys.exit(1)

        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ (—É–∂–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞)
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        config_gen = load_b2_json(b2_client, bucket_name, config_gen_remote_path, config_gen_local_path,
                                  {"generation_id": None})
        config_mj = load_b2_json(b2_client, bucket_name, config_mj_remote_path, config_mj_local_path,
                                 {"midjourney_task": None, "midjourney_results": {}, "generation": False})

        # --- –ó–¥–µ—Å—å –Ω–∞—á–Ω–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª while tasks_processed < max_tasks_per_run: ---
        logger.info("--- –ù–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---")
        # ... (–ö–æ–¥ –¥–ª—è –®–∞–≥–∞ 4.2 –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω —Å—é–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ) ...
        # --- –ù–∞—á–∞–ª–æ –®–∞–≥–∞ 4.2: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏ –ª–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
        while tasks_processed < max_tasks_per_run:
            logger.info(f"--- –ò—Ç–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ #{tasks_processed + 1} / {max_tasks_per_run} ---")

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
            logger.debug("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ B2...")
            config_public = load_b2_json(b2_client, bucket_name, config_public_remote_path, config_public_local_path,
                                         {"processing_lock": True})  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º public
            config_gen = load_b2_json(b2_client, bucket_name, config_gen_remote_path, config_gen_local_path,
                                      {"generation_id": None})  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º gen
            config_mj = load_b2_json(b2_client, bucket_name, config_mj_remote_path, config_mj_local_path,
                                     {"midjourney_task": None, "midjourney_results": {},
                                      "generation": False})  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º mj
            logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: config_gen={config_gen}, config_mj={config_mj}")

            action_taken_in_iteration = False  # –§–ª–∞–≥, —á—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç–æ

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!) ---

            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ MidJourney (–µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞)
            if config_mj.get('midjourney_task'):
                action_taken_in_iteration = True
                task_id = config_mj['midjourney_task']
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ Midjourney: {task_id}. –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")

                if not zero_delay_flag:
                    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ Midjourney...")
                    time.sleep(600)  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
                    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

                try:
                    logger.info("–ó–∞–ø—É—Å–∫ fetch_media.py...")
                    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ fetch_media.py –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    fetch_script_path = os.path.join(SCRIPTS_FOLDER, "Workspace_media.py") # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
                    subprocess.run([sys.executable, fetch_script_path], check=True, timeout=120)  # –¢–∞–π–º–∞—É—Ç 2 –º–∏–Ω
                    logger.info("fetch_media.py —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

                    # –°—Ä–∞–∑—É –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú config_mj, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç fetch_media
                    logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ config_midjourney.json –ø–æ—Å–ª–µ fetch_media...")
                    config_mj = load_b2_json(b2_client, bucket_name, config_mj_remote_path, config_mj_local_path,
                                             config_mj)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç

                    if config_mj.get('midjourney_results') and config_mj['midjourney_results'].get('image_urls'):
                        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Midjourney –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏! –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞.")
                        # –õ–æ–≥–∏–∫–∞ –Ω–∏–∂–µ (elif –¥–ª—è scenario 3) –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ –Ω–∞ –°–õ–ï–î–£–Æ–©–ï–ô –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —É–±—Ä–∞—Ç—å break
                        # –ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –≤—ã–∑–æ–≤–∞ generate_media –∑–¥–µ—Å—å,
                        # –Ω–æ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–∏–∫–∏.
                        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ—Å—å —Å–ª–µ–¥—É—é—â–∏–º elif.
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ while
                    else:
                        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Midjourney –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while, —Ç.–∫. –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –¥–∞–ª—å—à–µ (–≤ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ)

                except subprocess.CalledProcessError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetch_media.py: {e}")
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                except subprocess.TimeoutExpired:
                    logger.error("–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetch_media.py.")
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: MidJourney –ì–æ—Ç–æ–≤–æ (–µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
            elif config_mj.get('midjourney_results') and config_mj['midjourney_results'].get('image_urls'):
                action_taken_in_iteration = True
                current_generation_id = config_gen.get("generation_id")
                if not current_generation_id:
                    logger.error(
                        "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Midjourney, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ generation_id –≤ config_gen.json!")
                    break  # –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º
                logger.info(
                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Midjourney –¥–ª—è ID {current_generation_id}. –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞.")
                try:
                    logger.info(f"–ó–∞–ø—É—Å–∫ generate_media.py –¥–ª—è ID: {current_generation_id}...")
                    media_script_path = os.path.join(SCRIPTS_FOLDER, "generate_media.py")
                    subprocess.run([sys.executable, media_script_path, '--generation_id', current_generation_id],
                                   check=True, timeout=600)  # –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω
                    logger.info(
                        f"generate_media.py —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ID: {current_generation_id} (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ).")
                    tasks_processed += 1  # –°—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
                    # continue –Ω–µ –Ω—É–∂–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–µ–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞
                except subprocess.CalledProcessError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è generate_media.py (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ): {e}")
                    break  # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                except subprocess.TimeoutExpired:
                    logger.error("–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è generate_media.py (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ).")
                    break  # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

            # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ú–µ–¥–∏–∞ (–ò–Ω–∏—Ü–∏–∞—Ü–∏—è) (–µ—Å—Ç—å —Ñ–ª–∞–≥ generation: true)
            elif config_mj.get('generation') is True:
                action_taken_in_iteration = True
                current_generation_id = config_gen.get("generation_id")
                if not current_generation_id:
                    logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ generation:true, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ generation_id –≤ config_gen.json!")
                    break  # –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º
                logger.info(
                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ generation:true –¥–ª—è ID {current_generation_id}. –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ Midjourney.")
                try:
                    logger.info(f"–ó–∞–ø—É—Å–∫ generate_media.py –¥–ª—è ID: {current_generation_id}...")
                    media_script_path = os.path.join(SCRIPTS_FOLDER, "generate_media.py")
                    subprocess.run([sys.executable, media_script_path, '--generation_id', current_generation_id],
                                   check=True, timeout=120)  # –¢–∞–π–º–∞—É—Ç 2 –º–∏–Ω
                    logger.info(
                        f"generate_media.py —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ID: {current_generation_id} (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è Midjourney).")
                    # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º tasks_processed –∑–¥–µ—Å—å, —Ç.–∫. —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –º–µ–¥–∏–∞-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    # –ù–æ —Ä–∞–±–æ—Ç–∞ –Ω–∞ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–¥–µ–ª–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å task_id
                    continue
                except subprocess.CalledProcessError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è generate_media.py (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è Midjourney): {e}")
                    break  # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                except subprocess.TimeoutExpired:
                    logger.error("–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è generate_media.py (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è Midjourney).")
                    break  # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –£–±–æ—Ä–∫–∞ / –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á Midjourney)
            else:
                action_taken_in_iteration = True
                logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á Midjourney. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –£–±–æ—Ä–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ 666/...")

                # 1. –£–±–æ—Ä–∫–∞ - –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º ID –∏–∑ config_public
                logger.info("–ó–∞–ø—É—Å–∫ handle_publish (–∞—Ä—Ö–∏–≤–∞—Ü–∏—è)...")
                # –ü–µ—Ä–µ–¥–∞–µ–º –ö–û–ü–ò–Æ —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ–±—ã handle_publish –Ω–µ –∏–∑–º–µ–Ω–∏–ª –Ω–∞—à —Ç–µ–∫—É—â–∏–π config_public
                handle_publish(b2_client, config_public.copy())
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config_public –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ handle_publish –µ–≥–æ –∏–∑–º–µ–Ω–∏–ª (—Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ –¢–ó)
                config_public = load_b2_json(b2_client, bucket_name, config_public_remote_path,
                                             config_public_local_path, config_public)

                # 2. –£–±–æ—Ä–∫–∞ - –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫–∏
                logger.info("–ó–∞–ø—É—Å–∫ process_folders (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)...")
                process_folders(b2_client, FOLDERS)  # FOLDERS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞

                # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É 666/
                logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–ø–∫–∏ 666/...")
                # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ is_folder_empty –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
                # ... –ø–æ—Å–ª–µ process_folders ...
                logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ì–û–¢–û–í–´–• –ì–†–£–ü–ü –≤ –ø–∞–ø–∫–µ 666/...")
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ 666/
                files_in_666 = list_files_in_folder(b2_client, FOLDERS[-1])  # FOLDERS[-1] —ç—Ç–æ '666/'
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø
                ready_groups_in_666 = get_ready_groups(files_in_666)

                # –ù–û–í–û–ï –£–°–õ–û–í–ò–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ï–°–õ–ò –ù–ï–¢ –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø
                if not ready_groups_in_666:  # <<<--- –ó–ê–ú–ï–ù–ê –£–°–õ–û–í–ò–Ø
                    logger.info(
                        f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ 666/ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø ({len(files_in_666)} —Ñ–∞–π–ª–æ–≤ –≤—Å–µ–≥–æ). –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                    # ... –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∏ –≤—ã–∑–æ–≤–∞ generate_content ... (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
                else:
                    logger.info(
                        f"–í –ø–∞–ø–∫–µ 666/ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã ({len(ready_groups_in_666)} —à—Ç.). –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞.")
                    break  # –ï—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                    # –í–ù–£–¢–†–ò if is_folder_empty(b2_client, bucket_name, FOLDERS[-1]):
                    logger.info("‚ö†Ô∏è –ü–∞–ø–∫–∞ 666/ –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                    try:
                        # --- –ù–∞—á–∞–ª–æ: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –≤—ã–∑–æ–≤ ---
                        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ù–û–í–´–ô ID
                        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ generate_file_id –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ utils
                        new_id = generate_file_id()
                        if not new_id:
                            raise ValueError("–§—É–Ω–∫—Ü–∏—è generate_file_id –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ ID")
                        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ID: {new_id}")

                        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ù–û–í–´–ô ID –≤ config_gen.json
                        config_gen["generation_id"] = new_id
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é save_b2_json
                        if not save_b2_json(b2_client, bucket_name, config_gen_remote_path, config_gen_local_path,
                                            config_gen):
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ - –∑–∞–¥–∞—á–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è
                            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π ID {new_id} –≤ {config_gen_remote_path}")
                        logger.info(f"–ù–æ–≤—ã–π ID {new_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {config_gen_remote_path}")

                        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º generate_content.py —Å –ù–û–í–´–ú ID
                        logger.info(f"–ó–∞–ø—É—Å–∫ generate_content.py –¥–ª—è ID: {new_id}...")
                        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å GENERATE_CONTENT_SCRIPT –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                        subprocess.run([sys.executable, GENERATE_CONTENT_SCRIPT, '--generation_id', new_id], check=True,
                                       timeout=600)  # –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω
                        logger.info(f"generate_content.py —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ID: {new_id}.")
                        tasks_processed += 1  # –°—á–∏—Ç–∞–µ–º —ç—Ç—É –∑–∞–¥–∞—á—É (–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞) –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
                        # --- –ö–æ–Ω–µ—Ü: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –≤—ã–∑–æ–≤ ---

                    except subprocess.CalledProcessError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è generate_content.py: {e}")
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    except subprocess.TimeoutExpired:
                        logger.error("–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è generate_content.py.")
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    except Exception as gen_err:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ ID, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ config_gen –∏–ª–∏ –≤—ã–∑–æ–≤–µ generate_content: {gen_err}")
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ù–û–í–´–ô ID
                        new_id = generate_file_id()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞/–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –±–µ–∑ .json
                        if not new_id:
                            raise ValueError("–§—É–Ω–∫—Ü–∏—è generate_file_id –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ ID")
                        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ID: {new_id}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ù–û–í–´–ô ID –≤ config_gen.json
                        config_gen["generation_id"] = new_id
                        if not save_b2_json(b2_client, bucket_name, config_gen_remote_path, config_gen_local_path,
                                            config_gen):
                            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π ID {new_id} –≤ {config_gen_remote_path}")
                        logger.info(f"–ù–æ–≤—ã–π ID {new_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {config_gen_remote_path}")

                        # –ó–∞–ø—É—Å–∫–∞–µ–º generate_content.py —Å –ù–û–í–´–ú ID
                        logger.info(f"–ó–∞–ø—É—Å–∫ generate_content.py –¥–ª—è ID: {new_id}...")
                        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å GENERATE_CONTENT_SCRIPT –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                        subprocess.run([sys.executable, GENERATE_CONTENT_SCRIPT, '--generation_id', new_id], check=True,
                                       timeout=600)  # –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω
                        logger.info(f"generate_content.py —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ID: {new_id}.")
                        tasks_processed += 1  # –°—á–∏—Ç–∞–µ–º —ç—Ç—É –∑–∞–¥–∞—á—É (–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞) –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π

                    except subprocess.CalledProcessError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è generate_content.py: {e}")
                        break  # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    except subprocess.TimeoutExpired:
                        logger.error("–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è generate_content.py.")
                        break  # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    except Exception as gen_err:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ ID –∏–ª–∏ –≤—ã–∑–æ–≤–µ generate_content: {gen_err}")
                        break  # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    else:
                        logger.info("–ü–∞–ø–∫–∞ 666/ –Ω–µ –ø—É—Å—Ç–∞ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á Midjourney. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞.")
                    break  # –ü–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞, –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç - –≤—ã—Ö–æ–¥–∏–º –∏–∑ while

            # –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ if/elif/else –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∑–∞–¥–∞—á –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            if tasks_processed >= max_tasks_per_run:
                logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–¥–∞—á ({max_tasks_per_run}) –∑–∞ —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫.")
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å B2/API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # time.sleep(5)

        # --- –ö–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ while ---
        logger.info(f"--- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {tasks_processed} ---")

        # --- –ù–∞—á–∞–ª–æ –®–∞–≥–∞ 4.4: –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞) ---
        if tasks_processed > 0:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–ª–Ω–∞—è –∑–∞–¥–∞—á–∞
            logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤...")
            try:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                config_public = load_b2_json(b2_client, bucket_name, config_public_remote_path,
                                             config_public_local_path, config_public)
                config_gen = load_b2_json(b2_client, bucket_name, config_gen_remote_path, config_gen_local_path,
                                          config_gen)

                completed_id = config_gen.get("generation_id")
                if completed_id:
                    logger.info(f"–ü–µ—Ä–µ–Ω–æ—Å ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ '{completed_id}' –≤ config_public –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.")
                    # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ –≤ config_public (—Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
                    archive_list = config_public.get("generation_id", [])
                    if not isinstance(archive_list, list):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–∞–º –±—ã–ª–∞ —Å—Ç—Ä–æ–∫–∞
                        archive_list = []
                    if completed_id not in archive_list:
                        archive_list.append(completed_id)
                    config_public["generation_id"] = archive_list

                    # –û—á–∏—â–∞–µ–º config_gen
                    config_gen["generation_id"] = None
                    logger.info("–û—á–∏—Å—Ç–∫–∞ generation_id –≤ config_gen.")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –∫–æ–Ω—Ñ–∏–≥–∞
                    save_b2_json(b2_client, bucket_name, config_public_remote_path, config_public_local_path,
                                 config_public)
                    save_b2_json(b2_client, bucket_name, config_gen_remote_path, config_gen_local_path, config_gen)
                    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ config_public –∏ config_gen —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ B2.")
                else:
                    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω generation_id –≤ config_gen –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ config_public.")

            except Exception as final_save_err:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {final_save_err}")
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–Ω–∏–º–µ—Ç—Å—è –≤ finally

        # --- –ö–æ–Ω–µ—Ü –®–∞–≥–∞ 4.4 ---

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –ª–æ–≥–∏) –±—É–¥–µ—Ç –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞, –ø–µ—Ä–µ–¥ finally

        # --- –ö–æ–Ω–µ—Ü –®–∞–≥–∞ 4.2 ---

    except Exception as main_exec_err:
        # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –∑–¥–µ—Å—å)
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º –±–ª–æ–∫–µ: {main_exec_err}")
        # handle_error(...) –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–¥–µ—Å—å
        # –í–∞–∂–Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω—è—Ç—å –ª–æ–∫

    finally:
        # --- –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ---
        if lock_acquired:  # –°–Ω–∏–º–∞–µ–º –ª–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –µ–≥–æ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏
            logger.info("–°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (processing_lock=False)...")
            if not b2_client:
                b2_client = get_b2_client()  # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –µ—â–µ —Ä–∞–∑

            if b2_client:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏, —Ö–æ—Ç—è –∏—Ö –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ)
                config_public = load_b2_json(b2_client, bucket_name, config_public_remote_path,
                                             config_public_local_path,
                                             {"processing_lock": True})  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ª–æ–∫ –±—ã–ª
                config_public["processing_lock"] = False
                if save_b2_json(b2_client, bucket_name, config_public_remote_path, config_public_local_path,
                                config_public):
                    logger.info("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ –≤ B2.")
                else:
                    logger.error(
                        "‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–ù–Ø–¢–¨ –ë–õ–û–ö–ò–†–û–í–ö–£ –≤ B2! –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ.")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å B2 –∫–ª–∏–µ–Ω—Ç –≤ –±–ª–æ–∫–µ finally –¥–ª—è —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!")
        else:
            logger.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —ç—Ç–∏–º –∑–∞–ø—É—Å–∫–æ–º, —Å–Ω—è—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        logger.info("--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã b2_storage_manager.py ---")
    # --- –ö–æ–Ω–µ—Ü –®–∞–≥–æ–≤ 4.1.4 –∏ 4.1.5 ---




if __name__ == "__main__":
    main()