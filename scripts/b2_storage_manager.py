# --- –ù–∞—á–∞–ª–æ scripts/b2_storage_manager.py ---
print("--- SCRIPT START ---", flush=True) # –û—Å—Ç–∞–≤–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
import os
import json
import logging
import subprocess
import re
import sys
import time
import argparse
import io
from datetime import datetime, timezone, timedelta

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from modules.utils import is_folder_empty, ensure_directory_exists, generate_file_id, load_b2_json, \
        save_b2_json
    from modules.api_clients import get_b2_client
    from modules.logger import get_logger
    from modules.error_handler import handle_error
    from modules.config_manager import ConfigManager
except ModuleNotFoundError as import_err:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞: {import_err}")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç boto3 –∏ –µ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
try:
    import boto3
    from botocore.exceptions import ClientError, NoCredentialsError
except ImportError:
    print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ boto3.")
    sys.exit(1)

print("--- IMPORTS DONE ---", flush=True)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
try:
    config = ConfigManager()
    print("--- CONFIG MANAGER INIT DONE ---", flush=True)
    logger = get_logger("b2_storage_manager")
    print("--- LOGGER INIT DONE ---", flush=True)
    logger.info("Logger is now active.")
except Exception as init_err:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ConfigManager –∏–ª–∏ Logger: {init_err}", file=sys.stderr)
    sys.exit(1)


# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
B2_BUCKET_NAME = config.get('API_KEYS.b2.bucket_name', os.getenv('B2_BUCKET_NAME', 'default-bucket-name'))
CONFIG_PUBLIC_REMOTE_PATH = "config/config_public.json"
CONFIG_GEN_REMOTE_PATH = "config/config_gen.json"
CONFIG_MJ_REMOTE_PATH = "config/config_midjourney.json"

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
CONFIG_PUBLIC_LOCAL_PATH = "config_public_local_main.json"
CONFIG_GEN_LOCAL_PATH = "config_gen_local_main.json"
CONFIG_MJ_LOCAL_PATH = "config_mj_local_main.json"
CONFIG_MJ_LOCAL_CHECK_PATH = "config_mj_local_check.json"
CONFIG_MJ_LOCAL_TIMEOUT_PATH = "config_mj_local_timeout.json"
CONFIG_MJ_LOCAL_RESET_PATH = "config_mj_local_reset.json"

FILE_EXTENSIONS = ['.json', '.png', '.mp4']
FOLDERS = [
    config.get('FILE_PATHS.folder_444', '444/'),
    config.get('FILE_PATHS.folder_555', '555/'),
    config.get('FILE_PATHS.folder_666', '666/')
]
ARCHIVE_FOLDER = config.get('FILE_PATHS.archive_folder', 'archive/')
FILE_NAME_PATTERN = re.compile(r"^\d{8}-\d{4}$")

# –ü—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
SCRIPTS_FOLDER = config.get('FILE_PATHS.scripts_folder', 'scripts')
GENERATE_CONTENT_SCRIPT = os.path.join(SCRIPTS_FOLDER, "generate_content.py")
WORKSPACE_MEDIA_SCRIPT = os.path.join(SCRIPTS_FOLDER, "Workspace_media.py")
GENERATE_MEDIA_SCRIPT = os.path.join(SCRIPTS_FOLDER, "generate_media.py")

# –¢–∞–π–º–∞—É—Ç MJ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
MJ_TIMEOUT_SECONDS = int(config.get('WORKFLOW.mj_timeout_seconds', 5 * 60 * 60)) # 5 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ === (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def list_files_in_folder(s3, folder_prefix):
    try:
        response = s3.list_objects_v2(Bucket=B2_BUCKET_NAME, Prefix=folder_prefix)
        return [
            obj['Key'] for obj in response.get('Contents', [])
            if not obj['Key'].endswith('/') and not obj['Key'].endswith('.bzEmpty') and \
               FILE_NAME_PATTERN.match(os.path.splitext(os.path.basename(obj['Key']))[0])
        ]
    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞–ø–∫–∏ '{folder_prefix}': {e}"); return []

def get_ready_groups(files):
    groups = {}; required_extensions = set(FILE_EXTENSIONS)
    for file_key in files:
        base_name = os.path.basename(file_key); group_id, ext = os.path.splitext(base_name)
        if FILE_NAME_PATTERN.match(group_id) and ext in FILE_EXTENSIONS: groups.setdefault(group_id, set()).add(ext)
    ready_group_ids = [gid for gid, exts in groups.items() if exts == required_extensions]
    if ready_group_ids: logger.debug(f"–ù–∞–π–¥–µ–Ω—ã –≥–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã: {ready_group_ids}")
    else: logger.debug(f"–ì–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ {len(groups)} —á–∞—Å—Ç–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø.")
    return ready_group_ids

def move_group(s3, src_folder, dst_folder, group_id):
    logger.info(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã '{group_id}' –∏–∑ {src_folder} –≤ {dst_folder}...")
    all_moved = True
    for ext in FILE_EXTENSIONS:
        src_key = f"{src_folder}{group_id}{ext}"; dst_key = f"{dst_folder}{group_id}{ext}"
        try:
            logger.debug(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {src_key} -> {dst_key}")
            s3.copy_object(Bucket=B2_BUCKET_NAME, CopySource={"Bucket": B2_BUCKET_NAME, "Key": src_key}, Key=dst_key)
            logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ: {src_key}")
            s3.delete_object(Bucket=B2_BUCKET_NAME, Key=src_key)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω: {src_key} -> {dst_key}")
        except ClientError as e:
             if e.response['Error']['Code'] == 'NoSuchKey' or e.response['Error']['Code'] == '404': logger.warning(f"–§–∞–π–ª {src_key} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
             else: logger.error(f"–û—à–∏–±–∫–∞ B2 –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {src_key}: {e}"); all_moved = False
        except Exception as e: logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {src_key}: {e}"); all_moved = False
    return all_moved

def process_folders(s3, folders):
    logger.info("–ù–∞—á–∞–ª–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–∞–ø–æ–∫...")
    for i in range(len(folders) - 1, 0, -1):
        src_folder = folders[i]; dst_folder = folders[i - 1]
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ {src_folder} –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ {dst_folder}...")
        src_files = list_files_in_folder(s3, src_folder); ready_groups = get_ready_groups(src_files)
        if not ready_groups: logger.info(f"–í –ø–∞–ø–∫–µ {src_folder} –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø."); continue
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –≥–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –≤ {src_folder}: {ready_groups}")
        dst_files = list_files_in_folder(s3, dst_folder); dst_ready_groups = get_ready_groups(dst_files)
        moved_count = 0
        for group_id in ready_groups:
            if len(dst_ready_groups) < 1:
                if move_group(s3, src_folder, dst_folder, group_id):
                    dst_files = list_files_in_folder(s3, dst_folder); dst_ready_groups = get_ready_groups(dst_files); moved_count += 1
                else: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–ø–ø—É {group_id}. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ {src_folder} –ø—Ä–µ—Ä–≤–∞–Ω–∞."); break
            else: logger.info(f"–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ {dst_folder} –∑–∞–Ω—è—Ç–∞. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {group_id} –æ—Ç–ª–æ–∂–µ–Ω–æ."); break
        logger.info(f"–ò–∑ –ø–∞–ø–∫–∏ {src_folder} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≥—Ä—É–ø–ø: {moved_count}")
    logger.info("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def handle_publish(s3, config_public):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤ –ø–æ generation_id –∏–∑ config_public."""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ config_public –∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç.
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ –≤–Ω–µ—à–Ω–µ–º —Å–∫—Ä–∏–ø—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    generation_ids_to_archive = config_public.get("generation_id", [])
    if not generation_ids_to_archive: logger.info("üìÇ –ù–µ—Ç ID –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ config_public['generation_id']."); return False
    if not isinstance(generation_ids_to_archive, list):
        logger.warning(f"–ö–ª—é—á 'generation_id' –Ω–µ —Å–ø–∏—Å–æ–∫: {generation_ids_to_archive}. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.")
        generation_ids_to_archive = [str(generation_ids_to_archive)]
    logger.info(f"ID –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ (–∏–∑ config_public): {generation_ids_to_archive}")
    archived_ids = []; failed_ids = []
    for generation_id in list(generation_ids_to_archive):
        clean_id = generation_id.replace(".json", "")
        if not FILE_NAME_PATTERN.match(clean_id): logger.warning(f"ID '{generation_id}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É, –ø—Ä–æ–ø—É—Å–∫."); failed_ids.append(generation_id); continue
        logger.info(f"üîÑ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É: {clean_id}")
        success = True; found_any_file = False
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤–æ –≤—Å–µ—Ö –ø–∞–ø–∫–∞—Ö (444, 555, 666) –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        for folder in FOLDERS:
            for ext in FILE_EXTENSIONS:
                src_key = f"{folder}{clean_id}{ext}"; dst_key = f"{ARCHIVE_FOLDER.rstrip('/')}/{clean_id}{ext}"
                try:
                    s3.head_object(Bucket=B2_BUCKET_NAME, Key=src_key); found_any_file = True
                    logger.debug(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {src_key} -> {dst_key}")
                    s3.copy_object(Bucket=B2_BUCKET_NAME, CopySource={"Bucket": B2_BUCKET_NAME, "Key": src_key}, Key=dst_key)
                    logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {src_key}")
                    s3.delete_object(Bucket=B2_BUCKET_NAME, Key=src_key)
                    logger.info(f"‚úÖ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ: {src_key}")
                except ClientError as e:
                    if e.response['Error']['Code'] == 'NoSuchKey' or '404' in str(e): logger.debug(f"–§–∞–π–ª {src_key} –Ω–µ –Ω–∞–π–¥–µ–Ω."); continue
                    else: logger.error(f"–û—à–∏–±–∫–∞ B2 –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ {src_key}: {e}"); success = False
                except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ {src_key}: {e}"); success = False
        if not found_any_file: logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ {clean_id}. –°—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º."); archived_ids.append(generation_id)
        elif success: logger.info(f"–ì—Ä—É–ø–ø–∞ {clean_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."); archived_ids.append(generation_id)
        else: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å {clean_id}."); failed_ids.append(generation_id)
    if archived_ids:
        current_list = config_public.get("generation_id", []); new_archive_list = [gid for gid in current_list if gid not in archived_ids]
        if not new_archive_list:
            if "generation_id" in config_public: del config_public["generation_id"]; logger.info("–°–ø–∏—Å–æ–∫ generation_id –≤ config_public –æ—á–∏—â–µ–Ω.")
        else: config_public["generation_id"] = new_archive_list; logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ generation_id: {new_archive_list}")
        return True # –ë—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    else: logger.info("–ù–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ ID."); return False


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    parser = argparse.ArgumentParser(description='Manage B2 storage and content generation workflow.')
    parser.add_argument('--zero-delay', action='store_true', default=False, help='Skip the 10-minute delay (less relevant now).')
    args = parser.parse_args()
    zero_delay_flag = args.zero_delay
    logger.info(f"–§–ª–∞–≥ --zero-delay —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {zero_delay_flag} (–º–µ–Ω–µ–µ –∞–∫—Ç—É–∞–ª–µ–Ω –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–π –º–æ–¥–µ–ª–∏)")

    tasks_processed = 0
    try:
        max_tasks_per_run = int(config.get('WORKFLOW.max_tasks_per_run', 1))
    except ValueError:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ WORKFLOW.max_tasks_per_run. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1.")
        max_tasks_per_run = 1
    logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –∑–∞ –∑–∞–ø—É—Å–∫: {max_tasks_per_run}")

    b2_client = None
    config_public = {}
    config_gen = {}
    config_mj = {}
    lock_acquired = False
    task_completed_successfully = False # –§–ª–∞–≥ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ config_gen

    try:
        b2_client = get_b2_client()
        if not b2_client: raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å B2 –∫–ª–∏–µ–Ω—Ç.")

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ {CONFIG_PUBLIC_REMOTE_PATH}...")
        config_public = load_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH, {"processing_lock": False})
        if config_public is None: raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config_public.json")

        if config_public.get("processing_lock", False):
            logger.warning("üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        config_public["processing_lock"] = True
        if save_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH, config_public):
            logger.info("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            lock_acquired = True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        config_gen = load_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_GEN_REMOTE_PATH, CONFIG_GEN_LOCAL_PATH, {"generation_id": None})
        config_mj = load_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_MJ_REMOTE_PATH, CONFIG_MJ_LOCAL_PATH, {"midjourney_task": None, "midjourney_results": {}, "generation": False, "status": None})

        if config_gen is None or config_mj is None:
             raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config_gen.json –∏–ª–∏ config_midjourney.json")

        logger.info("--- –ù–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---")
        while tasks_processed < max_tasks_per_run:
            logger.info(f"--- –ò—Ç–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ #{tasks_processed + 1} / {max_tasks_per_run} ---")

            logger.debug("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ B2...")
            config_public = load_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH, config_public)
            config_mj = load_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_MJ_REMOTE_PATH, CONFIG_MJ_LOCAL_PATH, config_mj)
            if config_public is None or config_mj is None:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ B2 –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
                break

            config_mj.setdefault("status", None)
            logger.debug(f"–¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: config_gen={json.dumps(config_gen)}, config_mj={json.dumps(config_mj)}")

            action_taken_in_iteration = False

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!) ---

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞–π–º–∞—É—Ç–∞ MJ
            if config_mj.get('status') == 'timed_out_mock_needed':
                action_taken_in_iteration = True
                current_generation_id = config_gen.get("generation_id")
                if not current_generation_id: logger.error("‚ùå –°—Ç–∞—Ç—É—Å 'timed_out_mock_needed', –Ω–æ –Ω–µ—Ç generation_id! –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                logger.warning(f"–°—Ç–∞—Ç—É—Å —Ç–∞–π–º–∞—É—Ç–∞ MJ –¥–ª—è ID {current_generation_id}. –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–∏—Ç–∞—Ü–∏–∏.")
                try:
                    logger.info(f"–ó–∞–ø—É—Å–∫ {GENERATE_MEDIA_SCRIPT} --use-mock –¥–ª—è ID: {current_generation_id}...")
                    subprocess.run([sys.executable, GENERATE_MEDIA_SCRIPT, '--generation_id', current_generation_id, '--use-mock'], check=True, timeout=300)
                    logger.info(f"{GENERATE_MEDIA_SCRIPT} --use-mock —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                    tasks_processed += 1; task_completed_successfully = True; break # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Å –∏–º–∏—Ç–∞—Ü–∏–µ–π)
                except subprocess.CalledProcessError as e: logger.error(f"–û—à–∏–±–∫–∞ {GENERATE_MEDIA_SCRIPT} --use-mock: {e}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                except subprocess.TimeoutExpired: logger.error(f"–¢–∞–π–º–∞—É—Ç {GENERATE_MEDIA_SCRIPT} --use-mock. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                except Exception as mock_gen_err: logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–∏—Ç–∞—Ü–∏–∏: {mock_gen_err}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.", exc_info=True); break

            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: MidJourney –ì–æ—Ç–æ–≤–æ
            elif config_mj.get('midjourney_results') and config_mj['midjourney_results'].get('task_result'):
                task_res = config_mj['midjourney_results']['task_result']
                has_urls = (isinstance(task_res.get("temporary_image_urls"), list) and task_res["temporary_image_urls"]) or \
                           (isinstance(task_res.get("image_urls"), list) and task_res["image_urls"]) or \
                           task_res.get("image_url")
                if has_urls:
                    action_taken_in_iteration = True
                    current_generation_id = config_gen.get("generation_id")
                    if not current_generation_id: logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã MJ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç generation_id! –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                    logger.info(f"–ì–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã MJ –¥–ª—è ID {current_generation_id}. –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞.")
                    try:
                        logger.info(f"–ó–∞–ø—É—Å–∫ {GENERATE_MEDIA_SCRIPT} –¥–ª—è ID: {current_generation_id}...")
                        subprocess.run([sys.executable, GENERATE_MEDIA_SCRIPT, '--generation_id', current_generation_id], check=True, timeout=600) # –¢–∞–π–º–∞—É—Ç –¥–ª—è Runway
                        logger.info(f"{GENERATE_MEDIA_SCRIPT} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ).")
                        tasks_processed += 1; task_completed_successfully = True; break # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                    except subprocess.CalledProcessError as e: logger.error(f"–û—à–∏–±–∫–∞ {GENERATE_MEDIA_SCRIPT} (–≥–µ–Ω. –≤–∏–¥–µ–æ): {e}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                    except subprocess.TimeoutExpired: logger.error(f"–¢–∞–π–º–∞—É—Ç {GENERATE_MEDIA_SCRIPT} (–≥–µ–Ω. –≤–∏–¥–µ–æ). –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                    except Exception as media_gen_err: logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞: {media_gen_err}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.", exc_info=True); break
                else: logger.warning(f"–ù–∞–π–¥–µ–Ω—ã midjourney_results, –Ω–æ –Ω–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {task_res}. –ü—Ä–æ–ø—É—Å–∫.")

            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ MidJourney (–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
            elif config_mj.get('midjourney_task'):
                action_taken_in_iteration = True
                task_info = config_mj['midjourney_task']; task_id = None; requested_at_str = None; config_mj_needs_update = False
                if isinstance(task_info, dict): task_id = task_info.get("task_id"); requested_at_str = task_info.get("requested_at_utc"); logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ: task_id={task_id}, requested_at_utc={requested_at_str}")
                elif isinstance(task_info, str): task_id = task_info; logger.warning("–°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç midjourney_task (—Å—Ç—Ä–æ–∫–∞).")
                else: logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç midjourney_task: {task_info}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                if not task_id: logger.error("–ó–∞–¥–∞—á–∞ MJ –µ—Å—Ç—å, –Ω–æ task_id –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                logger.info(f"–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ MJ: {task_id}. –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")
                try:
                    logger.info(f"–ó–∞–ø—É—Å–∫ {WORKSPACE_MEDIA_SCRIPT}...")
                    subprocess.run([sys.executable, WORKSPACE_MEDIA_SCRIPT], check=True, timeout=180)
                    logger.info(f"{WORKSPACE_MEDIA_SCRIPT} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                    logger.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ config_midjourney.json –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
                    config_mj_reloaded = load_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_MJ_REMOTE_PATH, CONFIG_MJ_LOCAL_CHECK_PATH, default_value=None)
                    if config_mj_reloaded is None: logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å config_mj. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                    config_mj = config_mj_reloaded
                    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ config_mj –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {json.dumps(config_mj, indent=2, ensure_ascii=False)}")
                    if config_mj.get('midjourney_results') and config_mj['midjourney_results'].get('task_result'): logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Midjourney –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!"); continue
                    logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Midjourney –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã.")
                    if requested_at_str:
                        try:
                            if requested_at_str.endswith('Z'): requested_at_str = requested_at_str[:-1] + '+00:00'
                            requested_at_dt = datetime.fromisoformat(requested_at_str)
                            if requested_at_dt.tzinfo is None: requested_at_dt = requested_at_dt.replace(tzinfo=timezone.utc)
                            else: requested_at_dt = requested_at_dt.astimezone(timezone.utc)
                            now_utc = datetime.now(timezone.utc); elapsed_time = now_utc - requested_at_dt
                            logger.info(f"–í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ MJ: {elapsed_time}")
                            if elapsed_time > timedelta(seconds=MJ_TIMEOUT_SECONDS):
                                logger.warning(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è Midjourney ({MJ_TIMEOUT_SECONDS / 3600:.1f} —á)!")
                                config_mj['midjourney_task'] = None; config_mj['status'] = 'timed_out_mock_needed'; config_mj['midjourney_results'] = {}; config_mj['generation'] = False; config_mj_needs_update = True
                                logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å 'timed_out_mock_needed', –∑–∞–¥–∞—á–∞ MJ –æ—á–∏—â–µ–Ω–∞.")
                            else: logger.info("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è MJ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
                        except ValueError as date_err: logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ '{requested_at_str}': {date_err}. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
                        except Exception as time_err: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {time_err}. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.", exc_info=True);
                    else: logger.info("–ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞ MJ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
                    if config_mj_needs_update:
                        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ config_midjourney.json (—Å—Ç–∞—Ç—É—Å —Ç–∞–π–º–∞—É—Ç–∞) –≤ B2...")
                        if not save_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_MJ_REMOTE_PATH, CONFIG_MJ_LOCAL_TIMEOUT_PATH, config_mj): logger.error("!!! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å config_mj –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞!")
                        else: logger.info("‚úÖ Config_mj —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ç–∞–π–º–∞—É—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã –∂–¥–∞—Ç—å —Å–ª–µ–¥. –∑–∞–ø—É—Å–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
                    break
                except subprocess.CalledProcessError as e: logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {WORKSPACE_MEDIA_SCRIPT}: {e}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                except subprocess.TimeoutExpired: logger.error(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {WORKSPACE_MEDIA_SCRIPT}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                except Exception as check_err: logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ MJ: {check_err}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.", exc_info=True); break

            # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ú–µ–¥–∏–∞ (–ò–Ω–∏—Ü–∏–∞—Ü–∏—è)
            elif config_mj.get('generation') is True:
                action_taken_in_iteration = True
                current_generation_id = config_gen.get("generation_id")
                # --- –ò–ó–ú–ï–ù–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ ---
                if not current_generation_id:
                    logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ generation:true, –Ω–æ –Ω–µ—Ç generation_id! –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞.")
                    config_mj['generation'] = False
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π config_mj
                    if save_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_MJ_REMOTE_PATH, CONFIG_MJ_LOCAL_RESET_PATH, config_mj):
                         logger.info("–§–ª–∞–≥ 'generation' —Å–±—Ä–æ—à–µ–Ω –≤ B2 –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID.")
                    else:
                         logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–±—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥ 'generation' –≤ B2!")
                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
                logger.info(f"–§–ª–∞–≥ generation:true –¥–ª—è ID {current_generation_id}. –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ MJ.")
                try:
                    logger.info(f"–ó–∞–ø—É—Å–∫ {GENERATE_MEDIA_SCRIPT} –¥–ª—è ID: {current_generation_id}...")
                    subprocess.run([sys.executable, GENERATE_MEDIA_SCRIPT, '--generation_id', current_generation_id], check=True, timeout=120)
                    logger.info(f"{GENERATE_MEDIA_SCRIPT} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è MJ).")
                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å task_id)
                except subprocess.CalledProcessError as e: logger.error(f"–û—à–∏–±–∫–∞ {GENERATE_MEDIA_SCRIPT} (–∏–Ω–∏—Ü. MJ): {e}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                except subprocess.TimeoutExpired: logger.error(f"–¢–∞–π–º–∞—É—Ç {GENERATE_MEDIA_SCRIPT} (–∏–Ω–∏—Ü. MJ). –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                except Exception as media_init_err: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ MJ: {media_init_err}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.", exc_info=True); break

            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –£–±–æ—Ä–∫–∞ / –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–æ–Ω—Ç–µ–Ω—Ç–∞
            else:
                action_taken_in_iteration = True
                logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á MJ. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –£–±–æ—Ä–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ 666/...")
                logger.info("–ó–∞–ø—É—Å–∫ handle_publish (–∞—Ä—Ö–∏–≤–∞—Ü–∏—è)...")
                config_public_copy = config_public.copy()
                if handle_publish(b2_client, config_public_copy):
                    logger.info("handle_publish –≤–Ω–µ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º config_public...")
                    if not save_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH, config_public_copy): logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å config_public –ø–æ—Å–ª–µ handle_publish!")
                    else: config_public = config_public_copy
                logger.info("–ó–∞–ø—É—Å–∫ process_folders (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)...")
                process_folders(b2_client, FOLDERS)
                logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ì–û–¢–û–í–´–• –ì–†–£–ü–ü –≤ –ø–∞–ø–∫–µ 666/...")
                files_in_666 = list_files_in_folder(b2_client, FOLDERS[-1])
                ready_groups_in_666 = get_ready_groups(files_in_666)
                if not ready_groups_in_666:
                    logger.info(f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ 666/ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø. –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                    try:
                        new_id_base = generate_file_id().replace(".json", "")
                        if not new_id_base: raise ValueError("–§—É–Ω–∫—Ü–∏—è generate_file_id –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ ID")
                        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ID: {new_id_base}")
                        config_gen["generation_id"] = new_id_base
                        if not save_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_GEN_REMOTE_PATH, CONFIG_GEN_LOCAL_PATH, config_gen): raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π ID {new_id_base}")
                        logger.info(f"–ù–æ–≤—ã–π ID {new_id_base} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {CONFIG_GEN_REMOTE_PATH}")
                        logger.info(f"–ó–∞–ø—É—Å–∫ {GENERATE_CONTENT_SCRIPT} –¥–ª—è ID: {new_id_base}...")
                        subprocess.run([sys.executable, GENERATE_CONTENT_SCRIPT, '--generation_id', new_id_base], check=True, timeout=600)
                        logger.info(f"{GENERATE_CONTENT_SCRIPT} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ID: {new_id_base}.")
                        continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥ –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å generation:true)
                    except subprocess.CalledProcessError as e: logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {GENERATE_CONTENT_SCRIPT}: {e}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                    except subprocess.TimeoutExpired: logger.error(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {GENERATE_CONTENT_SCRIPT}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ."); break
                    except Exception as gen_err: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {gen_err}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.", exc_info=True); break
                else:
                    logger.info(f"–í –ø–∞–ø–∫–µ 666/ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã ({len(ready_groups_in_666)} —à—Ç.). –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞.")
                    break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while

            if not action_taken_in_iteration:
                logger.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞.")
                break

        # --- –ö–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ while ---
        logger.info(f"--- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {tasks_processed} ---")

        # --- –®–∞–≥ 4.4: –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ---
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –≤ config_public ---
        if task_completed_successfully:
            logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤...")
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ config_gen –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                config_gen = load_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_GEN_REMOTE_PATH, CONFIG_GEN_LOCAL_PATH, config_gen)
                if config_gen is None: raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config_gen –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π")

                completed_id = config_gen.get("generation_id")
                if completed_id:
                    # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ config_public["generation_id"]
                    # logger.info(f"–ü–µ—Ä–µ–Ω–æ—Å ID '{completed_id}' –≤ config_public –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.")
                    # archive_list = config_public.get("generation_id", [])
                    # ... (–ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞) ...
                    # config_public["generation_id"] = archive_list

                    # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º config_gen
                    config_gen["generation_id"] = None
                    logger.info("–û—á–∏—Å—Ç–∫–∞ generation_id –≤ config_gen.")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ config_gen
                    # save_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH, config_public) # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º public –∑–¥–µ—Å—å
                    save_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_GEN_REMOTE_PATH, CONFIG_GEN_LOCAL_PATH, config_gen)
                    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config_gen —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                else:
                    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω generation_id –≤ config_gen –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")
            except Exception as final_save_err:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ config_gen: {final_save_err}", exc_info=True)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    except ConnectionError as conn_err: logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è B2: {conn_err}"); lock_acquired = False
    except Exception as main_exec_err: logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º –±–ª–æ–∫–µ: {main_exec_err}", exc_info=True)
    finally:
        if lock_acquired:
            logger.info("–°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (processing_lock=False)...")
            if not b2_client:
                 try: b2_client = get_b2_client()
                 except Exception: b2_client = None
            if b2_client:
                config_public_final = load_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH, default_value=None)
                if config_public_final is not None:
                    config_public_final["processing_lock"] = False
                    if save_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH, config_public_final): logger.info("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞.")
                    else: logger.error("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–ù–Ø–¢–¨ –ë–õ–û–ö–ò–†–û–í–ö–£!")
                else: logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config_public –≤ finally!")
            else: logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å B2 –∫–ª–∏–µ–Ω—Ç –≤ finally!")
        else: logger.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Å–Ω—è—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        logger.info("--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã b2_storage_manager.py ---")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    try: main()
    except Exception as top_level_err:
         try: logger.error(f"!!! –ù–ï–ü–ï–†–ï–•–í–ê–ß–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –í–´–°–®–ï–ì–û –£–†–û–í–ù–Ø: {top_level_err}", exc_info=True)
         except NameError: print(f"!!! –ù–ï–ü–ï–†–ï–•–í–ê–ß–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –í–´–°–®–ï–ì–û –£–†–û–í–ù–Ø (–ª–æ–≥–≥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω): {top_level_err}")
         sys.exit(1)