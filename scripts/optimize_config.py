# core/scripts/optimize_config.py

import json
import shutil
import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))
from datetime import datetime
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.utils import ensure_directory_exists, validate_json_structure
from modules.config_manager import ConfigManager

print("üîÑ sys.path:")
for path in sys.path:
    print(path)

print("üîÑ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
config = ConfigManager()
logger = get_logger("optimize_config")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
CORE_CONFIG = config.get('FILE_PATHS.core_config', 'core/config_core.json')
DYNAMIC_CONFIG = config.get('FILE_PATHS.dynamic_config', 'core/config_dynamic.json')
ARCHIVE_CONFIG = config.get('FILE_PATHS.archive_config', 'core/config_archive.json')

DEFAULT_FLESCH_THRESHOLD = config.get('OPTIMIZE.default_flesch_threshold', 70)
VALIDATION_RULES = config.get('OPTIMIZE.validation_rules', {})
MAX_RETRIES = config.get('OPTIMIZE.max_retries', 3)


class ConfigOptimizer:
    def __init__(self):
        self.core_config = CORE_CONFIG
        self.dynamic_config = DYNAMIC_CONFIG
        self.archive_config = ARCHIVE_CONFIG

    def backup_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            ensure_directory_exists(os.path.dirname(self.archive_config))
            backup_path = f"{self.archive_config}_{datetime.now().strftime('%Y%m%d%H%M%S')}.json"
            shutil.copyfile(self.core_config, backup_path)
            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        except FileNotFoundError:
            handle_error("Config Backup Error", f"–§–∞–π–ª {self.core_config} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            handle_error("Config Backup Error", e)

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            with open(self.core_config, 'r', encoding='utf-8') as file:
                config_data = json.load(file)
            validate_json_structure(config_data, ['METRICS'])
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return config_data
        except FileNotFoundError:
            handle_error("Config Load Error", f"–§–∞–π–ª {self.core_config} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except json.JSONDecodeError as e:
            handle_error("Config JSON Error", e)

    def validate_config(self, config_data):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º."""
        try:
            for key, rule in VALIDATION_RULES.items():
                if key not in config_data or not isinstance(config_data[key], rule):
                    logger.warning(f"‚ö†Ô∏è –ö–ª—é—á {key} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—É {rule}")
                    return False
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é.")
            return True
        except Exception as e:
            handle_error("Config Validation Error", e)

    def optimize_parameters(self, config_data):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            if 'METRICS' in config_data:
                config_data['METRICS']['flesch_threshold'] = DEFAULT_FLESCH_THRESHOLD
                logger.info("üîÑ Flesch Threshold –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        except KeyError as e:
            handle_error("Metrics Key Error", e)

    def save_config(self, config_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            with open(self.core_config, 'w', encoding='utf-8') as file:
                json.dump(config_data, file, ensure_ascii=False, indent=4)
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        except Exception as e:
            handle_error("Config Save Error", e)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        self.backup_config()
        config_data = self.load_config()

        if not config_data:
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return

        if not self.validate_config(config_data):
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        self.optimize_parameters(config_data)
        self.save_config(config_data)
        logger.info("üèÅ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    try:
        optimizer = ConfigOptimizer()
        optimizer.run()
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
