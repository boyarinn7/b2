import os
import sys
import json
import shutil
import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from modules.config_manager import ConfigManager
from modules.logger import get_logger
from modules.utils import ensure_directory_exists

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
config = ConfigManager()
logger = get_logger("learning_cycle")


class LearningCycle:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–º —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è."""

    def __init__(self):
        logger.info("‚úÖ LearningCycle –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        self.config_path = config.get('FILE_PATHS.core_config', 'config/config_core.json')
        self.archive_path = config.get('FILE_PATHS.archive_config', 'config/backup/config_archive.json')
        self.backup_retention_days = 30  # –•—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        self.max_backup_files = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π

    def ensure_initial_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
        if not os.path.exists(self.config_path) or os.path.getsize(self.config_path) == 0:
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            ensure_directory_exists(os.path.dirname(self.config_path))
            initial_config = {
                "LEARNING": {
                    "success_threshold": 8,
                    "delete_threshold": 3
                },
                "METRICS": {
                    "flesch_threshold": 70
                }
            }
            try:
                with open(self.config_path, 'w', encoding='utf-8') as file:
                    json.dump(initial_config, file, ensure_ascii=False, indent=4)
                logger.info(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.config_path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                sys.exit(1)
            self.backup_config()

    def backup_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        ensure_directory_exists(os.path.dirname(self.archive_path))
        timestamp = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
        backup_file = f"{self.archive_path}_{timestamp}.json"

        try:
            shutil.copyfile(self.config_path, backup_file)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {backup_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            sys.exit(1)

        self.cleanup_old_backups()

    def cleanup_old_backups(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π."""
        backup_folder = os.path.abspath(os.path.join(os.path.dirname(self.archive_path)))
        backups = sorted([
            os.path.join(backup_folder, f) for f in os.listdir(backup_folder)
            if f.startswith('config_archive.json') and f.endswith('.json')
        ], key=os.path.getmtime, reverse=True)

        if not backups:
            logger.warning("‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ø–∏–π —Å—Ç–∞—Ä—à–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        now = datetime.datetime.now()
        for backup in backups:
            backup_time = datetime.datetime.fromtimestamp(os.path.getmtime(backup))
            if (now - backup_time).days > self.backup_retention_days:
                os.remove(backup)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ –¥–∞—Ç–µ: {backup}")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        while len(backups) > self.max_backup_files:
            oldest_backup = backups.pop()
            os.remove(oldest_backup)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: {oldest_backup}")

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as file:
                config_data = json.load(file)
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return config_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.restore_from_backup()

    def optimize_parameters(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞."""
        logger.info("üîÑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        config_data = self.load_config()
        if not config_data:
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        learning_settings = config_data.get('LEARNING', {})
        if 'success_threshold' in learning_settings:
            learning_settings['success_threshold'] += 1
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω success_threshold: {learning_settings['success_threshold']}")

        self.save_config(config_data)

    def save_config(self, updated_config):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            with open(self.config_path, 'w', encoding='utf-8') as file:
                json.dump(updated_config, file, ensure_ascii=False, indent=4)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {self.config_path}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)

    def run(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è."""
        self.ensure_initial_config()
        self.backup_config()
        self.optimize_parameters()
        logger.info("üèÅ –¶–∏–∫–ª —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω.")


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    cycle = LearningCycle()
    cycle.run()
