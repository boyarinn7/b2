import os
import requests
import json
import logging
import sys
import time # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

# --- –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ ---
# –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ–¥—É–ª–∏
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if BASE_DIR not in sys.path:
    sys.path.append(BASE_DIR)

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π ---
try:
    from modules.config_manager import ConfigManager
    from modules.api_clients import get_b2_client
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º utils –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ JSON –≤/–∏–∑ B2
    from modules.utils import load_b2_json, save_b2_json, ensure_directory_exists
    from modules.logger import get_logger # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
except ModuleNotFoundError as import_err:
    print(f"[Workspace_media] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞: {import_err}")
    print(f"[Workspace_media] –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PYTHONPATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –ø–∞–ø–∫–∏ scripts.")
    sys.exit(1)
except ImportError as import_err:
     print(f"[Workspace_media] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –º–æ–¥—É–ª—è—Ö: {import_err}", file=sys.stderr)
     sys.exit(1)


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = get_logger("Workspace_media") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
try:
    config = ConfigManager()
    logger.info("ConfigManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as init_err:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ConfigManager: {init_err}", exc_info=True)
    sys.exit(1)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
try:
    # –ü—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥–∞–º –≤ B2
    CONFIG_MJ_REMOTE_PATH = config.get("FILE_PATHS.config_midjourney", "config/config_midjourney.json")
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
    CONFIG_MJ_LOCAL_PATH = "config_midjourney_workspace_temp.json"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    MJ_FETCH_ENDPOINT = config.get("API_KEYS.midjourney.task_endpoint", "https://api.piapi.ai/mj/v2/fetch") # –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    MJ_API_KEY = os.getenv("MIDJOURNEY_API_KEY")
    B2_BUCKET_NAME = config.get('API_KEYS.b2.bucket_name', os.getenv('B2_BUCKET_NAME'))

    # –¢–∞–π–º–∞—É—Ç –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    FETCH_REQUEST_TIMEOUT = 120 # –°–µ–∫—É–Ω–¥

    if not MJ_API_KEY:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MIDJOURNEY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ —Å—Ä–∞–∑—É, –¥–∞–¥–∏–º —à–∞–Ω—Å main() –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ
    if not B2_BUCKET_NAME:
         logger.critical("–ò–º—è B2 –±–∞–∫–µ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ!")
         # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ —Å—Ä–∞–∑—É

except Exception as cfg_err:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {cfg_err}", exc_info=True)
    sys.exit(1)


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–∞–Ω–∞–ª–æ–≥ fetch_mj_status –∏–∑ —Ç–µ—Å—Ç–∞) ---
def fetch_piapi_status(task_id: str, api_key: str, endpoint: str) -> dict | None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ Midjourney –ø–æ task_id —á–µ—Ä–µ–∑ PiAPI.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ None.
    """
    if not api_key:
        logger.error("‚ùå MIDJOURNEY_API_KEY –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ñ—É–Ω–∫—Ü–∏–∏.")
        return None
    if not task_id:
        logger.error("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω task_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")
        return None

    headers = {"X-API-Key": api_key, "Content-Type": "application/json"} # –î–æ–±–∞–≤–ª–µ–Ω Content-Type –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    payload = {"task_id": task_id}

    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ {endpoint}... (–¢–∞–π–º–∞—É—Ç: {FETCH_REQUEST_TIMEOUT} —Å–µ–∫)")

    try:
        response = requests.post(endpoint, headers=headers, json=payload, timeout=FETCH_REQUEST_TIMEOUT)
        logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç API (—Å—Ç–∞—Ç—É—Å {response.status_code}): {response.text[:500]}")
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)

        result = response.json()
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}.")
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ, –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        status = result.get("status")
        progress = result.get("progress")
        logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}, –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}")

        return result # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç

    except requests.exceptions.Timeout:
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç ({FETCH_REQUEST_TIMEOUT} —Å–µ–∫) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞: {endpoint}")
        return None
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/–∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        if e.response is not None:
            logger.error(f"    –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {e.response.status_code}")
            logger.error(f"    –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}. –û—Ç–≤–µ—Ç: {response.text[:500]}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)
        return None

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ MidJourney...")

    if not MJ_API_KEY:
        logger.error("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: MIDJOURNEY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
    if not B2_BUCKET_NAME:
        logger.error("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: B2_BUCKET_NAME –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
        return

    b2_client = None
    config_midjourney = None
    config_changed = False

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç B2
        b2_client = get_b2_client()
        if not b2_client:
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å B2 –∫–ª–∏–µ–Ω—Ç.")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ MJ –∏–∑ B2
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {CONFIG_MJ_REMOTE_PATH} –∏–∑ B2...")
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ensure_directory_exists(os.path.dirname(CONFIG_MJ_LOCAL_PATH))
        config_midjourney = load_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_MJ_REMOTE_PATH, CONFIG_MJ_LOCAL_PATH, default_value=None)

        if config_midjourney is None:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {CONFIG_MJ_REMOTE_PATH}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
        task_info = config_midjourney.get("midjourney_task")
        task_id = None

        if isinstance(task_info, dict):
            task_id = task_info.get("task_id")
        elif isinstance(task_info, str): # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            task_id = task_info
            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç midjourney_task (—Å—Ç—Ä–æ–∫–∞).")
        # else: task_info is None or invalid format

        if not task_id:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á Midjourney –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ config_midjourney.json.")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: {task_id}")

        # --- –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ ---
        status_result = fetch_piapi_status(task_id, MJ_API_KEY, MJ_FETCH_ENDPOINT)

        if status_result:
            current_status = status_result.get("status")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (–º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è —É PiAPI)
            final_success_statuses = ["completed", "finished"] # –î–æ–±–∞–≤–∏–ª–∏ finished
            final_error_statuses = ["failed"] # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å

            if current_status in final_success_statuses or current_status in final_error_statuses:
                logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {current_status}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞...")
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –í–ï–°–¨ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ midjourney_results
                config_midjourney["midjourney_results"] = status_result
                # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
                config_midjourney["midjourney_task"] = None
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                config_midjourney["status"] = None
                config_midjourney["generation"] = False
                config_changed = True # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å

                if current_status in final_error_statuses:
                     logger.error(f"–ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (—Å—Ç–∞—Ç—É—Å: {current_status}). –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                else:
                     logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

            else:
                # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π (pending, processing, running –∏ —Ç.–¥.)
                logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –≤—Å–µ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (—Å—Ç–∞—Ç—É—Å: {current_status}). –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω.")
                # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –º–µ–Ω—è–µ–º

        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}. –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω.")
            # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º —Å –∫–æ–Ω—Ñ–∏–≥–æ–º

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ B2, –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è ---
        if config_changed:
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ config_midjourney.json –≤ B2...")
            if not save_b2_json(b2_client, B2_BUCKET_NAME, CONFIG_MJ_REMOTE_PATH, CONFIG_MJ_LOCAL_PATH, config_midjourney):
                logger.error("!!! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config_midjourney.json –≤ B2!")
            else:
                logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥ Midjourney —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ B2.")
        else:
            logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–¥–∞—á–∏, —Ç—Ä–µ–±—É—é—â–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞, –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.")


    except ConnectionError as conn_err:
         logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è B2: {conn_err}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ Workspace_media: {e}", exc_info=True)
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥–∞
        if os.path.exists(CONFIG_MJ_LOCAL_PATH):
            try:
                os.remove(CONFIG_MJ_LOCAL_PATH)
                logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {CONFIG_MJ_LOCAL_PATH}")
            except OSError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {CONFIG_MJ_LOCAL_PATH}: {e}")
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ MidJourney –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    main()

