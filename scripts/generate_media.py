import os
import json
import boto3
import botocore
import sys
import subprocess
import openai
import requests

from modules.utils import ensure_directory_exists
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.config_manager import ConfigManager

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–≥–µ—Ä–∞ ===
config = ConfigManager()
logger = get_logger("generate_media")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ ===
B2_BUCKET_NAME = config.get('API_KEYS.b2.bucket_name')
B2_ENDPOINT = config.get('API_KEYS.b2.endpoint')
B2_ACCESS_KEY = config.get('API_KEYS.b2.access_key')
B2_SECRET_KEY = config.get('API_KEYS.b2.secret_key')

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–≤—ã–Ω–∏–º–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
CONFIG_GEN_PATH = os.path.abspath(config.get("FILE_PATHS.config_gen", "config/config_gen.json"))
CONFIG_PUBLIC_REMOTE_PATH = config.get("FILE_PATHS.config_public", "config/config_public.json")
CONFIG_PUBLIC_LOCAL_PATH = os.path.abspath(config.get("FILE_PATHS.config_public_local", "config_public.json"))
CONTENT_OUTPUT_PATH = config.get("FILE_PATHS.content_output_path", "generated_content.json")
SCRIPTS_FOLDER = os.path.abspath(config.get("FILE_PATHS.scripts_folder", "scripts"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ MEDIA –∫–æ–Ω—Ñ–∏–≥–∞
VIDEO_SCENARIO_PROMPT = config.get("MEDIA.video_scenario_prompt")
VIDEO_MAX_TOKENS = config.get("MEDIA.video_max_tokens", 300)
VIDEO_TEMPERATURE = config.get("MEDIA.video_temperature", 0.7)
IMAGE_SIZE = config.get("MEDIA.image_size", "1024x768")

# –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É b2_storage_manager.py (–≤—ã–Ω–∏–º–∞–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
B2_STORAGE_MANAGER_SCRIPT = os.path.join(SCRIPTS_FOLDER, "b2_storage_manager.py")

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Backblaze B2 ===

def get_b2_client():
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç B2 (S3) –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
    try:
        client = boto3.client(
            's3',
            endpoint_url=B2_ENDPOINT,
            aws_access_key_id=B2_ACCESS_KEY,
            aws_secret_access_key=B2_SECRET_KEY
        )
        return client
    except Exception as e:
        handle_error(logger, f"B2 Client Initialization Error: {e}")

def download_file_from_b2(client, remote_path, local_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ B2 (S3) –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    try:
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ B2: {remote_path} -> {local_path}")
        ensure_directory_exists(os.path.dirname(local_path))
        if not hasattr(client, 'download_file'):
            raise TypeError("‚ùå –û—à–∏–±–∫–∞: client –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º S3-–∫–ª–∏–µ–Ω—Ç–∞!")
        client.download_file(B2_BUCKET_NAME, remote_path, local_path)
        logger.info(f"‚úÖ –§–∞–π–ª '{remote_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {local_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {remote_path}: {e}")
        handle_error(logger, f"B2 Download Error: {e}")

def upload_to_b2(client, folder, file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É B2 –∏ —É–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é."""
    try:
        file_name = os.path.basename(file_path)
        if not folder.endswith('/'):
            folder += '/'
        s3_key = f"{folder}{file_name}"
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ B2: {file_path} -> {s3_key}")
        client.upload_file(file_path, B2_BUCKET_NAME, s3_key)
        logger.info(f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ B2: {s3_key}")
        os.remove(file_path)
        logger.info(f"üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")
    except Exception as e:
        handle_error(logger, f"B2 Upload Error: {e}")

def update_config_public(client, folder):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç config_public.json: —É–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ 'empty'.
    –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø–∞–ø–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.
    """
    try:
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config_public.json: —É–¥–∞–ª–µ–Ω–∏–µ {folder} –∏–∑ —Å–ø–∏—Å–∫–∞ 'empty'")
        download_file_from_b2(client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)
        if "empty" in config_public and folder in config_public["empty"]:
            config_public["empty"].remove(folder)
            logger.info(f"‚úÖ –ü–∞–ø–∫–∞ {folder} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ 'empty'. –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {config_public}")
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(config_public, file, ensure_ascii=False, indent=4)
        client.upload_file(CONFIG_PUBLIC_LOCAL_PATH, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH)
        logger.info("‚úÖ config_public.json –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ B2.")
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
    except Exception as e:
        handle_error(logger, f"Config Public Update Error: {e}")

def reset_processing_lock(client):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ processing_lock –≤ config_public.json, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –µ–≥–æ –≤ false.
    """
    try:
        logger.info("üîÑ –°–±—Ä–æ—Å processing_lock –≤ config_public.json")
        download_file_from_b2(client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)
        if config_public.get("processing_lock", False):
            config_public["processing_lock"] = False
            logger.info("‚úÖ –§–ª–∞–≥ processing_lock —Å–±—Ä–æ—à–µ–Ω.")
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(config_public, file, ensure_ascii=False, indent=4)
        client.upload_file(CONFIG_PUBLIC_LOCAL_PATH, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH)
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
    except Exception as e:
        handle_error(logger, f"Processing Lock Reset Error: {e}")

# === –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ ===

def generate_video_scenario(post_text):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π 10-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è {text} –≤–º–µ—Å—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –∫–ª—é—á–∞–º–∏:
      - 'video_scenario': —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ,
      - 'first_frame_prompt': –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞.
    """
    try:
        prompt = VIDEO_SCENARIO_PROMPT.format(text=post_text)
        logger.info(f"üîé –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–∏–¥–µ–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è —Å prompt: {prompt}")
        response = openai.ChatCompletion.create(
            model=config.get("API_KEYS.openai.model", "gpt-4"),
            messages=[{"role": "user", "content": prompt}],
            max_tokens=VIDEO_MAX_TOKENS,
            temperature=VIDEO_TEMPERATURE,
        )
        response_text = response['choices'][0]['message']['content'].strip()
        logger.info(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç OpenAI –¥–ª—è –≤–∏–¥–µ–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è: {response_text}")
        try:
            scenario_dict = json.loads(response_text)
            return scenario_dict
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è: {e}. –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response_text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return None

def generate_image_with_dalle(prompt, generation_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ —Å –ø–æ–º–æ—â—å—é DALL‚ÄëE 3 –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞. –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ —Å –∏–º–µ–Ω–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ generation_id.
    """
    try:
        logger.info(f"üîé –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DALL‚ÄëE 3 —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt}")
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size=IMAGE_SIZE
        )
        image_url = response['data'][0]['url']
        logger.info(f"üì§ –ü–æ–ª—É—á–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
        image_response = requests.get(image_url)
        if image_response.status_code == 200:
            image_path = f"{generation_id}.png"
            with open(image_path, "wb") as f:
                f.write(image_response.content)
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: {image_path}")
            return image_path
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å DALL‚ÄëE 3")
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è DALL‚ÄëE 3: {e}")
        return None

def main():
    logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞...")
    try:
        # –ß—Ç–µ–Ω–∏–µ config_gen.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        logger.info(f"üìÑ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {CONFIG_GEN_PATH}")
        with open(CONFIG_GEN_PATH, 'r', encoding='utf-8') as file:
            config_gen = json.load(file)
        file_id = os.path.splitext(config_gen["generation_id"])[0]
        logger.info(f"üìÇ ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {file_id}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ B2
        b2_client = get_b2_client()

        # –ó–∞–≥—Ä—É–∑–∫–∞ config_public.json –∏–∑ B2
        download_file_from_b2(b2_client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)
        logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π config_public.json: {config_public}")

        # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ 'empty'
        if "empty" in config_public and config_public["empty"]:
            target_folder = config_public["empty"][0]
            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {target_folder}")
        else:
            raise ValueError("‚ùå –û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ 'empty' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ config_public.json")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞)
        logger.info(f"üìÑ –ß—Ç–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑: {CONTENT_OUTPUT_PATH}")
        with open(CONTENT_OUTPUT_PATH, 'r', encoding='utf-8') as f:
            generated_content = json.load(f)
        post_text = generated_content.get("content", "")
        if not post_text:
            raise ValueError("‚ùå –û—à–∏–±–∫–∞: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø—É—Å—Ç!")
        logger.info(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text[:100]}...")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        scenario = generate_video_scenario(post_text)
        if scenario is None or "first_frame_prompt" not in scenario:
            raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞!")
        first_frame_prompt = scenario["first_frame_prompt"]
        logger.info(f"üé¨ –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞: {first_frame_prompt}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ —Å –ø–æ–º–æ—â—å—é DALL‚ÄëE 3
        image_path = generate_image_with_dalle(first_frame_prompt, file_id)
        if image_path is None:
            raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è DALL‚ÄëE 3 –Ω–µ —É–¥–∞–ª–∞—Å—å!")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ B2
        upload_to_b2(b2_client, target_folder, image_path)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config_public.json: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –∏ —Å–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        update_config_public(b2_client, target_folder)
        reset_processing_lock(b2_client)

        # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ b2_storage_manager.py –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {B2_STORAGE_MANAGER_SCRIPT}")
        subprocess.run([sys.executable, B2_STORAGE_MANAGER_SCRIPT], check=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞: {e}")
        handle_error(logger, "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞", e)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
