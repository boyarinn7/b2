import os
import json
import boto3
import sys
import subprocess
import openai
import requests
import base64
import time
import re

from PIL import Image
from runwayml import RunwayML
from moviepy.editor import ImageClip, concatenate_videoclips
from modules.utils import ensure_directory_exists
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.config_manager import ConfigManager

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–≥–µ—Ä–∞ ===
config = ConfigManager()
logger = get_logger("generate_media")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ ===
B2_BUCKET_NAME = config.get('API_KEYS.b2.bucket_name')
B2_ENDPOINT = config.get('API_KEYS.b2.endpoint')
B2_ACCESS_KEY = config.get('API_KEYS.b2.access_key')
B2_SECRET_KEY = config.get('API_KEYS.b2.secret_key')

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CONFIG_GEN_PATH = os.path.abspath(config.get("FILE_PATHS.config_gen", "config/config_gen.json"))
CONFIG_PUBLIC_REMOTE_PATH = config.get("FILE_PATHS.config_public", "config/config_public.json")
CONFIG_PUBLIC_LOCAL_PATH = os.path.abspath(config.get("FILE_PATHS.config_public_local", "config_public.json"))
CONTENT_OUTPUT_PATH = config.get("FILE_PATHS.content_output_path", "generated_content.json")
SCRIPTS_FOLDER = os.path.abspath(config.get("FILE_PATHS.scripts_folder", "scripts"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
USER_PROMPT_COMBINED = config.get("PROMPTS.user_prompt_combined")
OPENAI_MODEL = config.get("OPENAI_SETTINGS.model", "gpt-4o")
OPENAI_MAX_TOKENS = config.get("OPENAI_SETTINGS.max_tokens", 1000)
OPENAI_TEMPERATURE = config.get("OPENAI_SETTINGS.temperature", 0.7)
MIN_SCRIPT_LENGTH = config.get("VISUAL_ANALYSIS.min_script_length", 200)
IMAGE_SIZE = config.get("IMAGE_GENERATION.image_size", "1792x1024")
NUM_IMAGES = config.get("IMAGE_GENERATION.num_images", 1)
MIDJOURNEY_ENABLED = config.get("IMAGE_GENERATION.midjourney_enabled", True)
DALLE_ENABLED = config.get("IMAGE_GENERATION.dalle_enabled", True)
OUTPUT_IMAGE_FORMAT = config.get("PATHS.output_image_format", "png")
MIDJOURNEY_ENDPOINT = config.get("API_KEYS.midjourney.endpoint")
MIDJOURNEY_TASK_ENDPOINT = config.get("API_KEYS.midjourney.task_endpoint")
IMAGE_SELECTION_CRITERIA = config.get("VISUAL_ANALYSIS.image_selection_criteria", [])
MAX_ATTEMPTS = config.get("GENERATE.max_attempts", 3)  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

B2_STORAGE_MANAGER_SCRIPT = os.path.join(SCRIPTS_FOLDER, "b2_storage_manager.py")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–µ–π API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ–∫—Ä–µ—Ç—ã GitHub)
openai.api_key = os.getenv("OPENAI_API_KEY")
MIDJOURNEY_API_KEY = os.getenv("MIDJOURNEY_API_KEY")
if not openai.api_key:
    raise ValueError("API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
if MIDJOURNEY_ENABLED and not MIDJOURNEY_API_KEY:
    raise ValueError("API-–∫–ª—é—á Midjourney –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è MIDJOURNEY_API_KEY")


def check_midjourney_results(b2_client):
    remote_config = "config/config_public.json"
    try:
        config_obj = b2_client.get_object(Bucket=B2_BUCKET_NAME, Key=remote_config)
        config_data = json.loads(config_obj['Body'].read().decode('utf-8'))
        return config_data.get("midjourney_results", None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ midjourney_results: {e}")
        return None


def select_best_image(b2_client, image_urls, prompt):
    global config  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ config —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ ConfigManager
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏, –ø—Ä–æ–º–ø—Ç –∏ max_tokens –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        criteria = config.get("VISUAL_ANALYSIS.image_selection_criteria")
        selection_prompt = config.get("VISUAL_ANALYSIS.image_selection_prompt")
        max_tokens = config.get("VISUAL_ANALYSIS.image_selection_max_tokens", 500)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å –≤–µ—Å–∞–º–∏
        criteria_text = ", ".join([f"{c['name']} (weight: {c['weight']})" for c in criteria])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        full_prompt = selection_prompt.format(prompt=prompt, criteria=criteria_text)

        for attempt in range(MAX_ATTEMPTS):
            try:
                gpt_response = openai.ChatCompletion.create(
                    model=OPENAI_MODEL,
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {"type": "text", "text": full_prompt},
                                *[{"type": "image_url", "image_url": {"url": url}} for url in image_urls]
                            ]
                        }
                    ],
                    max_tokens=max_tokens
                )
                answer = gpt_response.choices[0].message.content
                logger.info(f"OpenAI –≤—ã–±–æ—Ä: {answer[:100]}...")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ª—É—á—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                best_index_match = re.search(r"Image (\d+)", answer)
                if best_index_match:
                    best_index = int(best_index_match.group(1)) - 1
                    if best_index in range(4):
                        return image_urls[best_index]
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –æ—Ç–≤–µ—Ç–µ OpenAI: {answer}, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return image_urls[0]
            except openai.error.OpenAIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ OpenAI API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_ATTEMPTS}): {e}")
                if attempt < MAX_ATTEMPTS - 1:
                    time.sleep(5)
                else:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ OpenAI, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    return image_urls[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_best_image: {e}")
        return image_urls[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Backblaze B2 ===
def get_b2_client():
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç B2 (S3) –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
    try:
        client = boto3.client(
            's3',
            endpoint_url=B2_ENDPOINT,
            aws_access_key_id=B2_ACCESS_KEY,
            aws_secret_access_key=B2_SECRET_KEY
        )
        return client
    except Exception as e:
        handle_error(logger, "B2 Client Initialization Error", e)
        return None


def download_file_from_b2(client, remote_path, local_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ B2 (S3) –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    try:
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ B2: {remote_path} -> {local_path}")
        ensure_directory_exists(os.path.dirname(local_path))
        client.download_file(B2_BUCKET_NAME, remote_path, local_path)
        logger.info(f"‚úÖ –§–∞–π–ª '{remote_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {local_path}")
    except Exception as e:
        handle_error(logger, "B2 Download Error", e)


def upload_to_b2(client, folder, file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É B2 –∏ —É–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é."""
    try:
        file_name = os.path.basename(file_path)
        if not folder.endswith('/'):
            folder += '/'
        s3_key = f"{folder}{file_name}"
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ B2: {file_path} -> {s3_key}")
        client.upload_file(file_path, B2_BUCKET_NAME, s3_key)
        logger.info(f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ B2: {s3_key}")
        os.remove(file_path)
        logger.info(f"üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")
    except Exception as e:
        handle_error(logger, "B2 Upload Error", e)


def update_config_public(client, folder):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç config_public.json: —É–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ 'empty'."""
    try:
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config_public.json: —É–¥–∞–ª–µ–Ω–∏–µ {folder} –∏–∑ —Å–ø–∏—Å–∫–∞ 'empty'")
        download_file_from_b2(client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)
        if "empty" in config_public and folder in config_public["empty"]:
            config_public["empty"].remove(folder)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(config_public, file, ensure_ascii=False, indent=4)
        client.upload_file(CONFIG_PUBLIC_LOCAL_PATH, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH)
        logger.info("‚úÖ config_public.json –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ B2.")
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
    except Exception as e:
        handle_error(logger, "Config Public Update Error", e)


def reset_processing_lock(client):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ processing_lock –≤ config_public.json."""
    try:
        logger.info("üîÑ –°–±—Ä–æ—Å processing_lock –≤ config_public.json")
        download_file_from_b2(client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)
        if config_public.get("processing_lock", False):
            config_public["processing_lock"] = False
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(config_public, file, ensure_ascii=False, indent=4)
        client.upload_file(CONFIG_PUBLIC_LOCAL_PATH, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH)
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
    except Exception as e:
        handle_error(logger, "Processing Lock Reset Error", e)


# === –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –≤–∏–¥–µ–æ ===
def generate_script_and_frame(topic):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è –≤–∏–¥–µ–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    for attempt in range(MAX_ATTEMPTS):
        try:
            combined_prompt = USER_PROMPT_COMBINED.replace("{topic}", topic)
            logger.info(f"üîé –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_ATTEMPTS}: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è '{topic[:100]}'...")
            response = openai.ChatCompletion.create(
                model=OPENAI_MODEL,
                messages=[{"role": "user", "content": combined_prompt}],
                max_tokens=OPENAI_MAX_TOKENS,
                temperature=OPENAI_TEMPERATURE,
            )
            combined_response = response['choices'][0]['message']['content'].strip()
            if len(combined_response) < MIN_SCRIPT_LENGTH:
                logger.error(f"‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(combined_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                continue
            if "First Frame Description:" not in combined_response or "End of Description" not in combined_response:
                logger.error("‚ùå –ú–∞—Ä–∫–µ—Ä—ã –∫–∞–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ!")
                continue
            script_text = combined_response.split("First Frame Description:")[0].strip()
            first_frame_description = \
            combined_response.split("First Frame Description:")[1].split("End of Description")[0].strip()
            logger.info(f"üé¨ –°—Ü–µ–Ω–∞—Ä–∏–π: {script_text[:100]}...")
            logger.info(f"üñºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞: {first_frame_description[:100]}...")
            return script_text, first_frame_description
        except Exception as e:
            handle_error(logger, f"Script Generation Error (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_ATTEMPTS})", e)
            if attempt == MAX_ATTEMPTS - 1:
                logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
                return None, None
    return None, None


def generate_image_with_midjourney(prompt, generation_id):
    for attempt in range(MAX_ATTEMPTS):
        try:
            headers = {"X-API-KEY": MIDJOURNEY_API_KEY}
            payload = {
                "prompt": prompt,
                "aspect_ratio": "16:9",
                "process_mode": "fast",
                "skip_prompt_check": False
            }
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_ATTEMPTS}: –ó–∞–ø—Ä–æ—Å –∫ Midjourney: {prompt[:100]}...")
            response = requests.post(MIDJOURNEY_ENDPOINT, json=payload, headers=headers)
            response.raise_for_status()
            task_id = response.json()["task_id"]
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Midjourney, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            sys.exit(0)
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ Midjourney (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_ATTEMPTS}): {e}")
            if attempt < MAX_ATTEMPTS - 1:
                time.sleep(5)
            else:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ Midjourney")
                return None
    return None

def remove_midjourney_results(b2_client):
    remote_config = "config/config_public.json"
    try:
        config_obj = b2_client.get_object(Bucket=B2_BUCKET_NAME, Key=remote_config)
        config_data = json.loads(config_obj['Body'].read().decode('utf-8'))
        if "midjourney_results" in config_data:
            del config_data["midjourney_results"]
            updated_config = json.dumps(config_data, ensure_ascii=False).encode('utf-8')
            b2_client.put_object(Bucket=B2_BUCKET_NAME, Key=remote_config, Body=updated_config)
            logger.info("–ö–ª—é—á midjourney_results —É–¥–∞–ª—ë–Ω –∏–∑ config_public.json")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ midjourney_results: {e}")

def generate_image_with_dalle(prompt, generation_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DALL¬∑E 3 —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    for attempt in range(MAX_ATTEMPTS):
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_ATTEMPTS}: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ DALL¬∑E 3: {prompt[:100]}...")
            response = openai.Image.create(
                prompt=prompt,
                n=NUM_IMAGES,
                size=IMAGE_SIZE,
                model="dall-e-3",
                response_format="b64_json"
            )
            image_data = response["data"][0]["b64_json"]
            image_path = f"{generation_id}.{OUTPUT_IMAGE_FORMAT}"
            with open(image_path, "wb") as f:
                f.write(base64.b64decode(image_data))
            with Image.open(image_path) as img:
                logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º: {img.size}")
            return image_path
        except Exception as e:
            handle_error(logger, f"DALL¬∑E Image Generation Error (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_ATTEMPTS})", e)
            if attempt == MAX_ATTEMPTS - 1:
                logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DALL¬∑E.")
                return None
    return None


def generate_image(prompt, generation_id):
    if MIDJOURNEY_ENABLED:
        logger.info("üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º Midjourney –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return generate_image_with_midjourney(prompt, generation_id)
    elif DALLE_ENABLED:
        logger.info("üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º DALL¬∑E 3 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return generate_image_with_dalle(prompt, generation_id)
    else:
        raise ValueError("–ù–∏ Midjourney, –Ω–∏ DALL¬∑E 3 –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ")

def resize_existing_image(image_path):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 1280x768."""
    try:
        with Image.open(image_path) as img:
            resized = img.resize((1280, 768))
            resized.save(image_path)
        logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω: {image_path}")
        return True
    except Exception as e:
        handle_error(logger, "Image Resize Error", e)
        return False


def clean_script_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è Runway."""
    cleaned = text.replace('\n', ' ').replace('\r', ' ')
    cleaned = ' '.join(cleaned.split())
    return cleaned[:980]


def create_mock_video(image_path, output_path, duration=10):
    """–°–æ–∑–¥–∞–µ—Ç –∏–º–∏—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        logger.info(f"üé• –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ {image_path} –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration} —Å–µ–∫")
        clip = ImageClip(image_path, duration=duration)
        clip.write_videofile(
            output_path,
            codec="libx264",
            fps=24,
            audio=False,
            logger=None
        )
        logger.info(f"‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
        return output_path
    except Exception as e:
        handle_error(logger, "Mock Video Creation Error", e)
        return None


def generate_runway_video(image_path, script_text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Runway ML –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –∏–º–∏—Ç–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤."""
    api_key = os.getenv("RUNWAY_API_KEY")
    if not api_key:
        logger.error("‚ùå RUNWAY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    try:
        with open(image_path, "rb") as img_file:
            base64_image = base64.b64encode(img_file.read()).decode("utf-8")
        client = RunwayML(api_key=api_key)
        task = client.image_to_video.create(
            model="gen3a_turbo",
            prompt_image=f"data:image/png;base64,{base64_image}",
            prompt_text=script_text,
            duration=10,
            ratio="1280:768"
        )
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ Runway —Å–æ–∑–¥–∞–Ω–∞. ID: {task.id}")
        while True:
            status = client.tasks.retrieve(task.id)
            if status.status == "SUCCEEDED":
                logger.info("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                return status.output[0]  # URL –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≤–∏–¥–µ–æ
            elif status.status == "FAILED":
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ Runway")
                return None
            time.sleep(5)
    except Exception as e:
        error_msg = str(e)
        if "credits" in error_msg.lower():
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ Runway: {error_msg}")
            video_path = image_path.replace(".png", ".mp4")
            mock_video = create_mock_video(image_path, video_path)
            if mock_video:
                logger.info(f"üîÑ –ó–∞–º–µ–Ω–∞: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏–º–∏—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ: {mock_video}")
                return mock_video
        handle_error(logger, "Runway Video Generation Error", e)
        return None


def download_video(url, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL."""
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        with open(output_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        return True
    except Exception as e:
        handle_error(logger, "Video Download Error", e)
        return False


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞...")
    try:
        with open(CONFIG_GEN_PATH, 'r', encoding='utf-8') as file:
            config_gen = json.load(file)
        generation_id = config_gen["generation_id"].split('.')[0]
        logger.info(f"üìÇ ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_id}")

        b2_client = get_b2_client()
        if not b2_client:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç B2")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º generated_content.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è first_frame_description
        with open(CONTENT_OUTPUT_PATH, 'r', encoding='utf-8') as f:
            generated_content = json.load(f)
        topic_data = generated_content.get("topic", "")
        if isinstance(topic_data, dict):
            topic = topic_data.get("topic", "")
        else:
            topic = topic_data or generated_content.get("content", "")
        if not topic:
            raise ValueError("–¢–µ–º–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø—É—Å—Ç—ã!")
        logger.info(f"üìù –¢–µ–º–∞: {topic[:100]}...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º first_frame_description –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        first_frame_description = generated_content.get("first_frame_description", "")
        if not first_frame_description:
            script_text, first_frame_description = generate_script_and_frame(topic)
            if not script_text or not first_frame_description:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
            generated_content["script"] = script_text
            generated_content["first_frame_description"] = first_frame_description
            with open(CONTENT_OUTPUT_PATH, 'w', encoding='utf-8') as f:
                json.dump(generated_content, f, ensure_ascii=False, indent=4)
            logger.info(f"‚úÖ JSON –æ–±–Ω–æ–≤–ª—ë–Ω —Å –Ω–æ–≤—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º: {CONTENT_OUTPUT_PATH}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ midjourney_results
        midjourney_results = check_midjourney_results(b2_client)
        if midjourney_results:
            image_urls = midjourney_results["image_urls"]
            best_image_url = select_best_image(b2_client, image_urls, first_frame_description)
            image_path = f"{generation_id}.{OUTPUT_IMAGE_FORMAT}"
            response = requests.get(best_image_url, stream=True)
            response.raise_for_status()
            with open(image_path, "wb") as f:
                f.write(response.content)
            logger.info(f"‚úÖ –õ—É—á—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")
            remove_midjourney_results(b2_client)  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
        else:
            download_file_from_b2(b2_client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
            with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
                config_public = json.load(file)

            if "empty" in config_public and config_public["empty"]:
                target_folder = config_public["empty"][0]
                logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {target_folder}")
            else:
                raise ValueError("–°–ø–∏—Å–æ–∫ 'empty' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            script_text, first_frame_description = generate_script_and_frame(topic)
            if not script_text or not first_frame_description:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ")

            generated_content["script"] = script_text
            generated_content["first_frame_description"] = first_frame_description
            with open(CONTENT_OUTPUT_PATH, 'w', encoding='utf-8') as f:
                json.dump(generated_content, f, ensure_ascii=False, indent=4)
            logger.info(f"‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {CONTENT_OUTPUT_PATH}")

            image_path = generate_image(first_frame_description, generation_id)  # –ó–∞–ø—Ä–æ—Å –∫ Midjourney —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º

        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ —Å image_path
        if not resize_existing_image(image_path):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        cleaned_script = clean_script_text(script_text)
        video_result = generate_runway_video(image_path, cleaned_script)
        video_path = None
        if video_result:
            if video_result.startswith("http"):
                video_path = f"{generation_id}.mp4"
                if not download_video(video_result, video_path):
                    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
            else:
                video_path = video_result
                logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ: {video_path}")

        upload_to_b2(b2_client, target_folder, image_path)
        if video_path and os.path.exists(video_path):
            upload_to_b2(b2_client, target_folder, video_path)

        update_config_public(b2_client, target_folder)
        reset_processing_lock(b2_client)

        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {B2_STORAGE_MANAGER_SCRIPT}")
        subprocess.run([sys.executable, B2_STORAGE_MANAGER_SCRIPT], check=True)

    except Exception as e:
        handle_error(logger, "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", e)
        raise

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)