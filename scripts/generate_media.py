import os
import json
import boto3
import sys
import subprocess
import openai
import requests
import base64
import time
from PIL import Image
from runwayml import RunwayML

from modules.utils import ensure_directory_exists
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.config_manager import ConfigManager

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–≥–µ—Ä–∞ ===
config = ConfigManager()
logger = get_logger("generate_media")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ ===
B2_BUCKET_NAME = config.get('API_KEYS.b2.bucket_name')
B2_ENDPOINT = config.get('API_KEYS.b2.endpoint')
B2_ACCESS_KEY = config.get('API_KEYS.b2.access_key')
B2_SECRET_KEY = config.get('API_KEYS.b2.secret_key')

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CONFIG_GEN_PATH = os.path.abspath(config.get("FILE_PATHS.config_gen", "config/config_gen.json"))
CONFIG_PUBLIC_REMOTE_PATH = config.get("FILE_PATHS.config_public", "config/config_public.json")
CONFIG_PUBLIC_LOCAL_PATH = os.path.abspath(config.get("FILE_PATHS.config_public_local", "config_public.json"))
CONTENT_OUTPUT_PATH = config.get("FILE_PATHS.content_output_path", "generated_content.json")
SCRIPTS_FOLDER = os.path.abspath(config.get("FILE_PATHS.scripts_folder", "scripts"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (—Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
USER_PROMPT_COMBINED = config.get("PROMPTS.user_prompt_combined", "Write a detailed script for a video on '{topic}'...")
OPENAI_MODEL = config.get("OPENAI_SETTINGS.model", "gpt-4-turbo")
OPENAI_MAX_TOKENS = config.get("OPENAI_SETTINGS.max_tokens", 1000)
OPENAI_TEMPERATURE = config.get("OPENAI_SETTINGS.temperature", 0.7)
MIN_SCRIPT_LENGTH = config.get("VISUAL_ANALYSIS.min_script_length", 200)
IMAGE_SIZE_DALLE = config.get("IMAGE_GENERATION.image_size", "1024x1024")
NUM_IMAGES = config.get("IMAGE_GENERATION.num_images", 1)
OUTPUT_IMAGE_FORMAT = config.get("PATHS.output_image_format", "png")

B2_STORAGE_MANAGER_SCRIPT = os.path.join(SCRIPTS_FOLDER, "b2_storage_manager.py")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ–∫—Ä–µ—Ç—ã GitHub)
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise ValueError("API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Backblaze B2 ===
def get_b2_client():
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç B2 (S3) –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
    try:
        client = boto3.client(
            's3',
            endpoint_url=B2_ENDPOINT,
            aws_access_key_id=B2_ACCESS_KEY,
            aws_secret_access_key=B2_SECRET_KEY
        )
        return client
    except Exception as e:
        handle_error(logger, "B2 Client Initialization Error", e)
        return None

def download_file_from_b2(client, remote_path, local_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ B2 (S3) –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    try:
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ B2: {remote_path} -> {local_path}")
        ensure_directory_exists(os.path.dirname(local_path))
        client.download_file(B2_BUCKET_NAME, remote_path, local_path)
        logger.info(f"‚úÖ –§–∞–π–ª '{remote_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {local_path}")
    except Exception as e:
        handle_error(logger, "B2 Download Error", e)

def upload_to_b2(client, folder, file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É B2 –∏ —É–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é."""
    try:
        file_name = os.path.basename(file_path)
        if not folder.endswith('/'):
            folder += '/'
        s3_key = f"{folder}{file_name}"
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ B2: {file_path} -> {s3_key}")
        client.upload_file(file_path, B2_BUCKET_NAME, s3_key)
        logger.info(f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ B2: {s3_key}")
        os.remove(file_path)
        logger.info(f"üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")
    except Exception as e:
        handle_error(logger, "B2 Upload Error", e)

def update_config_public(client, folder):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç config_public.json: —É–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ 'empty'."""
    try:
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config_public.json: —É–¥–∞–ª–µ–Ω–∏–µ {folder} –∏–∑ —Å–ø–∏—Å–∫–∞ 'empty'")
        download_file_from_b2(client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)
        if "empty" in config_public and folder in config_public["empty"]:
            config_public["empty"].remove(folder)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(config_public, file, ensure_ascii=False, indent=4)
        client.upload_file(CONFIG_PUBLIC_LOCAL_PATH, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH)
        logger.info("‚úÖ config_public.json –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ B2.")
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
    except Exception as e:
        handle_error(logger, "Config Public Update Error", e)

def reset_processing_lock(client):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ processing_lock –≤ config_public.json."""
    try:
        logger.info("üîÑ –°–±—Ä–æ—Å processing_lock –≤ config_public.json")
        download_file_from_b2(client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)
        if config_public.get("processing_lock", False):
            config_public["processing_lock"] = False
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(config_public, file, ensure_ascii=False, indent=4)
        client.upload_file(CONFIG_PUBLIC_LOCAL_PATH, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH)
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
    except Exception as e:
        handle_error(logger, "Processing Lock Reset Error", e)

# === –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –≤–∏–¥–µ–æ ===
def generate_script_and_frame(topic):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è –≤–∏–¥–µ–æ."""
    try:
        combined_prompt = USER_PROMPT_COMBINED.replace("{topic}", topic)
        logger.info(f"üîé –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è: {combined_prompt[:100]}...")
        response = openai.ChatCompletion.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": combined_prompt}],
            max_tokens=OPENAI_MAX_TOKENS,
            temperature=OPENAI_TEMPERATURE,
        )
        combined_response = response['choices'][0]['message']['content'].strip()
        if len(combined_response) < MIN_SCRIPT_LENGTH:
            logger.error(f"‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(combined_response)} —Å–∏–º–≤–æ–ª–æ–≤")
            return None, None
        if "First Frame Description:" not in combined_response or "End of Description" not in combined_response:
            logger.error("‚ùå –ú–∞—Ä–∫–µ—Ä—ã –∫–∞–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ!")
            return None, None
        script_text = combined_response.split("First Frame Description:")[0].strip()
        first_frame_description = combined_response.split("First Frame Description:")[1].split("End of Description")[0].strip()
        logger.info(f"üé¨ –°—Ü–µ–Ω–∞—Ä–∏–π: {script_text[:100]}...")
        logger.info(f"üñºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞: {first_frame_description[:100]}...")
        return script_text, first_frame_description
    except Exception as e:
        handle_error(logger, "Script and Frame Generation Error", e)
        return None, None

def generate_image_with_dalle(prompt, generation_id):
    response = openai.Image.create(
        prompt=prompt,
        n=NUM_IMAGES,
        size=IMAGE_SIZE_DALLE,
        model="dall-e-3",
        response_format="b64_json"
    )
    image_data = response["data"][0]["b64_json"]
    image_path = f"{generation_id}.png"
    with open(image_path, "wb") as f:
        f.write(base64.b64decode(image_data))
    with Image.open(image_path) as img:
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º: {img.size}")
    return image_path

def resize_existing_image(image_path):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 1280x768."""
    try:
        with Image.open(image_path) as img:
            resized = img.resize((1280, 768))
            resized.save(image_path)
        logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω: {image_path}")
        return True
    except Exception as e:
        handle_error(logger, "Image Resize Error", e)
        return False

def clean_script_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è Runway."""
    cleaned = text.replace('\n', ' ').replace('\r', ' ')
    cleaned = ' '.join(cleaned.split())
    return cleaned[:980]

def generate_runway_video(image_path, script_text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Runway ML."""
    api_key = os.getenv("RUNWAY_API_KEY")
    if not api_key:
        logger.error("‚ùå RUNWAY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    try:
        with open(image_path, "rb") as img_file:
            base64_image = base64.b64encode(img_file.read()).decode("utf-8")
        client = RunwayML(api_key=api_key)
        task = client.image_to_video.create(
            model="gen3a_turbo",
            prompt_image=f"data:image/png;base64,{base64_image}",
            prompt_text=script_text,
            duration=10,
            ratio="1280:768"
        )
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ Runway —Å–æ–∑–¥–∞–Ω–∞. ID: {task.id}")
        while True:
            status = client.tasks.retrieve(task.id)
            if status.status == "SUCCEEDED":
                logger.info("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                return status.output[0]
            elif status.status == "FAILED":
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
                return None
            time.sleep(5)
    except Exception as e:
        handle_error(logger, "Runway Video Generation Error", e)
        return None

def download_video(url, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL."""
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        with open(output_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        return True
    except Exception as e:
        handle_error(logger, "Video Download Error", e)
        return False

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞...")
    try:
        # –ß—Ç–µ–Ω–∏–µ config_gen.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        with open(CONFIG_GEN_PATH, 'r', encoding='utf-8') as file:
            config_gen = json.load(file)
        generation_id = config_gen["generation_id"].split('.')[0]  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json
        logger.info(f"üìÇ ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_id}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ B2
        b2_client = get_b2_client()
        if not b2_client:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç B2")

        # –ó–∞–≥—Ä—É–∑–∫–∞ config_public.json
        download_file_from_b2(b2_client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)

        # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏
        if "empty" in config_public and config_public["empty"]:
            target_folder = config_public["empty"][0]
            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {target_folder}")
        else:
            raise ValueError("–°–ø–∏—Å–æ–∫ 'empty' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã –∏–∑ generated_content.json
        with open(CONTENT_OUTPUT_PATH, 'r', encoding='utf-8') as f:
            generated_content = json.load(f)
        topic_data = generated_content.get("topic", "")
        if isinstance(topic_data, dict):
            topic = topic_data.get("topic", "")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ {"topic": "..."}
        else:
            topic = topic_data or generated_content.get("content", "")
        if not topic:
            raise ValueError("–¢–µ–º–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø—É—Å—Ç—ã!")
        logger.info(f"üìù –¢–µ–º–∞: {topic[:100]}...")  # –°—Ä–µ–∑ –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ —Å—Ç—Ä–æ–∫–µ

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        script_text, first_frame_description = generate_script_and_frame(topic)
        if not script_text or not first_frame_description:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        generated_content["script"] = script_text
        generated_content["first_frame_description"] = first_frame_description
        with open(CONTENT_OUTPUT_PATH, 'w', encoding='utf-8') as f:
            json.dump(generated_content, f, ensure_ascii=False, indent=4)
        logger.info(f"‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {CONTENT_OUTPUT_PATH}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = generate_image_with_dalle(first_frame_description, generation_id)
        if not image_path:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not resize_existing_image(image_path):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
        cleaned_script = clean_script_text(script_text)
        video_url = generate_runway_video(image_path, cleaned_script)
        video_path = None
        if video_url:
            video_path = f"{generation_id}.mp4"
            if not download_video(video_url, video_path):
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
        else:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ B2 (—Ç–æ–ª—å–∫–æ .png –∏ .mp4, –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
        upload_to_b2(b2_client, target_folder, image_path)
        if video_path and os.path.exists(video_path):
            upload_to_b2(b2_client, target_folder, video_path)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        update_config_public(b2_client, target_folder)
        reset_processing_lock(b2_client)

        # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ b2_storage_manager.py
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {B2_STORAGE_MANAGER_SCRIPT}")
        subprocess.run([sys.executable, B2_STORAGE_MANAGER_SCRIPT], check=True)

    except Exception as e:
        handle_error(logger, "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", e)
        raise

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)