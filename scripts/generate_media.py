# core/scripts/generate_media.py

import os
import json
import boto3
import botocore

from modules.utils import ensure_directory_exists
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.config_manager import ConfigManager

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
logger = get_logger("generate_media")
config = ConfigManager()

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
B2_BUCKET_NAME = config.get('API_KEYS.b2.bucket_name')
B2_ENDPOINT = config.get('API_KEYS.b2.endpoint')
B2_ACCESS_KEY = config.get('API_KEYS.b2.access_key')
B2_SECRET_KEY = config.get('API_KEYS.b2.secret_key')
CONFIG_GEN_PATH = os.path.abspath('config/config_gen.json')  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å config_gen.json
CONFIG_PUBLIC_REMOTE_PATH = "config/config_public.json"  # –ü—É—Ç—å –≤ B2
CONFIG_PUBLIC_LOCAL_PATH = os.path.abspath('config_public.json')  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª

# === –§—É–Ω–∫—Ü–∏–∏ ===
def get_b2_client():
    try:
        return boto3.client(
            's3',
            endpoint_url=B2_ENDPOINT,
            aws_access_key_id=B2_ACCESS_KEY,
            aws_secret_access_key=B2_SECRET_KEY
        )
    except Exception as e:
        handle_error(logger, f"B2 Client Initialization Error: {e}")


def download_file_from_b2(client, remote_path, local_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ B2 (S3)."""
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –∏–∑ B2: {remote_path} -> {local_path}")
        ensure_directory_exists(os.path.dirname(local_path))

        b2_client = get_b2_client()
        if not isinstance(b2_client, botocore.client.BaseClient):
            raise TypeError("‚ùå –û—à–∏–±–∫–∞: b2_client –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º S3-–∫–ª–∏–µ–Ω—Ç–∞!")

        logger.info(f"üõ† b2_client –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º download_file_from_b2(): {b2_client}")
        logger.info(f"üîç download_file(): Bucket={B2_BUCKET_NAME}, Key={remote_path}, Filename={local_path}")
        logger.info(f"üîç –¢–∏–ø client: {type(client)}")
        logger.info(f"üîç –¢–∏–ø remote_path: {type(remote_path)}")
        logger.info(f"üîç –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º .download_file() –≤ download_file_from_b2(): {type(client)}")
        client.download_file(Bucket=B2_BUCKET_NAME, Key=remote_path, Filename=local_path)  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        logger.info(f"‚úÖ –§–∞–π–ª '{remote_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ B2 –≤ {local_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {remote_path}: {e}")
        handle_error(logger, f"B2 Download Error: {e}")


def upload_to_b2(client, folder, file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ B2."""
    try:
        file_name = os.path.basename(file_path)
        s3_key = os.path.join(folder, file_name)
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –≤ B2: {file_path} -> {s3_key}")
        client.upload_file(file_path, B2_BUCKET_NAME, s3_key)
        logger.info(f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ B2: {s3_key}")
        os.remove(file_path)
        logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")
    except Exception as e:
        handle_error(logger, f"B2 Upload Error: {e}")

def generate_mock_video(file_id):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–≥–ª—É—à–∫—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞."""
    video_path = f"{file_id}.mp4"
    try:
        logger.info(f"üé• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞: {video_path}")
        with open(video_path, 'wb') as video_file:
            video_file.write(b'\0' * 1024 * 1024)  # 1 MB —Ñ–∞–π–ª
        logger.info(f"‚úÖ –í–∏–¥–µ–æ '{video_path}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        return video_path
    except Exception as e:
        handle_error(logger, f"Video Generation Error: {e}")

def update_config_public(client, folder):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç config_public.json, —É–¥–∞–ª—è—è –ø–∞–ø–∫—É –∏–∑ 'empty'."""
    try:
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config_public.json: —É–¥–∞–ª–µ–Ω–∏–µ {folder} –∏–∑ —Å–ø–∏—Å–∫–∞ 'empty'")
        logger.info(f"üõ† –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º download_file_from_b2(): client={type(client)}")
        download_file_from_b2(client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)

        if "empty" in config_public and folder in config_public["empty"]:
            config_public["empty"].remove(folder)
            logger.info(f"‚úÖ –ü–∞–ø–∫–∞ {folder} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ 'empty'. –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {config_public}")

        with open(CONFIG_PUBLIC_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(config_public, file, ensure_ascii=False, indent=4)

        logger.info(f"üõ† –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º upload_file(): client={type(client)}")
        client.upload_file(CONFIG_PUBLIC_LOCAL_PATH, B2_BUCKET_NAME, CONFIG_PUBLIC_REMOTE_PATH)
        logger.info(f"‚úÖ config_public.json –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ B2.")
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
    except Exception as e:
        handle_error(logger, f"Config Public Update Error: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞."""
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞...")
    try:
        # –ß–∏—Ç–∞–µ–º config_gen.json
        logger.info(f"üìÑ –ß–∏—Ç–∞–µ–º config_gen.json: {CONFIG_GEN_PATH}")
        with open(CONFIG_GEN_PATH, 'r', encoding='utf-8') as file:
            config_gen = json.load(file)

        file_id = os.path.splitext(config_gen["generation_id"])[0]
        logger.info(f"üìÇ ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {file_id}")

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç B2
        b2_client = get_b2_client()

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        logger.info(f"üöÄ generate_media.py –≤—ã–∑–≤–∞–Ω –∏–∑: {os.environ.get('GITHUB_WORKFLOW', '–ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫')}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º config_public.json
        download_file_from_b2(b2_client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            config_public = json.load(file)

        logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π config_public.json: {config_public}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫
        if "empty" in config_public and config_public["empty"]:
            target_folder = config_public["empty"][0]
            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {target_folder}")
        else:
            raise ValueError("‚ùå –û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ 'empty' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç –≤ config_public.json")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ B2
        video_path = generate_mock_video(file_id)
        upload_to_b2(b2_client, target_folder, video_path)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config_public.json
        update_config_public(b2_client, target_folder)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        handle_error(logger, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ B2", e)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

