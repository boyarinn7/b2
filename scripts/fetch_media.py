import os
import time
import requests
import json
import subprocess
import logging
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from modules.config_manager import ConfigManager
from modules.api_clients import get_b2_client

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("fetch_media")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_MIDJOURNEY_LOCAL_PATH = "config_midjourney.json"
CONFIG_MIDJOURNEY_REMOTE_PATH = "config/config_midjourney.json"
CONFIG_PUBLIC_LOCAL_PATH = "config_public.json"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
CONFIG_PUBLIC_PATH = "config/config_public.json"
CONFIG_FETCH_PATH = "config/config_fetch.json"
MIDJOURNEY_API_KEY = os.getenv("MIDJOURNEY_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
config = ConfigManager()
b2_client = get_b2_client()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
def load_config(file_path):
    try:
        config_obj = b2_client.get_object(Bucket=config.get("API_KEYS.b2.bucket_name"), Key=file_path)
        return json.loads(config_obj['Body'].read().decode('utf-8'))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ {file_path}: {e}")
        if "NoSuchKey" in str(e):
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
            return {"done": False, "fetch_attempts": 0} if file_path == CONFIG_FETCH_PATH else {}
        return {}

def save_config(file_path, config_data):
    json_str = json.dumps(config_data, ensure_ascii=False, indent=4)
    b2_client.put_object(
        Bucket=config.get("API_KEYS.b2.bucket_name"),
        Key=file_path,
        Body=json_str.encode('utf-8')
    )
    logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {file_path}")

def load_config_midjourney(client):
    bucket_name = os.getenv("B2_BUCKET_NAME")
    try:
        client.download_file(bucket_name, CONFIG_MIDJOURNEY_REMOTE_PATH, CONFIG_MIDJOURNEY_LOCAL_PATH)
        with open(CONFIG_MIDJOURNEY_LOCAL_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {CONFIG_MIDJOURNEY_REMOTE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π: {e}")
        return {"midjourney_task": None}

def save_config_midjourney(client, data):
    bucket_name = os.getenv("B2_BUCKET_NAME")
    try:
        with open(CONFIG_MIDJOURNEY_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
        client.upload_file(CONFIG_MIDJOURNEY_LOCAL_PATH, bucket_name, CONFIG_MIDJOURNEY_REMOTE_PATH)
        logger.info(f"‚úÖ config_midjourney.json —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ B2: {json.dumps(data, ensure_ascii=False)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è config_midjourney.json: {e}")
        raise

def load_config_public(client):
    bucket_name = os.getenv("B2_BUCKET_NAME")
    try:
        client.download_file(bucket_name, CONFIG_PUBLIC_PATH, CONFIG_PUBLIC_LOCAL_PATH)
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {CONFIG_PUBLIC_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π: {e}")
        return {}

def save_config_public(client, data):
    bucket_name = os.getenv("B2_BUCKET_NAME")
    try:
        with open(CONFIG_PUBLIC_LOCAL_PATH, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
        client.upload_file(CONFIG_PUBLIC_LOCAL_PATH, bucket_name, CONFIG_PUBLIC_PATH)
        logger.info(f"‚úÖ config_public.json —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ B2")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è config_public.json: {e}")
        raise

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def fetch_midjourney_result(task_id):
    headers = {"X-API-Key": MIDJOURNEY_API_KEY}
    response = requests.get(f"{config.get('API_KEYS.midjourney.task_endpoint')}/{task_id}", headers=headers, timeout=30)
    data = response.json()
    if data["code"] == 200 and data["data"]["status"] == "completed":
        image_url = data["data"]["output"]["image_url"]
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: {image_url}")
        return image_url
    elif data["data"]["status"] == "pending":
        logger.info("‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ –µ—â—ë –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
        return None
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {data}")

def fetch_dalle_result(prompt, generation_id):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è DALL¬∑E 3, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ generate_media.py
    logger.info(f"‚ÑπÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ DALL¬∑E 3 –¥–ª—è {generation_id} —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt[:50]}...")
    return None  # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ

def main():
    config_fetch = load_config(CONFIG_FETCH_PATH)
    if config_fetch.get("done"):
        logger.info("‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (done: true), –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
        return

    config_midjourney = load_config_midjourney(b2_client)
    if "midjourney_task" not in config_midjourney or not config_midjourney["midjourney_task"]:
        logger.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ config_midjourney.json")
        sys.exit(0)
    task_info = config_midjourney["midjourney_task"]
    task_id = task_info["task_id"]
    sent_at = task_info["sent_at"]
    current_time = int(time.time())
    elapsed_time = current_time - sent_at
    fetch_attempts = config_fetch.get("fetch_attempts", 0)

    logger.info(f"‚ÑπÔ∏è –ü—Ä–æ—à–ª–æ {elapsed_time} —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ {task_id}, –ø–æ–ø—ã—Ç–∫–∞ {fetch_attempts + 1}")

    check_intervals = [60, 120, 180, 300, 600]  # 15, 20, 30, 60, 300 –º–∏–Ω—É—Ç
    if elapsed_time < check_intervals[0]:
        logger.info(f"‚ÑπÔ∏è –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ ({elapsed_time} —Å–µ–∫ < 15 –º–∏–Ω), –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
        return

    config_public = load_config_public(b2_client)  # –ó–∞–≥—Ä—É–∂–∞–µ–º config_public –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    if elapsed_time >= check_intervals[min(fetch_attempts, len(check_intervals) - 1)]:
        image_url = fetch_midjourney_result(task_id)
        if image_url:
            config_public["midjourney_results"] = {
                "task_id": task_id,
                "image_urls": [image_url]
            }
            save_config_public(b2_client, config_public)
            config_fetch["done"] = True
            config_fetch["fetch_attempts"] = 0
            save_config(CONFIG_FETCH_PATH, config_fetch)
            config_midjourney["midjourney_task"] = None  # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
            save_config_midjourney(b2_client, config_midjourney)
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, config_midjourney.json –æ—á–∏—â–µ–Ω.")
            logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º b2_storage_manager.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            subprocess.run(["python", "scripts/b2_storage_manager.py"])
        else:
            fetch_attempts += 1
            config_fetch["fetch_attempts"] = fetch_attempts

            if fetch_attempts >= 5:  # –ü–æ—Å–ª–µ 300 –º–∏–Ω—É—Ç
                logger.warning("‚ö†Ô∏è MidJourney –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 5 —á–∞—Å–æ–≤")
                if config.get("IMAGE_GENERATION.dalle_enabled", False):
                    logger.info("‚ÑπÔ∏è –ü—Ä–æ–±—É–µ–º DALL¬∑E 3 –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                    with open("config/config_gen.json", "r") as f:
                        gen_config = json.load(f)
                    generation_id = gen_config["generation_id"].split('.')[0]
                    with open("generated_content.json", "r") as f:
                        content = json.load(f)
                    prompt = content.get("first_frame_description", "Fallback prompt")
                    dalle_url = fetch_dalle_result(prompt, generation_id)
                    if dalle_url:
                        config_public["midjourney_results"] = {"task_id": task_id, "image_urls": [dalle_url]}
                        save_config_public(b2_client, config_public)
                        config_fetch["done"] = True
                    else:
                        logger.error("‚ùå DALL¬∑E 3 —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É")
                        config_fetch["done"] = False
                    config_fetch["fetch_attempts"] = 0
                    config_midjourney["midjourney_task"] = None  # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
                    save_config_midjourney(b2_client, config_midjourney)
                else:
                    logger.info("‚ÑπÔ∏è DALL¬∑E 3 –æ—Ç–∫–ª—é—á—ë–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É")
                    config_fetch["done"] = False
                    config_fetch["fetch_attempts"] = 0
                    config_midjourney["midjourney_task"] = None  # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
                    save_config_midjourney(b2_client, config_midjourney)
            save_config(CONFIG_FETCH_PATH, config_fetch)
            logger.info(f"‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ {fetch_attempts}/5 –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()