import os
import time
import requests
import json
import boto3
import subprocess
import logging
from botocore.exceptions import ClientError

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("fetch_media")

B2_ACCESS_KEY = os.getenv("B2_ACCESS_KEY")
B2_SECRET_KEY = os.getenv("B2_SECRET_KEY")
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")
MIDJOURNEY_API_KEY = os.getenv("MIDJOURNEY_API_KEY")

b2_client = boto3.client(
    "s3",
    endpoint_url="https://s3.us-east-005.backblazeb2.com",
    aws_access_key_id=B2_ACCESS_KEY,
    aws_secret_access_key=B2_SECRET_KEY
)

CONFIG_PUBLIC_PATH = "config/config_public.json"
CONFIG_FETCH_PATH = "config/config_fetch.json"

def load_config(file_path):
    try:
        config_obj = b2_client.get_object(Bucket=B2_BUCKET_NAME, Key=file_path)
        return json.loads(config_obj['Body'].read().decode('utf-8'))
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchKey':
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
            return {"done": False, "fetch_attempts": 0} if file_path == CONFIG_FETCH_PATH else {}
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ {file_path}: {e}")
        return {}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path}: {e}")
        return {}

def save_config(file_path, config_data):
    json_str = json.dumps(config_data, ensure_ascii=False, indent=4)
    b2_client.put_object(
        Bucket=B2_BUCKET_NAME,
        Key=file_path,
        Body=json_str.encode('utf-8')
    )
    logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {file_path}")

def fetch_midjourney_result(task_id):
    headers = {"X-API-Key": MIDJOURNEY_API_KEY}
    response = requests.get(f"https://api.piapi.ai/api/v1/task/{task_id}", headers=headers)
    data = response.json()
    if data["code"] == 200 and data["data"]["status"] == "completed":
        image_url = data["data"]["output"]["image_url"]
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: {image_url}")
        return image_url
    elif data["data"]["status"] == "pending":
        logger.info("‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ –µ—â—ë –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
        return None
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {data}")

def main():
    config_fetch = load_config(CONFIG_FETCH_PATH)
    if config_fetch.get("done"):
        logger.info("‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (done: true), –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
        return

    config_public = load_config(CONFIG_PUBLIC_PATH)
    if "midjourney_task" not in config_public:
        logger.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ config_public.json")
        return

    task_id = config_public["midjourney_task"]["task_id"]
    sent_at = config_public["midjourney_task"]["sent_at"]
    current_time = int(time.time())
    elapsed_time = current_time - sent_at

    logger.info(f"‚ÑπÔ∏è –ü—Ä–æ—à–ª–æ {elapsed_time} —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ {task_id}")

    if elapsed_time >= 900:  # 15 –º–∏–Ω—É—Ç
        image_url = fetch_midjourney_result(task_id)
        if image_url:
            config_public["midjourney_results"] = {
                "task_id": task_id,
                "image_urls": [image_url]
            }
            del config_public["midjourney_task"]
            save_config(CONFIG_PUBLIC_PATH, config_public)
            config_fetch["done"] = True
            config_fetch["fetch_attempts"] = 0
            save_config(CONFIG_FETCH_PATH, config_fetch)
            logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º b2_storage_manager.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            subprocess.run(["python", "scripts/b2_storage_manager.py"])
        else:
            config_fetch["fetch_attempts"] = config_fetch.get("fetch_attempts", 0) + 1
            if config_fetch["fetch_attempts"] >= 3:
                logger.error("‚ùå –≠–π, MidJourney, –≥–¥–µ –º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç—ã –ª–µ–Ω–∏–≤—ã–µ?!")
                config_fetch["done"] = False
                config_fetch["fetch_attempts"] = 0
                save_config(CONFIG_FETCH_PATH, config_fetch)
                logger.info("‚ÑπÔ∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º fetch_attempts, –æ—Å—Ç–∞–≤–ª—è–µ–º midjourney_task –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
            else:
                save_config(CONFIG_FETCH_PATH, config_fetch)
                logger.info(f"‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ {config_fetch['fetch_attempts']}/3, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
    else:
        logger.info(f"‚ÑπÔ∏è –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ ({elapsed_time} —Å–µ–∫ < 15 –º–∏–Ω), –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")

if __name__ == "__main__":
    main()