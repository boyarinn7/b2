# core/scripts/main.py

import os
import subprocess
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.config_manager import ConfigManager

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
config = ConfigManager()
logger = get_logger("main")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
LOG_FILE = os.path.join(config.get('FILE_PATHS.log_folder'), 'main.log')
RETRY_ATTEMPTS = config.get('OTHER.retry_attempts', 3)
TIMEOUT = config.get('OTHER.timeout_seconds', 30)

# –ü—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SCRIPTS = {
    "generate_content": os.path.join(BASE_DIR, "generate_content.py"),
    "generate_media": os.path.join(BASE_DIR, "generate_media.py"),
    "feedback_analyzer": os.path.join(BASE_DIR, "feedback_analyzer.py"),
    "learning_cycle": os.path.join(BASE_DIR, "learning_cycle.py"),
    "b2_storage_manager": os.path.join(BASE_DIR, "b2_storage_manager.py"),
    "itself": os.path.join(BASE_DIR, "itself.py")
}


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def run_script(script_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏."""
    script_path = SCRIPTS.get(script_name)
    if not script_path or not os.path.isfile(script_path):
        handle_error("Script Not Found", f"–°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {script_path}")

    try:
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {script_name}")
        subprocess.run(['python', script_path], check=True, timeout=TIMEOUT)
        logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç {script_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    except subprocess.CalledProcessError as e:
        handle_error("Script Execution Error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ {script_name}: {e}")
    except subprocess.TimeoutExpired:
        handle_error("Script Timeout", f"–°–∫—Ä–∏–ø—Ç {script_name} –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç {TIMEOUT} —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
        handle_error("Script Unknown Error", e)


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."""
    missing_scripts = [name for name, path in SCRIPTS.items() if not os.path.isfile(path)]
    if missing_scripts:
        handle_error("Missing Scripts", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã: {', '.join(missing_scripts)}")
    logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã. –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ.")


# === –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ===
def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Ü–∏–∫–ª —Å–∏—Å—Ç–µ–º—ã."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∏—Å—Ç–µ–º—ã...")
    check_dependencies()

    for script_name in SCRIPTS:
        logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {script_name}")
        attempt = 0
        while attempt < RETRY_ATTEMPTS:
            try:
                run_script(script_name)
                break
            except Exception as e:
                attempt += 1
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{RETRY_ATTEMPTS} –¥–ª—è {script_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π.")
                if attempt == RETRY_ATTEMPTS:
                    handle_error("Retry Limit Reached",
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {script_name} –ø–æ—Å–ª–µ {RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")

    logger.info("üèÅ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
