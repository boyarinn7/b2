import os
import boto3
import json
import logging # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –ù–∞—Å—Ç—Ä–æ–∏–º –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("reset_configs")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
B2_ACCESS_KEY = os.getenv("B2_ACCESS_KEY")
B2_SECRET_KEY = os.getenv("B2_SECRET_KEY")
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")
B2_ENDPOINT = os.getenv("B2_ENDPOINT")

# --- –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ ---
# –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ "status": null –¥–ª—è config_midjourney.json
CONFIG_FILES_TO_RESET = {
    "config/config_gen.json": {
        "generation_id": None
    },
    "config/config_midjourney.json": {
        "midjourney_task": None,
        "midjourney_results": {},
        "generation": False,
        "status": None  # <-- –î–û–ë–ê–í–õ–ï–ù–û: –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
    },
    "config/config_public.json": {
        "processing_lock": False
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–ø–∏—Å–æ–∫ "generation_id" –≤ config_public –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è —ç—Ç–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º.
        # –û–Ω –¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å—Å—è –ª–∏–±–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ—Å–ª–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏, –ª–∏–±–æ –≤—Ä—É—á–Ω—É—é,
        # –ª–∏–±–æ –≤–Ω–µ—à–Ω–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    }
}

# –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
LOCAL_TEMP_DIR = os.path.join(os.getcwd(), "temp_reset")
os.makedirs(LOCAL_TEMP_DIR, exist_ok=True)
logger.info(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {LOCAL_TEMP_DIR}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
if not all([B2_ACCESS_KEY, B2_SECRET_KEY, B2_BUCKET_NAME, B2_ENDPOINT]):
    logger.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è B2 (B2_ACCESS_KEY, B2_SECRET_KEY, B2_BUCKET_NAME, B2_ENDPOINT).")
    exit(1)

# --- –ö–ª–∏–µ–Ω—Ç B2 ---
try:
    s3 = boto3.client(
        "s3",
        endpoint_url=B2_ENDPOINT,
        aws_access_key_id=B2_ACCESS_KEY,
        aws_secret_access_key=B2_SECRET_KEY
    )
    logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç B2 (boto3) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
except Exception as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç B2: {e}", exc_info=True)
    exit(1)

def reset_config_file(file_key, desired_values):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    local_path = os.path.join(LOCAL_TEMP_DIR, f"temp_{os.path.basename(file_key)}")

    try:
        logger.info(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_key} ---")
        # 1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        logger.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º {file_key} -> {local_path}")
        s3.download_file(B2_BUCKET_NAME, file_key, local_path)
        logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω.")

        # 2. –ß—Ç–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        data = {}
        try:
            with open(local_path, "r", encoding="utf-8") as f:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π JSON
                content = f.read()
                if content.strip():
                    data = json.loads(content)
                    logger.info("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ.")
                else:
                    logger.warning("‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å –Ω—É–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
                    data = {} # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        except json.JSONDecodeError:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON. –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")
            data = {} # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
        except FileNotFoundError:
             logger.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è? –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
             data = {} # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏—Å—á–µ–∑

        updated = False
        current_values = data.copy() # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∞

        for key_to_reset, reset_value in desired_values.items():
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ–º—É,
            # –∏–ª–∏ –µ—Å–ª–∏ –∫–ª—é—á–∞ –≤–æ–æ–±—â–µ –Ω–µ—Ç (–¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ)
            if key_to_reset not in data or data.get(key_to_reset) != reset_value:
                logger.info(f"üîÑ –°–±—Ä–æ—Å –ø–æ–ª—è '{key_to_reset}': {data.get(key_to_reset)} -> {reset_value}")
                data[key_to_reset] = reset_value
                updated = True

        # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        if updated:
            logger.info("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º...")
            try:
                with open(local_path, "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=4) # –ò—Å–ø–æ–ª—å–∑—É–µ–º indent=4 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")

                logger.info(f"üîº –ó–∞–≥—Ä—É–∂–∞–µ–º {local_path} –æ–±—Ä–∞—Ç–Ω–æ –≤ {file_key}")
                s3.upload_file(local_path, B2_BUCKET_NAME, file_key)
                logger.info("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ B2.")
            except Exception as save_err:
                 logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–∑–∞–≥—Ä—É–∑–∫–µ {file_key}: {save_err}", exc_info=True)
                 # –ù–µ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
                 return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        else:
            logger.info("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±—É–µ–º—ã–º. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        logger.info(f"\nüìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ {file_key} –≤ B2:")
        logger.info(json.dumps(data, ensure_ascii=False, indent=4))

    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_key}: {e}", exc_info=True)
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(local_path):
            try:
                os.remove(local_path)
                logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {local_path}")
            except OSError as remove_err:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_path}: {remove_err}")

if __name__ == "__main__":
    logger.info("--- –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π ---")
    total_errors = 0
    for config_path, values_to_set in CONFIG_FILES_TO_RESET.items():
        try:
            reset_config_file(config_path, values_to_set)
        except Exception:
            total_errors += 1 # –°—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ

    logger.info("\n--- –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω ---")
    if total_errors > 0:
        logger.error(f"üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {total_errors}")
        exit(1) # –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
    else:
        logger.info("üéâ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–±—Ä–æ—à–µ–Ω—ã.")
