import os
import boto3
import json

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
B2_ACCESS_KEY = os.getenv("B2_ACCESS_KEY")
B2_SECRET_KEY = os.getenv("B2_SECRET_KEY")
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")
B2_ENDPOINT = os.getenv("B2_ENDPOINT")
LOCAL_GROUP_PATH = r"C:\Users\boyar\777\555\55"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([B2_ACCESS_KEY, B2_SECRET_KEY, B2_BUCKET_NAME, B2_ENDPOINT]):
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è B2.")
    exit(1)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç B2
s3 = boto3.client(
    "s3",
    endpoint_url=B2_ENDPOINT,
    aws_access_key_id=B2_ACCESS_KEY,
    aws_secret_access_key=B2_SECRET_KEY
)


def process_files():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã, —É–±–∏—Ä–∞–µ—Ç _mock, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç config"""
    try:
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        files_to_process = [
            "555/20250313-2338_mock.mp4",
            "555/20250313-2341_mock.mp4",
            "555/20250313-2342_mock.mp4",
            "555/20250313-2343_mock.mp4",
            "666/20250313-2340_mock.mp4"
        ]

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(LOCAL_GROUP_PATH):
            os.makedirs(LOCAL_GROUP_PATH)

        # 1. –°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for remote_file in files_to_process:
            # –£–±–∏—Ä–∞–µ–º _mock –∏–∑ –∏–º–µ–Ω–∏
            new_remote_file = remote_file.replace("_mock", "")
            local_file = os.path.join(LOCAL_GROUP_PATH, os.path.basename(new_remote_file))

            print(f"üîÑ –°–∫–∞—á–∏–≤–∞–µ–º {remote_file}")
            s3.download_file(B2_BUCKET_NAME, remote_file, local_file)
            print(f"‚úÖ –°–∫–∞—á–∞–Ω –∫–∞–∫ {local_file}")

            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
            print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º {local_file} -> {new_remote_file}")
            s3.upload_file(local_file, B2_BUCKET_NAME, new_remote_file)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ {new_remote_file}")

            # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            os.remove(local_file)

        # 3. –†–∞–±–æ—Ç–∞ —Å config —Ñ–∞–π–ª–æ–º
        config_path = os.path.join(LOCAL_GROUP_PATH, "config_public.json")
        remote_config = "config/config_public.json"

        # –°–∫–∞—á–∏–≤–∞–µ–º config
        print(f"üîÑ –°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ {remote_config}")
        s3.download_file(B2_BUCKET_NAME, remote_config, config_path)

        # –ß–∏—Ç–∞–µ–º –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º config
        with open(config_path, 'r', encoding='utf-8') as f:
            config_data = json.load(f)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º empty –∫–∞–∫ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        config_data['empty'] = []

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π config
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, ensure_ascii=False, indent=4)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config –æ–±—Ä–∞—Ç–Ω–æ
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥")
        s3.upload_file(config_path, B2_BUCKET_NAME, remote_config)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –æ–±–Ω–æ–≤–ª–µ–Ω")

        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π config
        os.remove(config_path)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    process_files()