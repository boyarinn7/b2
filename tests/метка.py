import os
import json
import boto3

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
B2_ACCESS_KEY = os.getenv("B2_ACCESS_KEY")
B2_SECRET_KEY = os.getenv("B2_SECRET_KEY")
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")
B2_ENDPOINT = os.getenv("B2_ENDPOINT")
CONFIG_FILE_PATH = "config/config_public.json"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([B2_ACCESS_KEY, B2_SECRET_KEY, B2_BUCKET_NAME, B2_ENDPOINT]):
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è B2.")
    exit(1)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç B2
s3 = boto3.client(
    "s3",
    endpoint_url=B2_ENDPOINT,
    aws_access_key_id=B2_ACCESS_KEY,
    aws_secret_access_key=B2_SECRET_KEY
)


def update_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ config_public.json."""
    try:
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º {CONFIG_FILE_PATH} –∏–∑ B2...")
        response = s3.get_object(Bucket=B2_BUCKET_NAME, Key=CONFIG_FILE_PATH)
        config_data = json.loads(response['Body'].read().decode('utf-8'))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á 'empty'
        if "empty" in config_data:
            config_data["empty"] = []

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –ª–æ–∫–∞–ª—å–Ω–æ
        local_filename = "updated_config.json"
        with open(local_filename, "w", encoding="utf-8") as f:
            json.dump(config_data, f, indent=4, ensure_ascii=False)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ B2
        print(f"üîº –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π {CONFIG_FILE_PATH} –≤ B2...")
        s3.upload_file(local_filename, B2_BUCKET_NAME, CONFIG_FILE_PATH)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")

        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        os.remove(local_filename)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {CONFIG_FILE_PATH}: {e}")


if __name__ == "__main__":
    update_config()
