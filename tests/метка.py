import json
import os
import boto3
import io

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
B2_ACCESS_KEY = os.getenv("B2_ACCESS_KEY")
B2_SECRET_KEY = os.getenv("B2_SECRET_KEY")
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")
B2_ENDPOINT = os.getenv("B2_ENDPOINT")
CONFIG_PUBLIC_PATH = "config/config_public.json"

# üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º B2-–∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ boto3 (S3 API)
s3 = boto3.client(
    "s3",
    endpoint_url=B2_ENDPOINT,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π B2 endpoint
    aws_access_key_id=B2_ACCESS_KEY,
    aws_secret_access_key=B2_SECRET_KEY,
)


def load_config_public():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç config_public.json –∏–∑ B2."""
    try:
        response = s3.get_object(Bucket=B2_BUCKET_NAME, Key=CONFIG_PUBLIC_PATH)
        return json.load(response["Body"])
    except s3.exceptions.NoSuchKey:
        print("‚ö†Ô∏è –§–∞–π–ª config_public.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ B2, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π JSON
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config_public.json: {e}")
        return {}


def save_config_public(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç config_public.json –æ–±—Ä–∞—Ç–Ω–æ –≤ B2."""
    try:
        json_data = json.dumps(data, ensure_ascii=False, indent=4).encode("utf-8")
        s3.put_object(Bucket=B2_BUCKET_NAME, Key=CONFIG_PUBLIC_PATH, Body=io.BytesIO(json_data))
        print(f"‚úÖ config_public.json –æ–±–Ω–æ–≤–ª—ë–Ω: {data}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è config_public.json: {e}")


def mark_as_published(generation_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç generation_id –≤ config_public.json, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —Å—Ç–∞—Ä—ã–µ ID."""
    config_data = load_config_public()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ generation_id
    existing_ids = config_data.get("generation_id", [])
    if isinstance(existing_ids, str):  # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
        existing_ids = [existing_ids]

    if generation_id not in existing_ids:
        existing_ids.append(generation_id)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π ID

    config_data["generation_id"] = existing_ids  # –û–±–Ω–æ–≤–ª—è–µ–º JSON

    save_config_public(config_data)
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω generation_id: {generation_id}")


if __name__ == "__main__":
    generation_id_to_publish = "20250124-0358"  # –£–∫–∞–∂–∏ ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    mark_as_published(generation_id_to_publish)
