import os
import json
import boto3
from botocore.exceptions import ClientError

# üî∞ –ò–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã)
B2_ACCESS_KEY = os.getenv("B2_ACCESS_KEY")  # ID –∫–ª—é—á–∞
B2_SECRET_KEY = os.getenv("B2_SECRET_KEY")  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")  # –ò–º—è –±–∞–∫–µ—Ç–∞
B2_ENDPOINT = os.getenv("B2_ENDPOINT")  # URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://s3.eu-central-003.backblazeb2.com)


def update_b2_config():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç config_public.json –≤ B2"""
    try:
        # üî∞ 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ B2
        s3 = boto3.client(
            "s3",
            endpoint_url=B2_ENDPOINT,
            aws_access_key_id=B2_ACCESS_KEY,
            aws_secret_access_key=B2_SECRET_KEY
        )

        # üî∞ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∫–µ—Ç–∞
        try:
            s3.head_bucket(Bucket=B2_BUCKET_NAME)
        except ClientError as e:
            error_code = e.response['Error']['Code']
            if error_code == '404':
                print(f"‚ùå –ë–∞–∫–µ—Ç '{B2_BUCKET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            elif error_code == '403':
                print("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏!")
                return
            else:
                raise

        # üî∞ 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        config_key = "config/config_public.json"
        try:
            response = s3.get_object(Bucket=B2_BUCKET_NAME, Key=config_key)
            current_config = json.loads(response['Body'].read().decode('utf-8'))
        except ClientError as e:
            if e.response['Error']['Code'] == 'NoSuchKey':
                current_config = {}
            else:
                raise

        # üî∞ 4. –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        updates = {
            "processing_lock": False,
            "empty": ["666/"],
            "generation_id": [],
            "publish": "444/, 555/, 666/"
        }
        merged_config = {**current_config, **updates}

        # üî∞ 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –æ–±—Ä–∞—Ç–Ω–æ
        s3.put_object(
            Bucket=B2_BUCKET_NAME,
            Key=config_key,
            Body=json.dumps(merged_config, indent=4, ensure_ascii=False).encode('utf-8'),
            ContentType='application/json'
        )

        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {B2_BUCKET_NAME}/{config_key}")

    except ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ B2: {e.response['Error']['Message']}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    # üî∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = {
        "B2_ACCESS_KEY": B2_ACCESS_KEY,
        "B2_SECRET_KEY": B2_SECRET_KEY,
        "B2_BUCKET_NAME": B2_BUCKET_NAME,
        "B2_ENDPOINT": B2_ENDPOINT
    }

    missing_vars = [k for k, v in required_vars.items() if not v]

    if missing_vars:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("\n".join(f"- {var}" for var in missing_vars))
    else:
        update_b2_config()