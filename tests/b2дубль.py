import os
import json
import logging
from botocore.exceptions import ClientError
from modules.api_clients import get_b2_client
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.utils import ensure_directory_exists
from modules.config_manager import ConfigManager

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
config = ConfigManager()
logger = get_logger("b2_storage_manager")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
B2_BUCKET_NAME = config.get('API_KEYS.b2.bucket_name')
CONFIG_PUBLIC_PATH = config.get('FILE_PATHS.config_public')
FILE_EXTENSIONS = ['.json', '.png', '.mp4']
FOLDERS = [
    config.get('FILE_PATHS.folder_444'),
    config.get('FILE_PATHS.folder_555'),
    config.get('FILE_PATHS.folder_666')
]
ARCHIVE_FOLDER = config.get('FILE_PATHS.archive_folder')

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
import re
FILE_NAME_PATTERN = re.compile(r"^\d{8}-\d{4}\.\w+$")


def load_config_public(s3):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª config_public.json –∏–∑ B2."""
    logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ config_public.json –∏–∑ B2")
    try:
        local_path = os.path.basename(CONFIG_PUBLIC_PATH)
        logger.debug(f"üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {local_path}")
        s3.download_file(B2_BUCKET_NAME, CONFIG_PUBLIC_PATH, local_path)
        with open(local_path, 'r', encoding='utf-8') as file:
            config_data = json.load(file)
            logger.info(f"‚úÖ config_public.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {config_data}")
            return config_data
    except FileNotFoundError:
        logger.warning("‚ö†Ô∏è –§–∞–π–ª config_public.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π.")
        return {}
    except ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config_public.json: {e.response['Error']['Code']} - {e.response['Error']['Message']}")
        return {}

def save_config_public(s3, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª config_public.json –≤ B2."""
    logger.info("üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ config_public.json –≤ B2")
    try:
        local_path = os.path.basename(CONFIG_PUBLIC_PATH)
        with open(local_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
            logger.debug(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {data}")
        s3.upload_file(local_path, B2_BUCKET_NAME, CONFIG_PUBLIC_PATH)
        logger.info("‚úÖ –§–∞–π–ª config_public.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è config_public.json: {e}")

def list_files_in_folder(s3, folder_prefix):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ."""
    logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_prefix}")
    try:
        response = s3.list_objects_v2(Bucket=B2_BUCKET_NAME, Prefix=folder_prefix)
        files = [
            obj['Key'] for obj in response.get('Contents', [])
            if obj['Key'] != folder_prefix and not obj['Key'].endswith('.bzEmpty') and FILE_NAME_PATTERN.match(os.path.basename(obj['Key']))
        ]
        logger.debug(f"üîç –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ {folder_prefix}: {files}")
        return files
    except ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ {folder_prefix}: {e.response['Error']['Code']} - {e.response['Error']['Message']}")
        return []

def get_ready_groups(files):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤."""
    logger.info("üîÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø")
    groups = {}
    for file_key in files:
        base_name = os.path.basename(file_key)
        if FILE_NAME_PATTERN.match(base_name):
            group_id = base_name.rsplit('.', 1)[0]  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            groups.setdefault(group_id, []).append(base_name)
            logger.debug(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}: {base_name}")
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {base_name} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É, –ø—Ä–æ–ø—É—â–µ–Ω")

    ready_groups = []
    for group_id, file_list in groups.items():
        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É {group_id}: {file_list}")
        expected_files = [group_id + ext for ext in FILE_EXTENSIONS]
        missing_files = [file for file in expected_files if file not in file_list]
        if not missing_files:
            ready_groups.append(group_id)
            logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_id} –≥–æ—Ç–æ–≤–∞: {file_list}")
        else:
            logger.warning(f"‚ö†Ô∏è –î–ª—è –≥—Ä—É–ø–ø—ã {group_id} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ–∞–π–ª–æ–≤: {missing_files}")

    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –≥–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã: {ready_groups}")
    return ready_groups

def handle_publish(s3, config_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–µ 'publish' –≤ config_public.json."""
    publish_folder = config_data.get("publish")
    if not publish_folder:
        return

    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –ø–∞–ø–∫–∏: {publish_folder}")
    files = list_files_in_folder(s3, publish_folder)
    if not files:
        logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {publish_folder} –ø—É—Å—Ç–∞. –ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    archived_files = []
    for file_key in files:
        archive_key = file_key.replace(publish_folder, ARCHIVE_FOLDER)
        try:
            s3.copy_object(Bucket=B2_BUCKET_NAME, CopySource={"Bucket": B2_BUCKET_NAME, "Key": file_key}, Key=archive_key)
            s3.delete_object(Bucket=B2_BUCKET_NAME, Key=file_key)
            archived_files.append(file_key)
        except ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {file_key} –≤ –∞—Ä—Ö–∏–≤: {e}")

    logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ—â—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ {publish_folder} –≤ –∞—Ä—Ö–∏–≤: {archived_files}")
    config_data.pop("publish", None)
    save_config_public(s3, config_data)
    logger.info("‚úÖ –ü–æ–ª–µ 'publish' –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ config_public.json.")


def move_group(s3, src_folder, dst_folder, group_id):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≥—Ä—É–ø–ø—É —Ñ–∞–π–ª–æ–≤ –≤ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É."""
    logger.info(f"üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_id} –∏–∑ {src_folder} –≤ {dst_folder}")
    moved_files = []
    for ext in FILE_EXTENSIONS:
        src_key = f"{src_folder}{group_id}{ext}"
        dst_key = f"{dst_folder}{group_id}{ext}"
        try:
            s3.head_object(Bucket=B2_BUCKET_NAME, Key=src_key)
            s3.copy_object(Bucket=B2_BUCKET_NAME, CopySource={"Bucket": B2_BUCKET_NAME, "Key": src_key}, Key=dst_key)
            s3.delete_object(Bucket=B2_BUCKET_NAME, Key=src_key)
            moved_files.append(src_key)
        except ClientError as e:
            if e.response['Error']['Code'] == "NoSuchKey":
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {src_key} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–ª—é—á–æ–º {src_key}: {e.response['Error']['Code']} - {e.response['Error']['Message']}")

    logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞. –§–∞–π–ª—ã: {moved_files}")

def process_folders(s3, folders):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–ø–∫–∏ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≥—Ä—É–ø–ø—ã –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É '–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É'."""
    logger.info("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–æ–∫")
    empty_folders = set()
    changes_made = True

    while changes_made:
        changes_made = False
        for i in range(len(folders) - 1, 0, -1):
            src_folder = folders[i]
            dst_folder = folders[i - 1]

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏
            if src_folder in empty_folders:
                logger.debug(f"‚è© –ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–∏ {src_folder}")
                continue

            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ {src_folder}")
            src_files = list_files_in_folder(s3, src_folder)
            dst_files = list_files_in_folder(s3, dst_folder)

            # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            logger.debug(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {src_folder}: {src_files}")
            logger.debug(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {dst_folder}: {dst_files}")

            src_ready = get_ready_groups(src_files)
            dst_ready = get_ready_groups(dst_files)

            logger.info(f"üì¶ –ì–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –≤ {src_folder}: {src_ready}")
            logger.info(f"üì¶ –ì–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –≤ {dst_folder}: {dst_ready}")

            for group_id in src_ready:
                if len(dst_ready) < 1:
                    move_group(s3, src_folder, dst_folder, group_id)
                    changes_made = True

            if not src_ready:
                empty_folders.add(src_folder)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫
    for folder in folders:
        files = list_files_in_folder(s3, folder)
        logger.info(f"üìÇ –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ {folder}: {files}")

    logger.info(f"üóÇÔ∏è –ü—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {list(empty_folders)}")
    return list(empty_folders)

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å."""
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        s3 = get_b2_client()
        config_data = load_config_public(s3)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        handle_publish(s3, config_data)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–æ–∫
        empty_folders = process_folders(s3, FOLDERS)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–∫–∞—Ö
        config_data['empty'] = empty_folders
        save_config_public(s3, config_data)

        logger.info("üèÅ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        handle_error(logger, e, "–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ")

if __name__ == "__main__":
    main()
