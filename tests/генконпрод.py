import json
import os
import sys
import requests
import openai
import textstat
import spacy
import re
import subprocess
import boto3


from modules.config_manager import ConfigManager
from modules.logger import get_logger
from modules.error_handler import handle_error
from datetime import datetime
from modules.utils import ensure_directory_exists
from PIL import Image, ImageDraw


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ modules
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'modules')))


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
logger = get_logger("generate_content")
config = ConfigManager()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
config = ConfigManager()
logger = get_logger("generate_media_launcher")


def create_and_upload_image(folder, generation_id):
    """–°–æ–∑–¥–∞–µ—Ç –∏–º–∏—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É –≤ B2."""
    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png
        file_name = generation_id.replace(".json", ".png")
        local_file_path = file_name

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–∏—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.new('RGB', (800, 600), color=(73, 109, 137))
        draw = ImageDraw.Draw(img)
        draw.text((10, 10), f"ID: {generation_id}", fill=(255, 255, 255))
        img.save(local_file_path)
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{local_file_path}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É
        s3 = get_b2_client()
        bucket_name = config.get("API_KEYS.b2.bucket_name")
        s3_key = f"{folder.rstrip('/')}/{file_name}"
        s3.upload_file(local_file_path, bucket_name, s3_key)
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ B2: {s3_key}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.remove(local_file_path)
    except Exception as e:
        handle_error("Image Upload Error", str(e))


def get_b2_client():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Backblaze B2."""
    try:
        return boto3.client(
            's3',
            endpoint_url=config.get("API_KEYS.b2.endpoint"),
            aws_access_key_id=config.get("API_KEYS.b2.access_key"),
            aws_secret_access_key=config.get("API_KEYS.b2.secret_key")
        )
    except Exception as e:
        handle_error("B2 Client Initialization Error", str(e))


def download_config_public():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª config_public.json –∏–∑ B2 –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    try:
        s3 = get_b2_client()
        bucket_name = config.get("API_KEYS.b2.bucket_name")
        config_public_path = config.get("FILE_PATHS.config_public")

        os.makedirs(os.path.dirname(config_public_path), exist_ok=True)
        s3.download_file(bucket_name, config_public_path, config_public_path)
        logger.info(f"‚úÖ –§–∞–π–ª config_public.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ B2 –≤ {config_public_path}")
    except Exception as e:
        handle_error("Download Config Public Error", str(e))


def generate_file_id():
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD-HHmm."""
    now = datetime.utcnow()
    date_part = now.strftime("%Y%m%d")
    time_part = now.strftime("%H%M")
    return f"{date_part}-{time_part}.json"


def save_generation_id_to_config(file_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª config_gen.json."""
    config_gen_path = os.path.join("core", "config", "config_gen.json")
    os.makedirs(os.path.dirname(config_gen_path), exist_ok=True)
    try:
        with open(config_gen_path, "w", encoding="utf-8") as file:
            json.dump({"generation_id": file_id}, file, ensure_ascii=False, indent=4)
        logger.info(f"‚úÖ ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '{file_id}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ config_gen.json")
    except Exception as e:
        handle_error("Save Generation ID Error", str(e))


def save_to_b2(folder, content):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É B2 —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞."""
    try:
        file_id = generate_file_id()
        save_generation_id_to_config(file_id)
        logger.info(f"üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É B2: {folder} —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ {file_id}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        s3 = get_b2_client()
        bucket_name = config.get("API_KEYS.b2.bucket_name")
        local_file_path = file_id
        with open(local_file_path, "w", encoding="utf-8") as file:
            json.dump(content, file, ensure_ascii=False, indent=4)

        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        s3_key = f"{folder.rstrip('/')}/{file_id}"
        s3.upload_file(local_file_path, bucket_name, s3_key)
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ B2: {s3_key}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.remove(local_file_path)
    except Exception as e:
        handle_error("B2 Upload Error", str(e))

class ContentGenerator:
    def __init__(self):
        self.topic_threshold = config.get('GENERATE.topic_threshold', 7)
        self.text_threshold = config.get('GENERATE.text_threshold', 8)
        self.max_attempts = config.get('GENERATE.max_attempts', 3)
        self.adaptation_enabled = config.get('GENERATE.adaptation_enabled', False)
        self.adaptation_params = config.get('GENERATE.adaptation_parameters', {})
        self.content_output_path = config.get('FILE_PATHS.content_output_path', 'generated_content.json')
        self.before_critique_path = config.get('FILE_PATHS.before_critique_path', 'before_critique.json')
        self.after_critique_path = config.get('FILE_PATHS.after_critique_path', 'after_critique.json')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º logger –∏ config –≤ –∫–ª–∞—Å—Å
        self.logger = logger  # –õ–æ–≥–≥–µ—Ä –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        self.config = config  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã OpenAI —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.openai_model = os.getenv("OPENAI_MODEL", "gpt-4")
        self.temperature = float(os.getenv("OPENAI_TEMPERATURE", 0.7))

        if not self.openai_api_key:
            logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞!")
            raise EnvironmentError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    def adapt_prompts(self):
        if not self.adaptation_enabled:
            logger.info("üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
        logger.info("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        for key, value in self.adaptation_params.items():
            logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä '{key}' –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {value}")

    def clear_generated_content(self):
        try:
            logger.info("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–æ–≤–æ–π —Ç–µ–º—ã.")
            folder = os.path.dirname(self.content_output_path)
            if not os.path.exists(folder):
                os.makedirs(folder)
                logger.info(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {folder}")
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump({}, file, ensure_ascii=False, indent=4)
            logger.info("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
        except PermissionError:
            handle_error("Clear Content Error", f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {self.content_output_path}")
        except Exception as e:
            handle_error("Clear Content Error", str(e))

    def generate_topic(self):
        try:
            prompt_template = config.get('CONTENT.topic.prompt_template')
            prompt = prompt_template.format(focus_areas="–Ω–æ–≤–∞—è —Ç–µ–º–∞")
            logger.info("üîÑ –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã...")
            topic = self.request_openai(prompt)
            self.save_to_generated_content("topic", {"topic": topic})
            logger.info(f"‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {topic}")
            return topic
        except Exception as e:
            handle_error("Topic Generation Error", str(e))

    def request_openai(self, prompt):
        try:
            openai.api_key = self.openai_api_key
            max_tokens = self.config.get("API_KEYS.openai.max_tokens_text", 10)  # ‚úÖ –ß–∏—Ç–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ config.json

            self.logger.info(f"üîé –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI —Å max_tokens={max_tokens}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,  # ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ config.json
                temperature=self.temperature,
            )
            return response['choices'][0]['message']['content'].strip()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI API: {e}")
            raise

    def generate_sarcastic_comment(self, text):
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.logger.info(
            f"üîé Debug: –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {self.config.get('SARCASM.comment_prompt')}")
        self.logger.info(f"üîé Debug: max_tokens_comment = {self.config.get('SARCASM.max_tokens_comment', 20)}")

        # ‚úÖ –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É —Å —Ç–æ—á–∫–æ–π –ø–µ—Ä–µ–¥ SARCASM
        if not self.config.get('SARCASM.enabled', False):
            self.logger.info("üîï –°–∞—Ä–∫–∞–∑–º –æ—Ç–∫–ª—é—á—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return ""  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = self.config.get('SARCASM.comment_prompt').format(text=text)
        max_tokens = self.config.get("SARCASM.max_tokens_comment", 20)  # ‚úÖ –ß–∏—Ç–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ config.json

        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        self.logger.info(f"üîé Debug: –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π max_tokens_comment = {max_tokens}")
        self.logger.info(f"üîé –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI —Å max_tokens={max_tokens}")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥
                temperature=self.temperature
            )

            # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            comment = response['choices'][0]['message']['content'].strip()
            self.logger.info(f"üîé Debug: –û—Ç–≤–µ—Ç OpenAI: {comment}")

            return comment  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return ""  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

    def generate_interactive_poll(self, text):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞.
        """
        if not self.config.get('SARCASM.enabled', False):
            self.logger.info("üîï –°–∞—Ä–∫–∞–∑–º –æ—Ç–∫–ª—é—á—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return ""

        prompt = self.config.get('SARCASM.question_prompt').format(text=text)
        try:
            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=self.config.get('SARCASM.max_tokens_poll', 50),
                temperature=self.temperature
            )
            poll = response['choices'][0]['message']['content'].strip()
            self.logger.info("üé≠ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
            return poll
        except Exception as e:
            handle_error("Sarcasm Poll Generation Error", str(e))
            return ""

    def save_to_generated_content(self, stage, data):
        try:
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª: {self.content_output_path}")
            folder = os.path.dirname(self.content_output_path)
            if not os.path.exists(folder):
                os.makedirs(folder)
                logger.info(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {folder}")
            if os.path.exists(self.content_output_path):
                with open(self.content_output_path, 'r', encoding='utf-8') as file:
                    try:
                        result_data = json.load(file)
                    except json.JSONDecodeError:
                        result_data = {}
            else:
                result_data = {}
            result_data["timestamp"] = datetime.utcnow().isoformat()
            result_data[stage] = data
            with open(self.content_output_path, 'w', encoding='utf-8') as file:
                json.dump(result_data, file, ensure_ascii=False, indent=4)
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ: {stage}")
        except FileNotFoundError:
            handle_error("Save to Generated Content Error", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.content_output_path}")
        except PermissionError:
            handle_error("Save to Generated Content Error", f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {self.content_output_path}")
        except Exception as e:
            handle_error("Save to Generated Content Error", str(e))

    def critique_content(self, content):
        """
        –ü—Ä–æ–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫—Ä–∏—Ç–∏–∫–∏.
        """
        try:
            self.logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI...")
            prompt_template = self.config.get('CONTENT.critique.prompt_template')
            prompt = prompt_template.format(content=content)

            response = openai.ChatCompletion.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=self.config.get('CONTENT.critique.max_tokens', 200),
                temperature=self.temperature
            )

            critique = response['choices'][0]['message']['content'].strip()
            self.logger.info("‚úÖ –ö—Ä–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return critique
        except Exception as e:
            handle_error("Critique Error", str(e))
            return "–ö—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π."

    def analyze_topic_generation(self):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ–º.
        """
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")

            # === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ===
            feedback_path = self.config.get('FILE_PATHS.feedback_file', 'data/feedback.json')
            positive_feedback_topics = []
            if os.path.exists(feedback_path):
                with open(feedback_path, 'r', encoding='utf-8') as file:
                    feedback_data = json.load(file)
                    positive_feedback_topics = [
                        entry['topic'] for entry in feedback_data if
                        entry.get('rating', 0) >= self.config.get('METRICS.success_threshold', 8)
                    ]
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(positive_feedback_topics)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ–º –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
            else:
                self.logger.warning("‚ö†Ô∏è –§–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # === 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π ===
            archive_folder = self.config.get('FILE_PATHS.archive_folder', 'data/archive/')
            successful_topics = []
            if os.path.exists(archive_folder):
                for filename in os.listdir(archive_folder):
                    if filename.endswith('.json'):
                        with open(os.path.join(archive_folder, filename), 'r', encoding='utf-8') as file:
                            archive_data = json.load(file)
                            if archive_data.get('success', False):
                                successful_topics.append(archive_data.get('topic', ''))
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(successful_topics)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–∞.")
            else:
                self.logger.warning("‚ö†Ô∏è –ü–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            # === 3. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ–æ–∫—É—Å–æ–≤ ===
            valid_focus_areas = self.get_valid_focus_areas()

            # === 4. –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º ===
            combined_topics = list(set(positive_feedback_topics + successful_topics + valid_focus_areas))
            self.logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º: {combined_topics}")
            return combined_topics
        except Exception as e:
            handle_error("Topic Analysis Error", str(e))
            return []

    def get_valid_focus_areas(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ–∫—É—Å—ã, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ.
        """
        try:
            tracker_file = self.config.get('FILE_PATHS.focus_tracker', 'data/focus_tracker.json')
            focus_areas = self.config.get('CONTENT.topic.focus_areas', [])

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ñ–æ–∫—É—Å–æ–≤
            if os.path.exists(tracker_file):
                with open(tracker_file, 'r', encoding='utf-8') as file:
                    focus_tracker = json.load(file)
                excluded_foci = focus_tracker[:10]
            else:
                excluded_foci = []

            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Ñ–æ–∫—É—Å—ã
            valid_focus_areas = [focus for focus in focus_areas if focus not in excluded_foci]
            self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–∫—É—Å—ã: {valid_focus_areas}")
            return valid_focus_areas
        except Exception as e:
            handle_error("Focus Area Filtering Error", str(e))
            return []

    def prioritize_focus_from_feedback_and_archive(self, valid_focus_areas):
        """
        –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—ã –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –∞—Ä—Ö–∏–≤–∞.
        """
        try:
            feedback_path = self.config.get('FILE_PATHS.feedback_file', 'data/feedback.json')
            feedback_foci = []
            if os.path.exists(feedback_path):
                with open(feedback_path, 'r', encoding='utf-8') as file:
                    feedback_data = json.load(file)
                    feedback_foci = [
                        entry['topic'] for entry in feedback_data if
                        entry.get('rating', 0) >= self.config.get('METRICS.success_threshold', 8)
                    ]

            archive_folder = self.config.get('FILE_PATHS.archive_folder', 'data/archive/')
            archive_foci = []
            if os.path.exists(archive_folder):
                for filename in os.listdir(archive_folder):
                    if filename.endswith('.json'):
                        with open(os.path.join(archive_folder, filename), 'r', encoding='utf-8') as file:
                            archive_data = json.load(file)
                            if archive_data.get('success', False):
                                archive_foci.append(archive_data.get('topic', ''))

            for focus in feedback_foci + archive_foci:
                if focus in valid_focus_areas:
                    self.logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ñ–æ–∫—É—Å: {focus}")
                    return focus

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ valid_focus_areas
            if valid_focus_areas:
                self.logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ–∫—É—Å: {valid_focus_areas[0]}")
                return valid_focus_areas[0]

            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return None
        except Exception as e:
            handle_error("Focus Prioritization Error", str(e))
            return None

    def run(self):
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            download_config_public()
            with open(config.get("FILE_PATHS.config_public"), "r", encoding="utf-8") as file:
                config_public = json.load(file)
                empty_folders = config_public.get("empty", [])

            if not empty_folders:
                logger.info("‚úÖ –ù–µ—Ç –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")
                return

            self.adapt_prompts()
            self.clear_generated_content()

            # –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –∞—Ä—Ö–∏–≤–∞
            valid_topics = self.analyze_topic_generation()
            chosen_focus = self.prioritize_focus_from_feedback_and_archive(valid_topics)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
            if chosen_focus:
                self.logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ–∫—É—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {chosen_focus}")
            else:
                self.logger.warning("‚ö†Ô∏è –§–æ–∫—É—Å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º.")

            topic = self.generate_topic()
            self.save_to_generated_content("topic", {"topic": topic})
            text_initial = self.request_openai(config.get('CONTENT.text.prompt_template').format(topic=topic))

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
            critique = self.critique_content(text_initial)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∏
            self.logger.info(f"üìã –ö—Ä–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞:\n{critique}")
            self.save_to_generated_content("critique", {"critique": critique})

            final_text = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}\n{text_initial}"

            # –ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞—Ä–∫–∞–∑–º
            if self.config.get('SARCASM.enabled', False):
                self.logger.info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ —Ç–µ–∫—Å—Ç—É.")
                sarcastic_comment = self.generate_sarcastic_comment(text_initial)
                sarcastic_poll = self.generate_interactive_poll(text_initial)

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∞—Ä–∫–∞–∑–º–∞
                if sarcastic_comment:
                    self.logger.info(f"üé© –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {sarcastic_comment}")
                if sarcastic_poll:
                    self.logger.info(f"üé≠ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å: {sarcastic_poll}")

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞—Ä–∫–∞–∑–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
                final_text = f"{final_text}\n\nüî∂ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{sarcastic_comment}\n\nüî∏ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å:\n{sarcastic_poll}"

                # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞—Ä–∫–∞–∑–º –≤ generated_content.json
                self.save_to_generated_content("sarcasm", {
                    "comment": sarcastic_comment,
                    "poll": sarcastic_poll
                })

            else:
                self.logger.info("üîï –°–∞—Ä–∫–∞–∑–º –æ—Ç–∫–ª—é—á—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

            self.save_to_generated_content("text_initial", {"content": text_initial})

            target_folder = empty_folders[0]
            save_to_b2(target_folder, {"topic": topic, "content": final_text})

            with open(os.path.join("core", "config", "config_gen.json"), "r", encoding="utf-8") as gen_file:
                config_gen_content = json.load(gen_file)
                generation_id = config_gen_content["generation_id"]

            create_and_upload_image(target_folder, generation_id)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ config_public.json: {json.dumps(config_public, ensure_ascii=False, indent=4)}")
            logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ config_gen.json: {json.dumps(config_gen_content, ensure_ascii=False, indent=4)}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º generate_media.py
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ generate_media.py...")
            run_generate_media()
            logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç generate_media.py —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

        except Exception as e:
            handle_error("Run Error", str(e))


def run_generate_media():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç generate_media.py –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ø—É—Ç–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ config.json
        scripts_folder = config.get("FILE_PATHS.scripts_folder", "core/scripts")
        script_path = os.path.join(scripts_folder, "generate_media.py")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.isfile(script_path):
            raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç generate_media.py –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {script_path}")

        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {script_path}")

        # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
        subprocess.run(["python", script_path], check=True)
        logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç {script_path} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    except subprocess.CalledProcessError as e:
        handle_error("Script Execution Error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ {script_path}: {e}")
    except FileNotFoundError as e:
        handle_error("File Not Found Error", str(e))
    except Exception as e:
        handle_error("Unknown Error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ {script_path}: {e}")

        if __name__ == "__main__":
            run_generate_media()


if __name__ == "__main__":
    generator = ContentGenerator()
    generator.run()