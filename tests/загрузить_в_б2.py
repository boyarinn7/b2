# -*- coding: utf-8 -*-
import os
import boto3
from pathlib import Path
import logging
from collections import defaultdict
import sys # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç sys

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[logging.StreamHandler(sys.stdout)]) # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ stdout
logger = logging.getLogger("b2_group_uploader")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞, –≥–¥–µ –∏—â–µ–º –≥–æ—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤
LOCAL_SOURCE_FOLDER = r"C:\Users\boyar\777\555\–≥–æ—Ç–æ–≤—ã–µ\–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ"
# –ü–∞–ø–∫–∞ –≤ B2, –∫—É–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
REMOTE_TARGET_FOLDER = "444/"
# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –≥—Ä—É–ø–ø—ã
REQUIRED_EXTENSIONS = {".json", ".png", ".mp4"}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ B2 (—á–∏—Ç–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
B2_ACCESS_KEY = os.getenv("B2_ACCESS_KEY")
B2_SECRET_KEY = os.getenv("B2_SECRET_KEY")
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")
B2_ENDPOINT = os.getenv("B2_ENDPOINT")

def initialize_b2_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç B2 S3."""
    if not all([B2_ACCESS_KEY, B2_SECRET_KEY, B2_BUCKET_NAME, B2_ENDPOINT]):
        logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è B2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (B2_ACCESS_KEY, B2_SECRET_KEY, B2_BUCKET_NAME, B2_ENDPOINT).")
        return None
    try:
        s3 = boto3.client(
            "s3",
            endpoint_url=B2_ENDPOINT,
            aws_access_key_id=B2_ACCESS_KEY,
            aws_secret_access_key=B2_SECRET_KEY,
        )
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç B2 S3 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return s3
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ B2: {e}")
        return None

def find_complete_groups(local_folder: str) -> dict:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤ (.json, .png, .mp4).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –±–∞–∑–æ–≤–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –≥—Ä—É–ø–ø—ã.
    """
    source_path = Path(local_folder)
    if not source_path.is_dir():
        logger.error(f"‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {local_folder}")
        return {}

    logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {local_folder}")
    files_by_stem = defaultdict(set)
    file_paths_by_stem = defaultdict(list)

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    for item in source_path.iterdir():
        if item.is_file():
            stem = item.stem  # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            ext = item.suffix.lower() # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            if ext in REQUIRED_EXTENSIONS:
                files_by_stem[stem].add(ext)
                file_paths_by_stem[stem].append(item) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    complete_groups = {}
    for stem, extensions in files_by_stem.items():
        if extensions == REQUIRED_EXTENSIONS:
            logger.info(f"  –ù–∞–π–¥–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –ø–æ–ª–Ω—É—é –≥—Ä—É–ø–ø—É: {stem} (—Ñ–∞–π–ª—ã: {[p.name for p in file_paths_by_stem[stem]]})")
            complete_groups[stem] = file_paths_by_stem[stem]
        else:
            missing = REQUIRED_EXTENSIONS - extensions
            logger.debug(f"  –ù–µ–ø–æ–ª–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è '{stem}'. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {missing}")


    if not complete_groups:
        logger.warning(f"–ü–æ–ª–Ω—ã–µ –≥—Ä—É–ø–ø—ã ({', '.join(REQUIRED_EXTENSIONS)}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {local_folder}.")
    else:
         logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(complete_groups)}")

    return complete_groups

def upload_file(s3_client, bucket: str, local_file_path: Path, remote_key: str) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ B2."""
    try:
        logger.info(f"  üîº –ó–∞–≥—Ä—É–∑–∫–∞ {local_file_path.name} -> {remote_key}...")
        s3_client.upload_file(str(local_file_path), bucket, remote_key)
        logger.info(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {remote_key}")
        return True
    except Exception as e:
        logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {local_file_path.name} –≤ {remote_key}: {e}")
        return False

def process_and_upload_groups(s3_client, bucket: str, groups: dict, target_folder: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤ B2."""
    if not s3_client:
        logger.error("–ö–ª–∏–µ–Ω—Ç B2 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return

    if not groups:
        logger.info("–ù–µ—Ç –ø–æ–ª–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return

    logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ {len(groups)} –≥—Ä—É–ø–ø –≤ B2 –ø–∞–ø–∫—É '{target_folder}'...")
    upload_count = 0
    group_count = 0
    for stem, file_paths in groups.items():
        group_count += 1
        logger.info(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã '{stem}' ({group_count}/{len(groups)}) ---")
        success_in_group = True
        for local_path in file_paths:
            remote_key = f"{target_folder.rstrip('/')}/{local_path.name}"
            if not upload_file(s3_client, bucket, local_path, remote_key):
                success_in_group = False
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if success_in_group:
            upload_count += 1
            logger.info(f"--- –ì—Ä—É–ø–ø–∞ '{stem}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ---")
        else:
             logger.error(f"--- –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø—ã '{stem}' ---")

    logger.info(f"üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø: {upload_count} –∏–∑ {len(groups)}.")

if __name__ == "__main__":
    logger.info("===== –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ B2 =====")
    s3 = initialize_b2_client()
    if s3:
        complete_groups_found = find_complete_groups(LOCAL_SOURCE_FOLDER)
        process_and_upload_groups(s3, B2_BUCKET_NAME, complete_groups_found, REMOTE_TARGET_FOLDER)
    else:
        logger.error("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ B2.")
    logger.info("===== –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ B2 –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É =====")
