import requests
import logging
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
MIDJOURNEY_API_KEY = os.getenv("MIDJOURNEY_API_KEY", "e053f7ff89ce552740e9c2256a34b76cb87362ff71277806be512c606423a088")


def test_fetch_v2(task_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç mj/v2/fetch —Å POST"""
    headers = {"X-API-Key": MIDJOURNEY_API_KEY}
    endpoint = "https://api.piapi.ai/mj/v2/fetch"
    payload = {"task_id": task_id}
    try:
        response = requests.post(endpoint, headers=headers, json=payload, timeout=30)
        logger.info(f"‚ÑπÔ∏è –û—Ç–≤–µ—Ç –æ—Ç mj/v2/fetch: {response.status_code} - {response.text}")
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ mj/v2/fetch: {e}")
        return None


def test_task_v1(task_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç /v1/task/<task_id> —Å GET"""
    headers = {"X-API-Key": MIDJOURNEY_API_KEY}
    endpoint = f"https://api.piapi.ai/v1/task/{task_id}"
    try:
        response = requests.get(endpoint, headers=headers, timeout=30)
        logger.info(f"‚ÑπÔ∏è –û—Ç–≤–µ—Ç –æ—Ç v1/task: {response.status_code} - {response.text}")
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ v1/task: {e}")
        return None


def main():
    # –¢–≤–æ–π task_id –¥–ª—è —Ç–µ—Å—Ç–∞
    task_id = "b8e497a4-35aa-4365-b0f1-2fa6543ec8b0"

    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ")

    # –¢–µ—Å—Ç 1: mj/v2/fetch
    logger.info("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ mj/v2/fetch")
    result_v2 = test_fetch_v2(task_id)
    if result_v2 and "output" in result_v2:
        logger.info(f"‚úÖ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result_v2['output'].get('image_url')}")

    # –¢–µ—Å—Ç 2: /v1/task/<task_id>
    logger.info("üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ v1/task")
    result_v1 = test_task_v1(task_id)
    if result_v1 and "data" in result_v1 and "output" in result_v1["data"]:
        logger.info(f"‚úÖ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result_v1['data']['output'].get('image_url')}")

    logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()