import os
import base64
import time
import argparse
import logging
import json

# --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É runwayml ---
try:
    from runwayml import RunwayML
    RUNWAY_SDK_AVAILABLE = True
    RunwayError = Exception
except ImportError as e:
    print(f"!!! –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e} !!!")
    print("!!! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ runwayml –∏ –µ–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install runwayml !!!")
    Runway = None
    RunwayError = Exception
    RUNWAY_SDK_AVAILABLE = False
    exit(1)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("runway_test")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –£–º–æ–ª—á–∞–Ω–∏—é ---
DEFAULT_MODEL_NAME = "gen-2" # –û—Å—Ç–∞–≤–ª—è–µ–º gen-2 –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞–µ—Ç gen3a_turbo
DEFAULT_DURATION = 5
# --- –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∞—Ç Ratio ---
DEFAULT_RATIO = "1280:768" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç, —Ç—Ä–µ–±—É–µ–º—ã–π API
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
DEFAULT_POLLING_TIMEOUT = 300
DEFAULT_POLLING_INTERVAL = 15

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ ---
RUNWAY_API_KEY = os.getenv("RUNWAY_API_KEY")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –§—É–Ω–∫—Ü–∏—è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---

def test_runway_generation(
    api_key: str,
    model: str,
    image_url: str,
    prompt_text: str,
    duration: int,
    ratio: str, # –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º "–®–ò–†–ò–ù–ê:–í–´–°–û–¢–ê"
    poll_timeout: int,
    poll_interval: int
):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Runway API, –∏—Å–ø–æ–ª—å–∑—É—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    if not RUNWAY_SDK_AVAILABLE:
        logger.error("‚ùå SDK Runway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ). –¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        return
    if not api_key:
        logger.error("‚ùå RUNWAY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    if not image_url or not image_url.startswith(('http://', 'https://')):
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
        return
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ratio ---
    if ratio not in ["1280:768", "768:1280"]:
         logger.warning(f"–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ratio '{ratio}'. API –º–æ–∂–µ—Ç –µ–≥–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç—å. –û–∂–∏–¥–∞–µ—Ç—Å—è '1280:768' –∏–ª–∏ '768:1280'.")
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---


    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Runway...")
    try:
        client = RunwayML(api_key=api_key)
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç Runway –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Runway: {e}", exc_info=True)
        return

    try:
        generation_params = {
            "model": model,
            "prompt_image": image_url,
            "prompt_text": prompt_text,
            "duration": duration,
            "ratio": ratio # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        }
        logger.info(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ —Å –º–æ–¥–µ–ª—å—é '{model}'...")
        logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(generation_params, indent=2)}")

        task = client.image_to_video.create(**generation_params)
        task_id = getattr(task, 'id', 'N/A')
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {task_id}")

        logger.info(f"‚è≥ –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id} (–¢–∞–π–º–∞—É—Ç: {poll_timeout} —Å–µ–∫, –ò–Ω—Ç–µ—Ä–≤–∞–ª: {poll_interval} —Å–µ–∫)...")
        start_time = time.time()
        final_output_url = None
        while time.time() - start_time < poll_timeout:
            try:
                task_status = client.tasks.retrieve(task_id)
                current_status = getattr(task_status, 'status', 'UNKNOWN').upper()
                logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id}: {current_status}")

                if current_status == "SUCCEEDED":
                    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    if hasattr(task_status, 'output') and isinstance(task_status.output, list) and len(task_status.output) > 0:
                        final_output_url = task_status.output[0]
                    else:
                         logger.warning("–°—Ç–∞—Ç—É—Å SUCCEEDED, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (output) –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
                    break
                elif current_status == "FAILED":
                    logger.error("‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
                    error_details = getattr(task_status, 'error_message', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')
                    logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
                    break

                time.sleep(poll_interval)
            except Exception as poll_err:
                 logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, API Runway): {poll_err}", exc_info=True)
                 break
        else:
            logger.warning(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ({poll_timeout} —Å–µ–∫) —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Runway –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}.")

        if final_output_url:
            logger.info("--- –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç Runway ---")
            logger.info(f"URL –í–∏–¥–µ–æ: {final_output_url}")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL –≤–∏–¥–µ–æ –æ—Ç Runway.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ Runway: {e}", exc_info=True)


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Runway API (Image-to-Video).")
    parser.add_argument("--image_url",type=str, required=True, help="URL –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    parser.add_argument("--model", type=str, default=DEFAULT_MODEL_NAME, help=f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Runway (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MODEL_NAME}).")
    parser.add_argument("--prompt_text", type=str, default="Create a video based on this image", help="–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Runway (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).")
    parser.add_argument("--duration", type=int, default=DEFAULT_DURATION, help="–ñ–µ–ª–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (—Å–µ–∫).")
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω help text –∏ default ---
    parser.add_argument(
        "--ratio",
        type=str,
        default=DEFAULT_RATIO, # –¢–µ–ø–µ—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "1280:768"
        help="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –≤–∏–¥–µ–æ (—Ñ–æ—Ä–º–∞—Ç –®–ò–†–ò–ù–ê:–í–´–°–û–¢–ê, –Ω–∞–ø—Ä. 1280:768 –∏–ª–∏ 768:1280)."
    )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    parser.add_argument("--timeout", type=int, default=DEFAULT_POLLING_TIMEOUT, help="–û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ (—Å–µ–∫).")
    parser.add_argument("--interval", type=int, default=DEFAULT_POLLING_INTERVAL, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞ (—Å–µ–∫).")

    args = parser.parse_args()

    if not RUNWAY_API_KEY:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RUNWAY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        exit(1)

    logger.info(f"--- –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Runway –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {args.image_url} ---")
    test_runway_generation(
        api_key=RUNWAY_API_KEY, model=args.model, image_url=args.image_url,
        prompt_text=args.prompt_text, duration=args.duration, ratio=args.ratio,
        poll_timeout=args.timeout, poll_interval=args.interval
    )
    logger.info("--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Runway –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---")

