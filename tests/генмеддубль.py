# core/scripts/generate_media.py

import os
import time
import random
from modules.api_clients import get_runwayml_client
from modules.logger import get_logger
from modules.error_handler import handle_error
from modules.utils import ensure_directory_exists, encode_image_to_base64
from modules.config_manager import ConfigManager

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
config = ConfigManager()
logger = get_logger("generate_media")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
DEFAULT_IMAGE_PATH = config.get('FILE_PATHS.default_image_path', 'core/media/input_image.jpg')
DEFAULT_VIDEO_PATH = config.get('FILE_PATHS.default_video_path', 'core/media/output_video.mp4')
RUNWAY_MODEL = config.get('API_KEYS.RUNWAYML.model', 'gen3a_turbo')
RUNWAY_DURATION = config.get('API_KEYS.RUNWAYML.duration', 5)
RUNWAY_RATIO = config.get('API_KEYS.RUNWAYML.ratio', '1280:768')
RUNWAY_SCENARIO = config.get('API_KEYS.RUNWAYML.default_scenario', "–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å —Ç—ë–º–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π –∏ —Å—Ç–∞—Ä–æ–π –∫–∞—Ä—Ç–æ–π.")
USE_MOCK_API = config.get('OTHER.use_mock_api', True)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞ ===
RUNWAY_API_KEY = config.get('API_KEYS.RUNWAYML.api_key')
if not RUNWAY_API_KEY:
    logger.error("‚ùå API-–∫–ª—é—á –¥–ª—è RunwayML –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    raise ValueError("API-–∫–ª—é—á –¥–ª—è RunwayML –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ RunwayML ===
def generate_video_with_image_and_prompt(prompt, image_path):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RunwayML API
    """
    try:
        if USE_MOCK_API:
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (Runway API Mock).")
            mock_video_url = f"https://mock.runwayml.com/video_{random.randint(1000, 9999)}.mp4"
            time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞). –°—Å—ã–ª–∫–∞: {mock_video_url}")
            return mock_video_url

        base64_image = encode_image_to_base64(image_path)
        if not base64_image:
            handle_error("Image Encoding Error", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")

        logger.info("üîÑ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Runway...")
        client = get_runwayml_client(api_key=RUNWAY_API_KEY)
        task = client.image_to_video.create(
            model=RUNWAY_MODEL,
            prompt_image=f"data:image/jpeg;base64,{base64_image}",
            prompt_text=prompt,
            duration=RUNWAY_DURATION,
            ratio=RUNWAY_RATIO
        )
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {task.id}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        while True:
            task_status = client.tasks.retrieve(task.id)
            logger.info(f"üîç –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_status.status}")
            if task_status.status in ["SUCCEEDED", "FAILED"]:
                break
            time.sleep(5)  # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞

        if task_status.status == "SUCCEEDED":
            video_url = task_status.output[0]
            logger.info(f"üèÅ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –°—Å—ã–ª–∫–∞: {video_url}")
            save_video(video_url)
            return video_url
        else:
            handle_error("Runway Video Generation Error", "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.")

    except Exception as e:
        handle_error("RunwayML Video Generation Error", str(e))


def save_video(video_url):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL
    """
    try:
        import requests
        response = requests.get(video_url, timeout=30)
        response.raise_for_status()
        ensure_directory_exists(os.path.dirname(DEFAULT_VIDEO_PATH))
        with open(DEFAULT_VIDEO_PATH, 'wb') as file:
            file.write(response.content)
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {DEFAULT_VIDEO_PATH}")
    except Exception as e:
        handle_error("Video Save Error", str(e))


def main():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    video_url = generate_video_with_image_and_prompt(RUNWAY_SCENARIO, DEFAULT_IMAGE_PATH)

    if video_url:
        logger.info(f"üèÅ –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –°—Å—ã–ª–∫–∞: {video_url}")
    else:
        handle_error("Runway Media Generation Error", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.")


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
