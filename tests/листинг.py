import os
import json
import boto3
import logging
from prettytable import PrettyTable

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
B2_ACCESS_KEY = os.getenv("B2_ACCESS_KEY")
B2_SECRET_KEY = os.getenv("B2_SECRET_KEY")
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")
B2_ENDPOINT = os.getenv("B2_ENDPOINT")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–¥–∞–Ω—ã
if not all([B2_ACCESS_KEY, B2_SECRET_KEY, B2_BUCKET_NAME, B2_ENDPOINT]):
    logging.error("‚ùå –ù–µ –≤—Å–µ –∫–ª—é—á–∏ B2 –∑–∞–¥–∞–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
    exit(1)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ B2
s3_client = boto3.client(
    "s3",
    endpoint_url=B2_ENDPOINT,
    aws_access_key_id=B2_ACCESS_KEY,
    aws_secret_access_key=B2_SECRET_KEY
)


def list_folder(bucket_name, prefix):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    table = PrettyTable(["–§–∞–π–ª", "–†–∞–∑–º–µ—Ä (KB)"])
    try:
        response = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
        if "Contents" in response:
            for obj in response["Contents"]:
                file_name = obj["Key"]
                file_size = round(obj["Size"] / 1024, 2)  # –†–∞–∑–º–µ—Ä –≤ KB
                table.add_row([file_name, file_size])
            logging.info(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {prefix}:\n{table}")
        else:
            logging.info(f"üìÇ –ü–∞–ø–∫–∞ {prefix} –ø—É—Å—Ç–∞.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∏—Å—Ç–∏–Ω–≥–µ {prefix}: {e}")


def get_config(bucket_name, config_file="config/config_public.json"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç config_public.json"""
    try:
        response = s3_client.get_object(Bucket=bucket_name, Key=config_file)
        config_data = json.loads(response["Body"].read().decode("utf-8"))

        table = PrettyTable(["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
        for key, value in config_data.items():
            table.add_row([key, json.dumps(value, ensure_ascii=False)])

        logging.info(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {config_file}:\n{table}")
        return config_data

    except s3_client.exceptions.NoSuchKey:
        logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {config_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å.")
        return None
    except json.JSONDecodeError:
        logging.error(f"‚ùå –§–∞–π–ª {config_file} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω! JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {config_file}: {e}")
        return None


# –í—ã–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç–∏–Ω–≥ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
list_folder(B2_BUCKET_NAME, "444/")
list_folder(B2_BUCKET_NAME, "555/")
list_folder(B2_BUCKET_NAME, "666/")
list_folder(B2_BUCKET_NAME, "config/")  # –î–æ–±–∞–≤–ª–µ–Ω –ª–∏—Å—Ç–∏–Ω–≥ –ø–∞–ø–∫–∏ config

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
get_config(B2_BUCKET_NAME)
