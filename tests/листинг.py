import os
import json
import boto3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("b2_debug_script")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ B2
B2_BUCKET_NAME = "boyarinnbotbucket"  # –ò–º—è –≤–∞—à–µ–≥–æ –±–∞–∫–µ—Ç–∞
B2_ENDPOINT = "https://s3.us-east-005.backblazeb2.com"  # Endpoint B2
B2_ACCESS_KEY = "00577030c4f964a0000000001"  # –í–∞—à access key
B2_SECRET_KEY = "K005jbqS4BAIdtXF9vE5nXJgsV4NHVI"  # –í–∞—à secret key
CONFIG_PUBLIC_REMOTE_PATH = "config/config_public.json"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ B2
CONFIG_PUBLIC_LOCAL_PATH = os.path.abspath("config_public.json")  # –õ–æ–∫–∞–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å
CONFIG_GEN_LOCAL_PATH = os.path.abspath("core/config/config_gen.json")  # –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ B2
def get_b2_client():
    try:
        return boto3.client(
            "s3",
            endpoint_url=B2_ENDPOINT,
            aws_access_key_id=B2_ACCESS_KEY,
            aws_secret_access_key=B2_SECRET_KEY,
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ B2: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ B2
def download_file_from_b2(client, remote_path, local_path):
    try:
        client.download_file(B2_BUCKET_NAME, remote_path, local_path)
        logger.info(f"‚úÖ –§–∞–π–ª '{remote_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ B2 –≤ {local_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –∏–∑ B2: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö
def list_b2_folder_contents(client, folder_names):
    try:
        for folder in folder_names:
            logger.info(f"üìÇ –õ–∏—Å—Ç–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏: {folder}")
            response = client.list_objects_v2(Bucket=B2_BUCKET_NAME, Prefix=folder)
            if 'Contents' in response:
                for obj in response['Contents']:
                    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {obj['Key']}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ '{folder}' –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∏—Å—Ç–∏–Ω–≥–µ –ø–∞–ø–æ–∫: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ config_gen.json
def read_local_config_gen():
    try:
        logger.info(f"üîÑ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {CONFIG_GEN_LOCAL_PATH}...")
        with open(CONFIG_GEN_LOCAL_PATH, "r", encoding="utf-8") as file:
            config_gen = json.load(file)
        logger.info(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ config_gen.json: {json.dumps(config_gen, ensure_ascii=False, indent=4)}")
        return config_gen
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ config_gen.json: {e}")
        raise

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
def main():
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        b2_client = get_b2_client()

        # –õ–∏—Å—Ç–∏–Ω–≥ –ø–∞–ø–æ–∫ 444, 555, 666
        list_b2_folder_contents(b2_client, ["444/", "555/", "666/"])

        # –ó–∞–≥—Ä—É–∑–∫–∞ config_public.json –∏–∑ B2
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ config_public.json –∏–∑ B2...")
        download_file_from_b2(b2_client, CONFIG_PUBLIC_REMOTE_PATH, CONFIG_PUBLIC_LOCAL_PATH)

        # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ config_public.json
        with open(CONFIG_PUBLIC_LOCAL_PATH, "r", encoding="utf-8") as file:
            config_public = json.load(file)
        logger.info(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ config_public.json: {json.dumps(config_public, ensure_ascii=False, indent=4)}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        os.remove(CONFIG_PUBLIC_LOCAL_PATH)
        logger.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª config_public.json —É–¥–∞–ª—ë–Ω.")

        # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ config_gen.json
        read_local_config_gen()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")

if __name__ == "__main__":
    main()
